
UART_NEW.elf:     file format elf32-littlenios2
UART_NEW.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000134

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000490 memsz 0x00000490 flags r-x
    LOAD off    0x000014b0 vaddr 0x000004b0 paddr 0x000004e0 align 2**12
         filesz 0x00000030 memsz 0x00000030 flags rw-
    LOAD off    0x00001510 vaddr 0x00000510 paddr 0x00000510 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000114  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000368  00000134  00000134  00001134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .reset        00000010  0000049c  0000049c  0000149c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000004  000004ac  000004ac  000014ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .rwdata       00000030  000004b0  000004e0  000014b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  6 .bss          00000010  00000510  00000510  00001510  2**2
                  ALLOC, SMALL_DATA
  7 .new_sdram_controller_0 00000000  00000520  00000520  000014e0  2**0
                  CONTENTS
  8 .onchip_memory2_0 00000000  04004000  04004000  000014e0  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000001b8  00000000  00000000  00001508  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00000e87  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00000821  00000000  00000000  00002547  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000888  00000000  00000000  00002d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000001f4  00000000  00000000  000035f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000006e5  00000000  00000000  000037e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000020d  00000000  00000000  00003ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000030  00000000  00000000  000040d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000000d0  00000000  00000000  00004108  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  00005222  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  00005225  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00005231  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00005232  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00005233  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0000523e  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  00005249  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000e  00000000  00000000  00005254  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000031  00000000  00000000  00005262  2**0
                  CONTENTS, READONLY
 28 .jdi          000055bb  00000000  00000000  00005293  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00061d6d  00000000  00000000  0000a84e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000134 l    d  .text	00000000 .text
0000049c l    d  .reset	00000000 .reset
000004ac l    d  .rodata	00000000 .rodata
000004b0 l    d  .rwdata	00000000 .rwdata
00000510 l    d  .bss	00000000 .bss
00000520 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
04004000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../UART_NEW_bsp//obj/HAL/src/crt0.o
0000017c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 exception.c
00000034 l       .exceptions	00000000 SKIP_EA_DEC
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 strlen.c
00000360 g     F .text	0000002c alt_main
000004e0 g       *ABS*	00000000 __flash_rwdata_start
000004d4 g     O .rwdata	00000004 UART
0000038c g     F .text	00000038 alt_putstr
00000440 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000004cc g     O .rwdata	00000004 UART_TX
00000518 g     O .bss	00000004 alt_argv
000084b0 g       *ABS*	00000000 _gp
04004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00000448 g     F .text	00000038 alt_icache_flush
000004d0 g     O .rwdata	00000004 uart_ctrl
00000520 g       *ABS*	00000000 __bss_end
00000510 g     O .bss	00000004 interrupt_counter
0000041c g     F .text	00000018 alt_dcache_flush_all
000004e0 g       *ABS*	00000000 __ram_rwdata_end
000004b0 g       *ABS*	00000000 __ram_rodata_end
000004dc g     O .rwdata	00000004 jtag_uart_0
000004c0 g     O .rwdata	00000004 Output_LED8
00000520 g       *ABS*	00000000 end
000004b4 g     O .rwdata	00000004 Input_MSB_IRQ
04000000 g       *ABS*	00000000 __alt_stack_pointer
000003e8 g     F .text	00000034 altera_avalon_jtag_uart_write
000004bc g     O .rwdata	00000004 HEX0
00000134 g     F .text	0000004c _start
000003e4 g     F .text	00000004 alt_sys_init
000004b0 g       *ABS*	00000000 __ram_rwdata_start
000004ac g       *ABS*	00000000 __ram_rodata_start
00000520 g       *ABS*	00000000 __alt_stack_base
00000020 g     F .exceptions	00000114 the_exception
00000510 g       *ABS*	00000000 __bss_start
0000020c g     F .text	00000074 main
00000514 g     O .bss	00000004 alt_envp
000004d8 g     O .rwdata	00000004 uart_0
000004ac g       *ABS*	00000000 __flash_rodata_start
000004c8 g     O .rwdata	00000004 Input_Key1
000004c4 g     O .rwdata	00000004 Output_LEDR
00000180 g     F .text	0000008c interrupt_handler
000003c4 g     F .text	00000020 alt_irq_init
0000051c g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
000004e0 g       *ABS*	00000000 _edata
00000520 g       *ABS*	00000000 _end
00000134 g       *ABS*	00000000 __ram_exceptions_end
0000049c g     F .reset	00000010 the_reset
000004b8 g     O .rwdata	00000004 Input_MSB
04000000 g       *ABS*	00000000 __alt_data_end
0000001c g       .entry	00000000 _exit
00000480 g     F .text	0000001c strlen
00000434 g     F .text	0000000c alt_icache_flush_all
000004b0 g     O .rwdata	00000004 Input_MSB_EDGECAPTURE
00000280 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_onchip_memory2_0+0xfbffc004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08404d14 	ori	at,at,308
    jmp r1
  18:	0800683a 	jmp	at

0000001c <_exit>:
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <the_exception>:
* exception. *
***************************************************************************/
{
asm ( ".set noat" ); 					// Magic, for the C compiler
asm ( ".set nobreak" ); 				// Magic, for the C compiler
asm ( "subi sp, sp, 128" ); 			// make space on the stack
  20:	deffe004 	addi	sp,sp,-128
asm ( "stw et, 96(sp)" ); 				// save exception temporary
  24:	de001815 	stw	et,96(sp)
asm ( "rdctl et, ctl4" ); 				// read control register ctl4 ipending
  28:	0031313a 	rdctl	et,ipending
asm ( "beq et, r0, SKIP_EA_DEC" ); 		// Interrupt is not external
  2c:	c0000126 	beq	et,zero,34 <SKIP_EA_DEC>
asm ( "subi ea, ea, 4" ); 				// if external must decrement
  30:	ef7fff04 	addi	ea,ea,-4

00000034 <SKIP_EA_DEC>:
										// ea by one instruction for
										// external interrupts, so that
										// the interrupted instruction
										// will be run
asm ( "SKIP_EA_DEC:" );
asm ( "stw r1, 4(sp)" ); 				// Save all registers
  34:	d8400115 	stw	at,4(sp)
asm ( "stw r2, 8(sp)" );
  38:	d8800215 	stw	r2,8(sp)
asm ( "stw r3, 12(sp)" );
  3c:	d8c00315 	stw	r3,12(sp)
asm ( "stw r4, 16(sp)" );
  40:	d9000415 	stw	r4,16(sp)
asm ( "stw r5, 20(sp)" );
  44:	d9400515 	stw	r5,20(sp)
asm ( "stw r6, 24(sp)" );
  48:	d9800615 	stw	r6,24(sp)
asm ( "stw r7, 28(sp)" );
  4c:	d9c00715 	stw	r7,28(sp)
asm ( "stw r8, 32(sp)" );
  50:	da000815 	stw	r8,32(sp)
asm ( "stw r9, 36(sp)" );
  54:	da400915 	stw	r9,36(sp)
asm ( "stw r10, 40(sp)" );
  58:	da800a15 	stw	r10,40(sp)
asm ( "stw r11, 44(sp)" );
  5c:	dac00b15 	stw	r11,44(sp)
asm ( "stw r12, 48(sp)" );
  60:	db000c15 	stw	r12,48(sp)
asm ( "stw r13, 52(sp)" );
  64:	db400d15 	stw	r13,52(sp)
asm ( "stw r14, 56(sp)" );
  68:	db800e15 	stw	r14,56(sp)
asm ( "stw r15, 60(sp)" );
  6c:	dbc00f15 	stw	r15,60(sp)
asm ( "stw r16, 64(sp)" );
  70:	dc001015 	stw	r16,64(sp)
asm ( "stw r17, 68(sp)" );
  74:	dc401115 	stw	r17,68(sp)
asm ( "stw r18, 72(sp)" );
  78:	dc801215 	stw	r18,72(sp)
asm ( "stw r19, 76(sp)" );
  7c:	dcc01315 	stw	r19,76(sp)
asm ( "stw r20, 80(sp)" );
  80:	dd001415 	stw	r20,80(sp)
asm ( "stw r21, 84(sp)" );
  84:	dd401515 	stw	r21,84(sp)
asm ( "stw r22, 88(sp)" );
  88:	dd801615 	stw	r22,88(sp)
asm ( "stw r23, 92(sp)" );
  8c:	ddc01715 	stw	r23,92(sp)
asm ( "stw r25, 100(sp)" ); 			// r25 = bt (skip r24 = et, because
  90:	de401915 	stw	bt,100(sp)
										// it is saved above)
asm ( "stw r26, 104(sp)" ); 			// r26 = gp
  94:	de801a15 	stw	gp,104(sp)
										// skip r27 because it is sp, and
										// there is no point in saving this
asm ( "stw r28, 112(sp)" ); 			// r28 = fp
  98:	df001c15 	stw	fp,112(sp)
asm ( "stw r29, 116(sp)" ); 			// r29 = ea
  9c:	df401d15 	stw	ea,116(sp)
asm ( "stw r30, 120(sp)" ); 			// r30 = ba
  a0:	df801e15 	stw	sstatus,120(sp)
asm ( "stw r31, 124(sp)" ); 			// r31 = ra
  a4:	dfc01f15 	stw	ra,124(sp)
asm ( "addi fp, sp, 128" );
  a8:	df002004 	addi	fp,sp,128
asm ( "call interrupt_handler" ); 		// Call the C language interrupt
  ac:	00001800 	call	180 <interrupt_handler>
										// handler
asm ( "ldw r1, 4(sp)" ); 				// Restore all registers
  b0:	d8400117 	ldw	at,4(sp)
asm ( "ldw r2, 8(sp)" );
  b4:	d8800217 	ldw	r2,8(sp)
asm ( "ldw r3, 12(sp)" );
  b8:	d8c00317 	ldw	r3,12(sp)
asm ( "ldw r4, 16(sp)" );
  bc:	d9000417 	ldw	r4,16(sp)
asm ( "ldw r5, 20(sp)" );
  c0:	d9400517 	ldw	r5,20(sp)
asm ( "ldw r6, 24(sp)" );
  c4:	d9800617 	ldw	r6,24(sp)
asm ( "ldw r7, 28(sp)" );
  c8:	d9c00717 	ldw	r7,28(sp)
asm ( "ldw r8, 32(sp)" );
  cc:	da000817 	ldw	r8,32(sp)
asm ( "ldw r9, 36(sp)" );
  d0:	da400917 	ldw	r9,36(sp)
asm ( "ldw r10, 40(sp)" );
  d4:	da800a17 	ldw	r10,40(sp)
asm ( "ldw r11, 44(sp)" );
  d8:	dac00b17 	ldw	r11,44(sp)
asm ( "ldw r12, 48(sp)" );
  dc:	db000c17 	ldw	r12,48(sp)
asm ( "ldw r13, 52(sp)" );
  e0:	db400d17 	ldw	r13,52(sp)
asm ( "ldw r14, 56(sp)" );
  e4:	db800e17 	ldw	r14,56(sp)
asm ( "ldw r15, 60(sp)" );
  e8:	dbc00f17 	ldw	r15,60(sp)
asm ( "ldw r16, 64(sp)" );
  ec:	dc001017 	ldw	r16,64(sp)
asm ( "ldw r17, 68(sp)" );
  f0:	dc401117 	ldw	r17,68(sp)
asm ( "ldw r18, 72(sp)" );
  f4:	dc801217 	ldw	r18,72(sp)
asm ( "ldw r19, 76(sp)" );
  f8:	dcc01317 	ldw	r19,76(sp)
asm ( "ldw r20, 80(sp)" );
  fc:	dd001417 	ldw	r20,80(sp)
asm ( "ldw r21, 84(sp)" );
 100:	dd401517 	ldw	r21,84(sp)
asm ( "ldw r22, 88(sp)" );
 104:	dd801617 	ldw	r22,88(sp)
asm ( "ldw r23, 92(sp)" );
 108:	ddc01717 	ldw	r23,92(sp)
asm ( "ldw r24, 96(sp)" );
 10c:	de001817 	ldw	et,96(sp)
asm ( "ldw r25, 100(sp)" );				// r25 = bt
 110:	de401917 	ldw	bt,100(sp)
asm ( "ldw r26, 104(sp)" );				// r26 = gp
 114:	de801a17 	ldw	gp,104(sp)
										// skip r27 because it is sp, and
										// we did not save this on the stack
asm ( "ldw r28, 112(sp)" );				// r28 = fp
 118:	df001c17 	ldw	fp,112(sp)
asm ( "ldw r29, 116(sp)" );				// r29 = ea
 11c:	df401d17 	ldw	ea,116(sp)
asm ( "ldw r30, 120(sp)" );				// r30 = ba
 120:	df801e17 	ldw	sstatus,120(sp)
asm ( "ldw r31, 124(sp)" );				// r31 = ra
 124:	dfc01f17 	ldw	ra,124(sp)
asm ( "addi sp, sp, 128" );
 128:	dec02004 	addi	sp,sp,128
asm ( "eret" );
 12c:	ef80083a 	eret
 130:	f800283a 	ret

Disassembly of section .text:

00000134 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 134:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 138:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 13c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 140:	00bffd16 	blt	zero,r2,138 <__alt_mem_onchip_memory2_0+0xfbffc138>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 144:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 148:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 14c:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
 150:	d6a12c14 	ori	gp,gp,33968
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 154:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
 158:	10814414 	ori	r2,r2,1296

    movhi r3, %hi(__bss_end)
 15c:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
 160:	18c14814 	ori	r3,r3,1312

    beq r2, r3, 1f
 164:	10c00326 	beq	r2,r3,174 <_start+0x40>

0:
    stw zero, (r2)
 168:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 16c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 170:	10fffd36 	bltu	r2,r3,168 <__alt_mem_onchip_memory2_0+0xfbffc168>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 174:	00002800 	call	280 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 178:	00003600 	call	360 <alt_main>

0000017c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 17c:	003fff06 	br	17c <__alt_mem_onchip_memory2_0+0xfbffc17c>

00000180 <interrupt_handler>:
{

	//int ipending; declare a variable like this to store the ipending register value to a local variable for comparision purpose - i have already declared below
	int ipending;

	NIOS2_READ_IPENDING(ipending); // read from ipending register (ctl4)
 180:	0005313a 	rdctl	r2,ipending
	*Input_MSB_EDGECAPTURE = 0xFFFFFFFF;
 184:	d1600017 	ldw	r5,-32768(gp)
 188:	01bfffc4 	movi	r6,-1
 18c:	29800015 	stw	r6,0(r5)
	// Write suitable C function statement - Refer to the "nios2_ctrl_reg_macros.h" and find out function to use to read ipending register - write below
	// Write code to check whether irq0 level interrupt occurred (like if statement)
	// Write statement to count number of times you entered this loop
	interrupt_counter++;
 190:	d0e01817 	ldw	r3,-32672(gp)
 194:	18c00044 	addi	r3,r3,1
 198:	d0e01815 	stw	r3,-32672(gp)
//	{
////		sprintf(msg, "ipending = 0x%X\n", ipending);
////		alt_putstr(msg);
//	}

	if (ipending & 0x01) // if MSB interrupt
 19c:	10c0004c 	andi	r3,r2,1
 1a0:	18000a26 	beq	r3,zero,1cc <interrupt_handler+0x4c>
	{
//		*(GPIO) = 0x01;
		*(Output_LEDR) = ++*(Output_LEDR);
 1a4:	d1200517 	ldw	r4,-32748(gp)
 1a8:	20c00017 	ldw	r3,0(r4)
 1ac:	18c00044 	addi	r3,r3,1
 1b0:	20c00015 	stw	r3,0(r4)
 1b4:	20c00015 	stw	r3,0(r4)
		*Input_MSB_EDGECAPTURE = 0xFFFFFFFF;
		* UART_TX = "0";
 1b8:	d0e00717 	ldw	r3,-32740(gp)
 1bc:	01000034 	movhi	r4,0

	if (ipending & 0x01) // if MSB interrupt
	{
//		*(GPIO) = 0x01;
		*(Output_LEDR) = ++*(Output_LEDR);
		*Input_MSB_EDGECAPTURE = 0xFFFFFFFF;
 1c0:	29800015 	stw	r6,0(r5)
		* UART_TX = "0";
 1c4:	21012b04 	addi	r4,r4,1196
 1c8:	19000015 	stw	r4,0(r3)
//		*(GPIO) = 0x00;
	}

	if (ipending & 0x02)
 1cc:	1080008c 	andi	r2,r2,2
 1d0:	10000d26 	beq	r2,zero,208 <interrupt_handler+0x88>
	{
		// read the incoming byte
		char rec = (*UART)  & 0xFF ;
 1d4:	d0a00917 	ldw	r2,-32732(gp)
***************************************************************************/
// helper to print hex nibble
static const char hex[] = "0123456789ABCDEF";

void interrupt_handler(void)
{
 1d8:	deffff04 	addi	sp,sp,-4
 1dc:	dfc00015 	stw	ra,0(sp)
	}

	if (ipending & 0x02)
	{
		// read the incoming byte
		char rec = (*UART)  & 0xFF ;
 1e0:	11000017 	ldw	r4,0(r2)

		// echo it back
		alt_putstr(rec);
 1e4:	21003fcc 	andi	r4,r4,255
 1e8:	2100201c 	xori	r4,r4,128
 1ec:	213fe004 	addi	r4,r4,-128
 1f0:	000038c0 	call	38c <alt_putstr>
		* HEX0 = 0b11000000;
 1f4:	d0a00317 	ldw	r2,-32756(gp)
 1f8:	00c03004 	movi	r3,192
 1fc:	10c00015 	stw	r3,0(r2)
		// drive HEX0 based on rec
//		switch (rec) {
//			case '0':  *HEX0 = 0x3; break;
//		}
	}
}
 200:	dfc00017 	ldw	ra,0(sp)
 204:	dec00104 	addi	sp,sp,4
 208:	f800283a 	ret

0000020c <main>:

	// KEY[1] LED[8] variables
	int prev_Key1 = 1;

	// Below 3 lines of code will be needed to set interrupts
	* uart_ctrl = 0b10000000;
 20c:	d0a00817 	ldw	r2,-32736(gp)
 210:	00c02004 	movi	r3,128
	* HEX0 = 0b11111111;
	* Input_MSB_EDGECAPTURE = 0x1;
	* Input_MSB_IRQ = 1;
 214:	d1200117 	ldw	r4,-32764(gp)

	// KEY[1] LED[8] variables
	int prev_Key1 = 1;

	// Below 3 lines of code will be needed to set interrupts
	* uart_ctrl = 0b10000000;
 218:	10c00015 	stw	r3,0(r2)
	* HEX0 = 0b11111111;
 21c:	d0a00317 	ldw	r2,-32756(gp)
 220:	00c03fc4 	movi	r3,255
 224:	10c00015 	stw	r3,0(r2)
	* Input_MSB_EDGECAPTURE = 0x1;
 228:	d0e00017 	ldw	r3,-32768(gp)
 22c:	00800044 	movi	r2,1
 230:	18800015 	stw	r2,0(r3)
	* Input_MSB_IRQ = 1;
 234:	20800015 	stw	r2,0(r4)
	* Input_MSB_EDGECAPTURE = 0x1;
 238:	18800015 	stw	r2,0(r3)
	NIOS2_WRITE_STATUS(0x1);	// Enable global interrupts (PIE = 1)
 23c:	1001703a 	wrctl	status,r2
	NIOS2_WRITE_IENABLE(0x3);	// Set IRQ bit
 240:	008000c4 	movi	r2,3
 244:	100170fa 	wrctl	ienable,r2

		if ( (!prev_Key1) && *(Input_Key1))// previous Key[1] state && current Key[1] state
		{
			*(Output_LED8) = ++*(Output_LED8);
		}
		prev_Key1 = *(Input_Key1);
 248:	d1200617 	ldw	r4,-32744(gp)
//			alt_putchar('\n');
//		}

		if ( (!prev_Key1) && *(Input_Key1))// previous Key[1] state && current Key[1] state
		{
			*(Output_LED8) = ++*(Output_LED8);
 24c:	d0e00417 	ldw	r3,-32752(gp)
		}
		prev_Key1 = *(Input_Key1);
 250:	21400017 	ldw	r5,0(r4)
 254:	0089c404 	movi	r2,10000
 258:	10bfffc4 	addi	r2,r2,-1

		// Write the code for toggling the LED8- same as poling part
		// Add codes like below a long for loop that ensures debouncing // of switch not read
		for(sleepy = 0; sleepy < 10000; sleepy++)
 25c:	103ffe1e 	bne	r2,zero,258 <__alt_mem_onchip_memory2_0+0xfbffc258>
//			alt_putstr("RECEIVED: ");
//			alt_putchar(rec);
//			alt_putchar('\n');
//		}

		if ( (!prev_Key1) && *(Input_Key1))// previous Key[1] state && current Key[1] state
 260:	283ffb1e 	bne	r5,zero,250 <__alt_mem_onchip_memory2_0+0xfbffc250>
 264:	20800017 	ldw	r2,0(r4)
 268:	103ff926 	beq	r2,zero,250 <__alt_mem_onchip_memory2_0+0xfbffc250>
		{
			*(Output_LED8) = ++*(Output_LED8);
 26c:	18800017 	ldw	r2,0(r3)
 270:	10800044 	addi	r2,r2,1
 274:	18800015 	stw	r2,0(r3)
 278:	18800015 	stw	r2,0(r3)
 27c:	003ff406 	br	250 <__alt_mem_onchip_memory2_0+0xfbffc250>

00000280 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 280:	deffff04 	addi	sp,sp,-4
 284:	01000034 	movhi	r4,0
 288:	01400034 	movhi	r5,0
 28c:	dfc00015 	stw	ra,0(sp)
 290:	21012c04 	addi	r4,r4,1200
 294:	29413804 	addi	r5,r5,1248

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 298:	2140061e 	bne	r4,r5,2b4 <alt_load+0x34>
 29c:	01000034 	movhi	r4,0
 2a0:	01400034 	movhi	r5,0
 2a4:	21000804 	addi	r4,r4,32
 2a8:	29400804 	addi	r5,r5,32
 2ac:	2140121e 	bne	r4,r5,2f8 <alt_load+0x78>
 2b0:	00000b06 	br	2e0 <alt_load+0x60>
 2b4:	00c00034 	movhi	r3,0
 2b8:	18c13804 	addi	r3,r3,1248
 2bc:	1907c83a 	sub	r3,r3,r4
 2c0:	0005883a 	mov	r2,zero
  {
    while( to != end )
 2c4:	10fff526 	beq	r2,r3,29c <__alt_mem_onchip_memory2_0+0xfbffc29c>
    {
      *to++ = *from++;
 2c8:	114f883a 	add	r7,r2,r5
 2cc:	39c00017 	ldw	r7,0(r7)
 2d0:	110d883a 	add	r6,r2,r4
 2d4:	10800104 	addi	r2,r2,4
 2d8:	31c00015 	stw	r7,0(r6)
 2dc:	003ff906 	br	2c4 <__alt_mem_onchip_memory2_0+0xfbffc2c4>
 2e0:	01000034 	movhi	r4,0
 2e4:	01400034 	movhi	r5,0
 2e8:	21012b04 	addi	r4,r4,1196
 2ec:	29412b04 	addi	r5,r5,1196

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 2f0:	2140101e 	bne	r4,r5,334 <alt_load+0xb4>
 2f4:	00000b06 	br	324 <alt_load+0xa4>
 2f8:	00c00034 	movhi	r3,0
 2fc:	18c04d04 	addi	r3,r3,308
 300:	1907c83a 	sub	r3,r3,r4
 304:	0005883a 	mov	r2,zero
  {
    while( to != end )
 308:	10fff526 	beq	r2,r3,2e0 <__alt_mem_onchip_memory2_0+0xfbffc2e0>
    {
      *to++ = *from++;
 30c:	114f883a 	add	r7,r2,r5
 310:	39c00017 	ldw	r7,0(r7)
 314:	110d883a 	add	r6,r2,r4
 318:	10800104 	addi	r2,r2,4
 31c:	31c00015 	stw	r7,0(r6)
 320:	003ff906 	br	308 <__alt_mem_onchip_memory2_0+0xfbffc308>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 324:	000041c0 	call	41c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 328:	dfc00017 	ldw	ra,0(sp)
 32c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 330:	00004341 	jmpi	434 <alt_icache_flush_all>
 334:	00c00034 	movhi	r3,0
 338:	18c12c04 	addi	r3,r3,1200
 33c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 340:	0005883a 	mov	r2,zero
  {
    while( to != end )
 344:	18bff726 	beq	r3,r2,324 <__alt_mem_onchip_memory2_0+0xfbffc324>
    {
      *to++ = *from++;
 348:	114f883a 	add	r7,r2,r5
 34c:	39c00017 	ldw	r7,0(r7)
 350:	110d883a 	add	r6,r2,r4
 354:	10800104 	addi	r2,r2,4
 358:	31c00015 	stw	r7,0(r6)
 35c:	003ff906 	br	344 <__alt_mem_onchip_memory2_0+0xfbffc344>

00000360 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 360:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 364:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 368:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 36c:	00003c40 	call	3c4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 370:	00003e40 	call	3e4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 374:	d1a01917 	ldw	r6,-32668(gp)
 378:	d1601a17 	ldw	r5,-32664(gp)
 37c:	d1201b17 	ldw	r4,-32660(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 380:	dfc00017 	ldw	ra,0(sp)
 384:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 388:	000020c1 	jmpi	20c <main>

0000038c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 38c:	defffe04 	addi	sp,sp,-8
 390:	dc000015 	stw	r16,0(sp)
 394:	dfc00115 	stw	ra,4(sp)
 398:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 39c:	00004800 	call	480 <strlen>
 3a0:	01000034 	movhi	r4,0
 3a4:	000f883a 	mov	r7,zero
 3a8:	100d883a 	mov	r6,r2
 3ac:	800b883a 	mov	r5,r16
 3b0:	21013704 	addi	r4,r4,1244
#else
    return fputs(str, stdout);
#endif
#endif
}
 3b4:	dfc00117 	ldw	ra,4(sp)
 3b8:	dc000017 	ldw	r16,0(sp)
 3bc:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 3c0:	00003e81 	jmpi	3e8 <altera_avalon_jtag_uart_write>

000003c4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 3c4:	deffff04 	addi	sp,sp,-4
 3c8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 3cc:	00004400 	call	440 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 3d0:	00800044 	movi	r2,1
 3d4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 3d8:	dfc00017 	ldw	ra,0(sp)
 3dc:	dec00104 	addi	sp,sp,4
 3e0:	f800283a 	ret

000003e4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 3e4:	f800283a 	ret

000003e8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 3e8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 3ec:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 3f0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 3f4:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 3f8:	2980072e 	bgeu	r5,r6,418 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 3fc:	38c00037 	ldwio	r3,0(r7)
 400:	18ffffec 	andhi	r3,r3,65535
 404:	183ffc26 	beq	r3,zero,3f8 <__alt_mem_onchip_memory2_0+0xfbffc3f8>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 408:	28c00007 	ldb	r3,0(r5)
 40c:	20c00035 	stwio	r3,0(r4)
 410:	29400044 	addi	r5,r5,1
 414:	003ff806 	br	3f8 <__alt_mem_onchip_memory2_0+0xfbffc3f8>

  return count;
}
 418:	f800283a 	ret

0000041c <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 41c:	0005883a 	mov	r2,zero
 420:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 424:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 428:	10800804 	addi	r2,r2,32
 42c:	10fffd1e 	bne	r2,r3,424 <__alt_mem_onchip_memory2_0+0xfbffc424>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 430:	f800283a 	ret

00000434 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 434:	01440004 	movi	r5,4096
 438:	0009883a 	mov	r4,zero
 43c:	00004481 	jmpi	448 <alt_icache_flush>

00000440 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 440:	000170fa 	wrctl	ienable,zero
 444:	f800283a 	ret

00000448 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
 448:	00840004 	movi	r2,4096
 44c:	1140012e 	bgeu	r2,r5,454 <alt_icache_flush+0xc>
 450:	100b883a 	mov	r5,r2
 454:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 458:	2005883a 	mov	r2,r4
 45c:	1140032e 	bgeu	r2,r5,46c <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 460:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 464:	10800804 	addi	r2,r2,32
 468:	003ffc06 	br	45c <__alt_mem_onchip_memory2_0+0xfbffc45c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 46c:	210007cc 	andi	r4,r4,31
 470:	20000126 	beq	r4,zero,478 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 474:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 478:	0000203a 	flushp
 47c:	f800283a 	ret

00000480 <strlen>:
 480:	2005883a 	mov	r2,r4
 484:	10c00007 	ldb	r3,0(r2)
 488:	18000226 	beq	r3,zero,494 <strlen+0x14>
 48c:	10800044 	addi	r2,r2,1
 490:	003ffc06 	br	484 <__alt_mem_onchip_memory2_0+0xfbffc484>
 494:	1105c83a 	sub	r2,r2,r4
 498:	f800283a 	ret

Disassembly of section .reset:

0000049c <the_reset>:
* we allow the linker program to locate this code at the proper reset *
* vector address. This code just calls the main program. *
***************************************************************************/
{
asm (".set noat"); // Magic, for the C compiler
asm (".set nobreak"); // Magic, for the C compiler
 49c:	00800034 	movhi	r2,0
asm ("movia r2, main"); // Call the C language main program
 4a0:	10808304 	addi	r2,r2,524
asm ("jmp r2");
 4a4:	1000683a 	jmp	r2
 4a8:	f800283a 	ret
