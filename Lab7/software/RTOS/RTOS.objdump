
RTOS.elf:     file format elf32-littlenios2
RTOS.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000f008 memsz 0x0000f008 flags r-x
    LOAD off    0x00010028 vaddr 0x0000f028 paddr 0x00010c14 align 2**12
         filesz 0x00001bec memsz 0x00001bec flags rw-
    LOAD off    0x00012800 vaddr 0x00012800 paddr 0x00012800 align 2**12
         filesz 0x00000000 memsz 0x0000549c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e968  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000047c  0000ebac  0000ebac  0000fbac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bec  0000f028  00010c14  00010028  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000549c  00012800  00012800  00012800  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  00017c9c  00017c9c  00011c14  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  04004000  04004000  00011c14  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00011c14  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000cc8  00000000  00000000  00011c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00024367  00000000  00000000  00012900  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008c63  00000000  00000000  00036c67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009fb3  00000000  00000000  0003f8ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002998  00000000  00000000  00049880  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003b99  00000000  00000000  0004c218  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004f48  00000000  00000000  0004fdb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00054cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000728  00000000  00000000  00054d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000596b6  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000596bc  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000596c8  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000596c9  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  000596ca  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  000596d5  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  000596e0  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000e  00000000  00000000  000596eb  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000031  00000000  00000000  000596f9  2**0
                  CONTENTS, READONLY
 27 .jdi          000055bb  00000000  00000000  0005972a  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0006861e  00000000  00000000  0005ece5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0000ebac l    d  .rodata	00000000 .rodata
0000f028 l    d  .rwdata	00000000 .rwdata
00012800 l    d  .bss	00000000 .bss
00017c9c l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
04004000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../RTOS_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
000008d4 l     F .text	00000008 __fp_unlock
000008e8 l     F .text	0000019c __sinit.part.1
00000a84 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000f034 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 alt_close.c
0000337c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00003488 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000034b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000035a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00003680 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000376c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_read.c
000039b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00010b88 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00003bfc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00010b8c l     O .rwdata	00000004 lockid
00012820 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00010b90 l     O .rwdata	00000004 lockid
00012828 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0000562c l     F .text	00000048 OS_InitMisc
00005674 l     F .text	0000006c OS_InitRdyList
000057e0 l     F .text	000000e4 OS_InitTCBList
0000554c l     F .text	000000e0 OS_InitEventList
000056e0 l     F .text	00000080 OS_InitTaskIdle
00005760 l     F .text	00000080 OS_InitTaskStat
00005a50 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00007760 l     F .text	000000f4 OS_FlagTaskRdy
00007520 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000b808 l     F .text	00000034 alt_dev_reg
0000fa08 l     O .rwdata	0000106c jtag_uart_0
00010a74 l     O .rwdata	000000d0 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000bba0 l     F .text	000002a4 altera_avalon_jtag_uart_irq
0000be44 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000c620 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0000c984 l     F .text	0000009c altera_avalon_uart_irq
0000ca20 l     F .text	00000138 altera_avalon_uart_rxirq
0000cb58 l     F .text	000001a4 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0000cd50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0000cff4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000d3dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000d850 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000d990 l     F .text	0000003c alt_get_errno
0000d9cc l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001288c g     O .bss	00000004 alt_instruction_exception_handler
00010bde g     O .rwdata	00000002 OSTaskNameSize
00003328 g     F .text	00000054 _isatty_r
0000387c g     F .text	000000bc alt_main
00000768 g     F .text	000000c0 _puts_r
00017b9c g     O .bss	00000100 alt_irq
00003050 g     F .text	00000060 _lseek_r
00007f80 g     F .text	000000cc OS_MemInit
00010c14 g       *ABS*	00000000 __flash_rwdata_start
0000b7a8 g     F .text	00000060 OSTimeSet
000042a0 g     F .text	00000610 OSEventPendMulti
00010b54 g     O .rwdata	00000004 UART
00017c9c g       *ABS*	00000000 __alt_heap_start
0000dfd8 g     F .text	00000024 OSTaskCreateHook
000128b8 g     O .bss	00001060 task1_stk
00010bb6 g     O .rwdata	00000002 OSMboxEn
00004908 g     F .text	0000004c OSIntEnter
00002604 g     F .text	0000005c __sseek
00000c24 g     F .text	00000010 __sinit
0000e788 g     F .text	00000140 __swbuf_r
00010bc6 g     O .rwdata	00000002 OSQEn
00000a8c g     F .text	00000068 __sfmoreglue
00003f74 g     F .text	000000cc __malloc_unlock
0000e040 g     F .text	00000020 OSTaskStatHook
00012830 g     O .bss	00000001 OSLockNesting
00010c04 g     O .rwdata	00000002 OSDataSize
00012831 g     O .bss	00000001 OSRunning
00001cf0 g     F .text	0000015c memmove
0000e080 g     F .text	00000020 OSInitHookBegin
00010bfc g     O .rwdata	00000002 OSTmrSize
00000c0c g     F .text	00000018 _cleanup
00012834 g     O .bss	00000004 OSIdleCtr
00003974 g     F .text	0000003c alt_putstr
0000dd88 g     F .text	00000024 altera_nios2_gen2_irq_init
0000de58 g       .text	00000000 OSStartTsk
00005d80 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
00010c02 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
00010ba2 g     O .rwdata	00000002 OSEventSize
00012838 g     O .bss	00000001 OSPrioHighRdy
000032cc g     F .text	0000005c _fstat_r
0000dffc g     F .text	00000024 OSTaskDelHook
0001280c g     O .bss	00000004 errno
00002580 g     F .text	00000008 __seofread
00010b58 g     O .rwdata	00000004 UART_TX
0000de38 g       .text	00000000 OSStartHighRdy
0000a24c g     F .text	000001e4 OSTaskCreateExt
00007068 g     F .text	00000060 OSFlagPendGetFlagsRdy
00010be2 g     O .rwdata	00000002 OSTaskStatStkSize
000061e4 g     F .text	00000308 OSFlagAccept
000085b8 g     F .text	000000b8 OSQFlush
0000804c g     F .text	00000140 OSQAccept
00012818 g     O .bss	00000004 alt_argv
00018b44 g       *ABS*	00000000 _gp
0000a0a0 g     F .text	000001ac OSTaskCreate
00009bb0 g     F .text	000004f0 OSTaskChangePrio
0001282c g     O .bss	00000004 alt_heapsem
00006054 g     F .text	00000190 OSDebugInit
0000a430 g     F .text	00000344 OSTaskDel
0000f888 g     O .rwdata	00000180 alt_fd_list
00014978 g     O .bss	00000370 OSFlagTbl
0000532c g     F .text	000000b8 OS_EventTaskRemove
0000e104 g     F .text	00000090 alt_find_dev
00001ba8 g     F .text	00000148 memcpy
00010bcc g     O .rwdata	00000002 OSRdyTblSize
000008dc g     F .text	0000000c _cleanup_r
0000d914 g     F .text	0000007c alt_io_redirect
0000ebac g       *ABS*	00000000 __DTOR_END__
00000828 g     F .text	00000014 puts
0000e408 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00004040 g     F .text	00000120 OSEventNameGet
00010bb0 g     O .rwdata	00000002 OSFlagMax
00004954 g     F .text	000000f8 OSIntExit
00010bea g     O .rwdata	00000002 OSTCBSize
00012839 g     O .bss	00000001 OSPrioCur
0000c0a0 g     F .text	000002bc altera_avalon_jtag_uart_read
04004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000006ac g     F .text	00000064 .hidden __udivsi3
000035dc g     F .text	000000a4 isatty
00010bd0 g     O .rwdata	00000002 OSStkWidth
00010bc4 g     O .rwdata	00000002 OSPtrSize
00010ba4 g     O .rwdata	00000002 OSEventTblSize
0000ddac g       .text	00000000 OSCtxSw
0000e378 g     F .text	00000090 alt_icache_flush
00012808 g     O .bss	00000004 __malloc_top_pad
0001283c g     O .bss	00000004 OSTCBList
00012810 g     O .bss	00000004 alt_fd_list_lock
00000c74 g     F .text	000004bc __sfvwrite_r
00014ce8 g     O .bss	00000c30 OSMemTbl
00012840 g     O .bss	00000001 OSTickStepState
000024d8 g     F .text	00000054 _sbrk_r
00010bc8 g     O .rwdata	00000002 OSQMax
00015918 g     O .bss	00000800 OSTaskStatStk
00007bbc g     F .text	000000f0 OSMemNameGet
00010ba8 g     O .rwdata	00000002 OSFlagEn
0000326c g     F .text	00000060 _read_r
00010bee g     O .rwdata	00000002 OSTimeTickHookEn
00008a68 g     F .text	00000168 OSQPost
00007854 g     F .text	000000a4 OS_FlagUnlink
00010b80 g     O .rwdata	00000004 alt_max_fd
00005918 g     F .text	00000068 OS_MemCopy
00005980 g     F .text	000000d0 OS_Sched
00002870 g     F .text	000000f0 _fclose_r
00007acc g     F .text	000000f0 OSMemGet
0000aa5c g     F .text	000001b4 OSTaskNameSet
00002bec g     F .text	00000030 fflush
00012804 g     O .bss	00000004 __malloc_max_sbrked_mem
00012844 g     O .bss	00000004 OSCtxSwCtr
0000e060 g     F .text	00000020 OSTimeTickHook
00010bb2 g     O .rwdata	00000002 OSFlagNameSize
000053e4 g     F .text	00000100 OS_EventTaskRemoveMulti
000051dc g     F .text	00000150 OS_EventTaskWaitMulti
00010bca g     O .rwdata	00000002 OSQSize
000037a8 g     F .text	000000d4 lseek
00009518 g     F .text	0000020c OSSemPend
00010b60 g     O .rwdata	00000004 _global_impure_ptr
00001f74 g     F .text	00000564 _realloc_r
00010bb4 g     O .rwdata	00000002 OSLowestPrio
00017c9c g       *ABS*	00000000 __bss_end
0000d760 g     F .text	000000f0 alt_iic_isr_register
0000e0e0 g     F .text	00000024 OSTCBInitHook
00010bfa g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0000dc80 g     F .text	00000108 alt_tick
00010b9c g     O .rwdata	00000002 OSEventEn
00010bf6 g     O .rwdata	00000002 OSTmrCfgNameSize
0000c824 g     F .text	00000160 altera_avalon_uart_init
00000c44 g     F .text	00000018 __fp_lock_all
0000d714 g     F .text	0000004c alt_ic_irq_enabled
00007680 g     F .text	000000e0 OS_FlagInit
0000dbe4 g     F .text	0000009c alt_alarm_stop
00010bd8 g     O .rwdata	00000002 OSTaskIdleStkSize
00012880 g     O .bss	00000004 alt_irq_active
00009150 g     F .text	000000b0 OSSemAccept
00007dc0 g     F .text	000000d8 OSMemPut
000078f8 g     F .text	000001d4 OSMemCreate
00012848 g     O .bss	00000004 OSIdleCtrMax
000000fc g     F .exceptions	000000d4 alt_irq_handler
0000f860 g     O .rwdata	00000028 alt_dev_null
00010bec g     O .rwdata	00000002 OSTicksPerSec
00010b44 g     O .rwdata	00000004 LEDR
0000ddac g       .text	00000000 OSIntCtxSw
0000d394 g     F .text	00000048 alt_dcache_flush_all
0001284c g     O .bss	00000004 OSTCBFreeList
00010c14 g       *ABS*	00000000 __ram_rwdata_end
00009724 g     F .text	0000016c OSSemPendAbort
00010b78 g     O .rwdata	00000008 alt_dev_list
00003c38 g     F .text	000000f8 write
0000e620 g     F .text	000000a0 _putc_r
00010bf0 g     O .rwdata	00000002 OSVersionNbr
0000f028 g       *ABS*	00000000 __ram_rodata_end
000034f0 g     F .text	000000b0 fstat
00010b98 g     O .rwdata	00000004 OSEndiannessTest
00000710 g     F .text	00000058 .hidden __umodsi3
00010baa g     O .rwdata	00000002 OSFlagGrpSize
00017c9c g       *ABS*	00000000 end
0000d030 g     F .text	00000238 altera_avalon_uart_write
0000ba58 g     F .text	00000148 altera_avalon_jtag_uart_init
00005be8 g     F .text	000000cc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0000ebac g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0000c698 g     F .text	0000007c alt_avalon_timer_sc_init
0000c774 g     F .text	00000060 altera_avalon_uart_write_fd
0000c7d4 g     F .text	00000050 altera_avalon_uart_close_fd
0000c35c g     F .text	000002c4 altera_avalon_jtag_uart_write
00000c34 g     F .text	00000004 __sfp_lock_acquire
00001ac4 g     F .text	000000e4 memchr
000058c4 g     F .text	00000054 OS_MemClr
0000de7c g     F .text	0000015c OSTaskStkInit
00000290 g     F .text	00000094 task1
00002d40 g     F .text	00000310 _free_r
00004f34 g     F .text	00000198 OS_EventTaskRdy
0000e9f8 g     F .text	00000180 __call_exitprocs
00012850 g     O .bss	00000001 OSCPUUsage
00010b50 g     O .rwdata	00000004 HEX0
00010b68 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
00000324 g     F .text	00000148 task2
00012884 g     O .bss	00000004 _alt_tick_rate
00008670 g     F .text	0000028c OSQPend
0000b31c g     F .text	00000104 OSTimeDly
00012888 g     O .bss	00000004 _alt_nticks
000039ec g     F .text	000000fc read
0000b874 g     F .text	00000080 alt_sys_init
00010b4c g     O .rwdata	00000004 MSB
0000e8e0 g     F .text	00000118 __register_exitproc
00012851 g     O .bss	00000001 OSTaskCtr
0000b420 g     F .text	00000158 OSTimeDlyHMSM
0000bf48 g     F .text	00000068 altera_avalon_jtag_uart_close
0000f028 g       *ABS*	00000000 __ram_rwdata_start
0000ebac g       *ABS*	00000000 __ram_rodata_start
00012890 g     O .bss	00000028 __malloc_current_mallinfo
00010b9e g     O .rwdata	00000002 OSEventMax
00009890 g     F .text	00000110 OSSemPost
0000f028 g     O .rwdata	0000000a char_array
00004ad8 g     F .text	000000dc OSSchedUnlock
0000b8f4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000e29c g     F .text	000000dc alt_get_fd
00012854 g     O .bss	00000004 OSMemFreeList
00004c24 g     F .text	000000b0 OSStatInit
0000745c g     F .text	000000c4 OSFlagQuery
00010bd4 g     O .rwdata	00000002 OSTaskCreateExtEn
0000281c g     F .text	00000054 _close_r
0000e5a4 g     F .text	0000007c memcmp
00004f14 g     F .text	00000020 OS_Dummy
0000b9b4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00017c9c g       *ABS*	00000000 __alt_stack_base
0000ba04 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000026c8 g     F .text	00000154 __swsetup_r
00016118 g     O .bss	000001e0 OSQTbl
00010b5c g     O .rwdata	00000004 UART_ctl
00000af4 g     F .text	00000118 __sfp
0000f458 g     O .rwdata	00000408 __malloc_av_
00000c40 g     F .text	00000004 __sinit_lock_release
00012858 g     O .bss	00000004 OSTCBHighRdy
0000252c g     F .text	00000054 __sread
0001285c g     O .bss	00000004 OSQFreeList
0000e194 g     F .text	00000108 alt_find_file
0000d418 g     F .text	000000a4 alt_dev_llist_insert
00003e54 g     F .text	00000120 __malloc_lock
00003b4c g     F .text	000000b0 sbrk
00004160 g     F .text	00000140 OSEventNameSet
00002b90 g     F .text	0000005c _fflush_r
00012860 g     O .bss	00000001 OSRdyGrp
00012800 g       *ABS*	00000000 __bss_start
00001e4c g     F .text	00000128 memset
0000046c g     F .text	00000148 main
0001281c g     O .bss	00000004 alt_envp
00012800 g     O .bss	00000004 __malloc_max_total_mem
0000b954 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000e8c8 g     F .text	00000018 __swbuf
00010b48 g     O .rwdata	00000004 KEY1
0000eee4 g     O .rodata	00000100 OSUnMapTbl
00010bce g     O .rwdata	00000002 OSSemEn
000070c8 g     F .text	00000394 OSFlagPost
00002660 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00002960 g     F .text	00000014 fclose
000050cc g     F .text	00000110 OS_EventTaskWait
00013918 g     O .bss	00001060 task2_stk
00005cb4 g     F .text	000000cc OS_TaskStatStkChk
0000a774 g     F .text	00000150 OSTaskDelReq
000012b8 g     F .text	0000080c _malloc_r
00010b84 g     O .rwdata	00000004 alt_errno
00004bb4 g     F .text	00000070 OSStart
00003df4 g     F .text	00000060 __env_unlock
00001130 g     F .text	000000c4 _fwalk
0000ac10 g     F .text	000001d4 OSTaskResume
00007e98 g     F .text	000000e8 OSMemQuery
00010be0 g     O .rwdata	00000002 OSTaskStatEn
00010bba g     O .rwdata	00000002 OSMemMax
00008bd0 g     F .text	00000170 OSQPostFront
0000e6c0 g     F .text	000000c8 putc
000005b4 g     F .text	00000084 .hidden __divsi3
00012861 g     O .bss	00000003 OSRdyTbl
00010b94 g     O .rwdata	00000002 OSDebugEn
00002c1c g     F .text	00000124 _malloc_trim_r
0000ebac g       *ABS*	00000000 __CTOR_END__
00010bac g     O .rwdata	00000002 OSFlagNodeSize
00010bf4 g     O .rwdata	00000002 OSTmrCfgMax
0000818c g     F .text	000001ac OSQCreate
0000a8c4 g     F .text	00000198 OSTaskNameGet
0000ebac g       *ABS*	00000000 __flash_rodata_start
00008d40 g     F .text	0000020c OSQPostOpt
00004cd4 g     F .text	00000220 OSTimeTick
00010bdc g     O .rwdata	00000002 OSTaskMax
0000ebac g       *ABS*	00000000 __DTOR_LIST__
00009200 g     F .text	000000d8 OSSemCreate
00010c00 g     O .rwdata	00000002 OSTmrWheelSize
00010bd6 g     O .rwdata	00000002 OSTaskDelEn
000099a0 g     F .text	00000110 OSSemQuery
00008338 g     F .text	00000280 OSQDel
000088fc g     F .text	0000016c OSQPendAbort
0000b83c g     F .text	00000038 alt_irq_init
00003ae8 g     F .text	00000064 alt_release_fd
0000e4a4 g     F .text	00000014 atexit
00002668 g     F .text	00000060 _write_r
00004a4c g     F .text	0000008c OSSchedLock
000064ec g     F .text	00000108 OSFlagCreate
00010b64 g     O .rwdata	00000004 _impure_ptr
00012814 g     O .bss	00000004 alt_argc
00002974 g     F .text	0000021c __sflush_r
0000d51c g     F .text	00000060 _do_dtors
00010ba6 g     O .rwdata	00000002 OSEventMultiEn
000065f4 g     F .text	00000248 OSFlagDel
00012864 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00006ab0 g     F .text	000005b8 OSFlagPend
00010bf2 g     O .rwdata	00000002 OSTmrEn
00000c5c g     F .text	00000018 __fp_unlock_all
00010b70 g     O .rwdata	00000008 alt_fs_list
00005ac4 g     F .text	00000074 OS_StrCopy
00010bbc g     O .rwdata	00000002 OSMemNameSize
0000e0a0 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
00010be8 g     O .rwdata	00000002 OSTCBPrioTblMax
00010be4 g     O .rwdata	00000002 OSTaskStatStkChkEn
00000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
0000d5b0 g     F .text	00000050 alt_ic_isr_register
00010bb8 g     O .rwdata	00000002 OSMemEn
00010bc2 g     O .rwdata	00000002 OSMutexEn
00010c14 g       *ABS*	00000000 _edata
0000c714 g     F .text	00000060 altera_avalon_uart_read_fd
00017c9c g       *ABS*	00000000 _end
00012868 g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000bfb0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000e4f0 g     F .text	0000009c _fputs_r
0000b578 g     F .text	000001d4 OSTimeDlyResume
00006964 g     F .text	0000014c OSFlagNameSet
0000ade4 g     F .text	000001c0 OSTaskStkChk
0000d688 g     F .text	0000008c alt_ic_irq_disable
00010bbe g     O .rwdata	00000002 OSMemSize
00002588 g     F .text	0000007c __swrite
00010b6c g     O .rwdata	00000004 __malloc_trim_threshold
0001286c g     O .bss	00000004 OSTCBCur
0000e4b8 g     F .text	00000038 exit
00010bc0 g     O .rwdata	00000002 OSMemTblSize
000011f4 g     F .text	000000c4 _fwalk_reent
00000638 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000c38 g     F .text	00000004 __sfp_lock_release
000048b0 g     F .text	00000058 OSInit
0000b188 g     F .text	00000124 OSTaskQuery
000090a8 g     F .text	000000a8 OS_QInit
00005b38 g     F .text	00000054 OS_StrLen
00007cac g     F .text	00000114 OSMemNameSet
00010bda g     O .rwdata	00000002 OSTaskProfileEn
00012870 g     O .bss	00000004 OSTime
0000ccfc g     F .text	00000054 altera_avalon_uart_close
000162f8 g     O .bss	00000800 OSTaskIdleStk
0000eb78 g     F .text	00000034 _exit
0000d268 g     F .text	0000012c alt_alarm_start
0000683c g     F .text	00000128 OSFlagNameGet
0000b74c g     F .text	0000005c OSTimeGet
000030b0 g     F .text	000001bc __smakebuf_r
0000083c g     F .text	00000098 strlen
0000e020 g     F .text	00000020 OSTaskSwHook
0000da90 g     F .text	00000154 open
00016af8 g     O .bss	00000b40 OSEventTbl
00003938 g     F .text	0000003c alt_putchar
00017638 g     O .bss	00000510 OSTCBTbl
00009ab0 g     F .text	00000100 OSSemSet
0000d57c g     F .text	00000034 alt_icache_flush_all
0000e58c g     F .text	00000018 fputs
00010c08 g     O .rwdata	00000004 alt_priority_mask
000092d8 g     F .text	00000240 OSSemDel
00012874 g     O .bss	00000004 OSFlagFreeList
0000d600 g     F .text	00000088 alt_ic_irq_enable
00010ba0 g     O .rwdata	00000002 OSEventNameSize
00012878 g     O .bss	00000001 OSStatRdy
00017b48 g     O .bss	00000054 OSTCBPrioTbl
0000cd8c g     F .text	00000268 altera_avalon_uart_read
00003d30 g     F .text	000000c4 __env_lock
00010be6 g     O .rwdata	00000002 OSTaskSwHookEn
00010c0c g     O .rwdata	00000008 alt_alarm_list
00010bae g     O .rwdata	00000002 OSFlagWidth
0000d4bc g     F .text	00000060 _do_ctors
000033b8 g     F .text	000000d0 close
00012824 g     O .bss	00000004 alt_envsem
0001287c g     O .bss	00000004 OSIdleCtrRun
00004ef4 g     F .text	00000020 OSVersion
00010bf8 g     O .rwdata	00000002 OSTmrCfgWheelSize
000036e8 g     F .text	00000084 alt_load
0000b2ac g     F .text	00000070 OS_TaskStkClr
00010bd2 g     O .rwdata	00000002 OSTaskCreateEn
000054e4 g     F .text	00000068 OS_EventWaitListInit
0000e0c0 g     F .text	00000020 OSTaskIdleHook
00000c3c g     F .text	00000004 __sinit_lock_acquire
0000afa4 g     F .text	000001e4 OSTaskSuspend
00005b8c g     F .text	0000005c OS_TaskIdle
00010bfe g     O .rwdata	00000002 OSTmrTblSize
00008f4c g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_onchip_memory2_0+0xfbffc004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00049080 	call	4908 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	109ee704 	addi	r2,r2,31644
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	109ee704 	addi	r2,r2,31644
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_mem_onchip_memory2_0+0xfbffc12c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_mem_onchip_memory2_0+0xfbffc120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	00049540 	call	4954 <OSIntExit>
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a75217 	ldw	r2,-25272(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a75217 	ldw	r2,-25272(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <__alt_mem_onchip_memory2_0+0xfbffc248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     260:	d6a2d114 	ori	gp,gp,35652
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     268:	108a0014 	ori	r2,r2,10240

    movhi r3, %hi(__bss_end)
     26c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     270:	18df2714 	ori	r3,r3,31900

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <__alt_mem_onchip_memory2_0+0xfbffc278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	00036e80 	call	36e8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	000387c0 	call	387c <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <__alt_mem_onchip_memory2_0+0xfbffc28c>

00000290 <task1>:

char char_array[10] = {'0','1','2','3','4','5','6','7','8','9'};

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
     290:	defffc04 	addi	sp,sp,-16
     294:	dfc00315 	stw	ra,12(sp)
     298:	df000215 	stw	fp,8(sp)
     29c:	dc000115 	stw	r16,4(sp)
     2a0:	df000204 	addi	fp,sp,8
     2a4:	e13ffe15 	stw	r4,-8(fp)
  while (1)
  { 
    printf("Hello from task1\n");
     2a8:	01000074 	movhi	r4,1
     2ac:	213aeb04 	addi	r4,r4,-5204
     2b0:	00008280 	call	828 <puts>
    * LEDR =  (* LEDR) % 10 ;
     2b4:	d4200017 	ldw	r16,-32768(gp)
     2b8:	d0a00017 	ldw	r2,-32768(gp)
     2bc:	10800017 	ldw	r2,0(r2)
     2c0:	01400284 	movi	r5,10
     2c4:	1009883a 	mov	r4,r2
     2c8:	00006380 	call	638 <__modsi3>
     2cc:	80800015 	stw	r2,0(r16)

    * UART_TX = char_array[* LEDR];
     2d0:	d0e00517 	ldw	r3,-32748(gp)
     2d4:	d0a00017 	ldw	r2,-32768(gp)
     2d8:	11000017 	ldw	r4,0(r2)
     2dc:	00800074 	movhi	r2,1
     2e0:	10bc0a04 	addi	r2,r2,-4056
     2e4:	1105883a 	add	r2,r2,r4
     2e8:	10800003 	ldbu	r2,0(r2)
     2ec:	10803fcc 	andi	r2,r2,255
     2f0:	1080201c 	xori	r2,r2,128
     2f4:	10bfe004 	addi	r2,r2,-128
     2f8:	18800015 	stw	r2,0(r3)
//    alt_putchar(UART_TX);

    OSTimeDlyHMSM(0, 0, 1, 0);
     2fc:	000f883a 	mov	r7,zero
     300:	01800044 	movi	r6,1
     304:	000b883a 	mov	r5,zero
     308:	0009883a 	mov	r4,zero
     30c:	000b4200 	call	b420 <OSTimeDlyHMSM>

    ++* LEDR;
     310:	d0a00017 	ldw	r2,-32768(gp)
     314:	10c00017 	ldw	r3,0(r2)
     318:	18c00044 	addi	r3,r3,1
     31c:	10c00015 	stw	r3,0(r2)
  }
     320:	003fe106 	br	2a8 <__alt_mem_onchip_memory2_0+0xfbffc2a8>

00000324 <task2>:
}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
     324:	defffc04 	addi	sp,sp,-16
     328:	dfc00315 	stw	ra,12(sp)
     32c:	df000215 	stw	fp,8(sp)
     330:	df000204 	addi	fp,sp,8
     334:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task2\n");
     338:	01000074 	movhi	r4,1
     33c:	213af004 	addi	r4,r4,-5184
     340:	00008280 	call	828 <puts>

    char rec = (*UART) & 0xFF;
     344:	d0a00417 	ldw	r2,-32752(gp)
     348:	10800017 	ldw	r2,0(r2)
     34c:	e0bffe05 	stb	r2,-8(fp)
    alt_putchar(rec);
     350:	e0bffe07 	ldb	r2,-8(fp)
     354:	1009883a 	mov	r4,r2
     358:	00039380 	call	3938 <alt_putchar>
    alt_putstr("\n");
     35c:	01000074 	movhi	r4,1
     360:	213af504 	addi	r4,r4,-5164
     364:	00039740 	call	3974 <alt_putstr>

    switch (rec)
     368:	e0bffe07 	ldb	r2,-8(fp)
     36c:	10bff404 	addi	r2,r2,-48
     370:	10c002a8 	cmpgeui	r3,r2,10
     374:	1800371e 	bne	r3,zero,454 <task2+0x130>
     378:	100690ba 	slli	r3,r2,2
     37c:	00800034 	movhi	r2,0
     380:	1080e404 	addi	r2,r2,912
     384:	1885883a 	add	r2,r3,r2
     388:	10800017 	ldw	r2,0(r2)
     38c:	1000683a 	jmp	r2
     390:	000003b8 	rdprs	zero,zero,14
     394:	000003c8 	cmpgei	zero,zero,15
     398:	000003d8 	cmpnei	zero,zero,15
     39c:	000003e8 	cmpgeui	zero,zero,15
     3a0:	000003f8 	rdprs	zero,zero,15
     3a4:	00000408 	cmpgei	zero,zero,16
     3a8:	00000418 	cmpnei	zero,zero,16
     3ac:	00000428 	cmpgeui	zero,zero,16
     3b0:	00000438 	rdprs	zero,zero,16
     3b4:	00000444 	movi	zero,17
    {
    	case '0':
    		* HEX0 = 0x40;
     3b8:	d0a00317 	ldw	r2,-32756(gp)
     3bc:	00c01004 	movi	r3,64
     3c0:	10c00015 	stw	r3,0(r2)
    		break;
     3c4:	00002306 	br	454 <task2+0x130>
    	case '1':
    		* HEX0 = 0x79;
     3c8:	d0a00317 	ldw	r2,-32756(gp)
     3cc:	00c01e44 	movi	r3,121
     3d0:	10c00015 	stw	r3,0(r2)
    		break;
     3d4:	00001f06 	br	454 <task2+0x130>
    	case '2':
    		* HEX0 = 0x24;
     3d8:	d0a00317 	ldw	r2,-32756(gp)
     3dc:	00c00904 	movi	r3,36
     3e0:	10c00015 	stw	r3,0(r2)
    		break;
     3e4:	00001b06 	br	454 <task2+0x130>
    	case '3':
    		* HEX0 = 0x30;
     3e8:	d0a00317 	ldw	r2,-32756(gp)
     3ec:	00c00c04 	movi	r3,48
     3f0:	10c00015 	stw	r3,0(r2)
    		break;
     3f4:	00001706 	br	454 <task2+0x130>
    	case '4':
    		* HEX0 = 0x19;
     3f8:	d0a00317 	ldw	r2,-32756(gp)
     3fc:	00c00644 	movi	r3,25
     400:	10c00015 	stw	r3,0(r2)
    		break;
     404:	00001306 	br	454 <task2+0x130>
    	case '5':
    		* HEX0 = 0x12;
     408:	d0a00317 	ldw	r2,-32756(gp)
     40c:	00c00484 	movi	r3,18
     410:	10c00015 	stw	r3,0(r2)
    		break;
     414:	00000f06 	br	454 <task2+0x130>
    	case '6':
    		* HEX0 = 0x02;
     418:	d0a00317 	ldw	r2,-32756(gp)
     41c:	00c00084 	movi	r3,2
     420:	10c00015 	stw	r3,0(r2)
    		break;
     424:	00000b06 	br	454 <task2+0x130>
    	case '7':
    		* HEX0 = 0x78;
     428:	d0a00317 	ldw	r2,-32756(gp)
     42c:	00c01e04 	movi	r3,120
     430:	10c00015 	stw	r3,0(r2)
    		break;
     434:	00000706 	br	454 <task2+0x130>
    	case '8':
    		* HEX0 = 0x00;
     438:	d0a00317 	ldw	r2,-32756(gp)
     43c:	10000015 	stw	zero,0(r2)
    		break;
     440:	00000406 	br	454 <task2+0x130>
    	case '9':
    		* HEX0 = 0x10;
     444:	d0a00317 	ldw	r2,-32756(gp)
     448:	00c00404 	movi	r3,16
     44c:	10c00015 	stw	r3,0(r2)
    		break;
     450:	0001883a 	nop
    }

    OSTimeDlyHMSM(0, 0, 1, 0);
     454:	000f883a 	mov	r7,zero
     458:	01800044 	movi	r6,1
     45c:	000b883a 	mov	r5,zero
     460:	0009883a 	mov	r4,zero
     464:	000b4200 	call	b420 <OSTimeDlyHMSM>
  }
     468:	003fb306 	br	338 <__alt_mem_onchip_memory2_0+0xfbffc338>

0000046c <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
     46c:	defff904 	addi	sp,sp,-28
     470:	dfc00615 	stw	ra,24(sp)
     474:	df000515 	stw	fp,20(sp)
     478:	df000504 	addi	fp,sp,20

  printf("MicroC/OS-II Licensing Terms\n");
     47c:	01000074 	movhi	r4,1
     480:	213af604 	addi	r4,r4,-5160
     484:	00008280 	call	828 <puts>
  printf("============================\n");
     488:	01000074 	movhi	r4,1
     48c:	213afe04 	addi	r4,r4,-5128
     490:	00008280 	call	828 <puts>
  printf("Micrium\'s uC/OS-II is a real-time operating system (RTOS) available in source code.\n");
     494:	01000074 	movhi	r4,1
     498:	213b0604 	addi	r4,r4,-5096
     49c:	00008280 	call	828 <puts>
  printf("This is not open-source software.\n");
     4a0:	01000074 	movhi	r4,1
     4a4:	213b1b04 	addi	r4,r4,-5012
     4a8:	00008280 	call	828 <puts>
  printf("This RTOS can be used free of charge only for non-commercial purposes and academic projects,\n");
     4ac:	01000074 	movhi	r4,1
     4b0:	213b2404 	addi	r4,r4,-4976
     4b4:	00008280 	call	828 <puts>
  printf("any other use of the code is subject to the terms of an end-user license agreement\n");
     4b8:	01000074 	movhi	r4,1
     4bc:	213b3c04 	addi	r4,r4,-4880
     4c0:	00008280 	call	828 <puts>
  printf("for more information please see the license files included in the BSP project or contact Micrium.\n");
     4c4:	01000074 	movhi	r4,1
     4c8:	213b5104 	addi	r4,r4,-4796
     4cc:	00008280 	call	828 <puts>
  printf("Anyone planning to use a Micrium RTOS in a commercial product must purchase a commercial license\n");
     4d0:	01000074 	movhi	r4,1
     4d4:	213b6a04 	addi	r4,r4,-4696
     4d8:	00008280 	call	828 <puts>
  printf("from the owner of the software, Silicon Laboratories Inc.\n");
     4dc:	01000074 	movhi	r4,1
     4e0:	213b8304 	addi	r4,r4,-4596
     4e4:	00008280 	call	828 <puts>
  printf("Licensing information is available at:\n");
     4e8:	01000074 	movhi	r4,1
     4ec:	213b9204 	addi	r4,r4,-4536
     4f0:	00008280 	call	828 <puts>
  printf("Phone: +1 954-217-2036\n");
     4f4:	01000074 	movhi	r4,1
     4f8:	213b9c04 	addi	r4,r4,-4496
     4fc:	00008280 	call	828 <puts>
  printf("Email: sales@micrium.com\n");
     500:	01000074 	movhi	r4,1
     504:	213ba204 	addi	r4,r4,-4472
     508:	00008280 	call	828 <puts>
  printf("URL: www.micrium.com\n\n\n");  
     50c:	01000074 	movhi	r4,1
     510:	213ba904 	addi	r4,r4,-4444
     514:	00008280 	call	828 <puts>

  OSTaskCreateExt(task1,
     518:	d8000415 	stw	zero,16(sp)
     51c:	d8000315 	stw	zero,12(sp)
     520:	00810604 	movi	r2,1048
     524:	d8800215 	stw	r2,8(sp)
     528:	00800074 	movhi	r2,1
     52c:	108a2e04 	addi	r2,r2,10424
     530:	d8800115 	stw	r2,4(sp)
     534:	00800044 	movi	r2,1
     538:	d8800015 	stw	r2,0(sp)
     53c:	01c00044 	movi	r7,1
     540:	01800074 	movhi	r6,1
     544:	318e4504 	addi	r6,r6,14612
     548:	000b883a 	mov	r5,zero
     54c:	01000034 	movhi	r4,0
     550:	2100a404 	addi	r4,r4,656
     554:	000a24c0 	call	a24c <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(task2,
     558:	d8000415 	stw	zero,16(sp)
     55c:	d8000315 	stw	zero,12(sp)
     560:	00810604 	movi	r2,1048
     564:	d8800215 	stw	r2,8(sp)
     568:	00800074 	movhi	r2,1
     56c:	108e4604 	addi	r2,r2,14616
     570:	d8800115 	stw	r2,4(sp)
     574:	00800084 	movi	r2,2
     578:	d8800015 	stw	r2,0(sp)
     57c:	01c00084 	movi	r7,2
     580:	01800074 	movhi	r6,1
     584:	31925d04 	addi	r6,r6,18804
     588:	000b883a 	mov	r5,zero
     58c:	01000034 	movhi	r4,0
     590:	2100c904 	addi	r4,r4,804
     594:	000a24c0 	call	a24c <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
     598:	0004bb40 	call	4bb4 <OSStart>
  return 0;
     59c:	0005883a 	mov	r2,zero
}
     5a0:	e037883a 	mov	sp,fp
     5a4:	dfc00117 	ldw	ra,4(sp)
     5a8:	df000017 	ldw	fp,0(sp)
     5ac:	dec00204 	addi	sp,sp,8
     5b0:	f800283a 	ret

000005b4 <__divsi3>:
     5b4:	20001b16 	blt	r4,zero,624 <__divsi3+0x70>
     5b8:	000f883a 	mov	r7,zero
     5bc:	28001616 	blt	r5,zero,618 <__divsi3+0x64>
     5c0:	200d883a 	mov	r6,r4
     5c4:	29001a2e 	bgeu	r5,r4,630 <__divsi3+0x7c>
     5c8:	00800804 	movi	r2,32
     5cc:	00c00044 	movi	r3,1
     5d0:	00000106 	br	5d8 <__divsi3+0x24>
     5d4:	10000d26 	beq	r2,zero,60c <__divsi3+0x58>
     5d8:	294b883a 	add	r5,r5,r5
     5dc:	10bfffc4 	addi	r2,r2,-1
     5e0:	18c7883a 	add	r3,r3,r3
     5e4:	293ffb36 	bltu	r5,r4,5d4 <__alt_mem_onchip_memory2_0+0xfbffc5d4>
     5e8:	0005883a 	mov	r2,zero
     5ec:	18000726 	beq	r3,zero,60c <__divsi3+0x58>
     5f0:	0005883a 	mov	r2,zero
     5f4:	31400236 	bltu	r6,r5,600 <__divsi3+0x4c>
     5f8:	314dc83a 	sub	r6,r6,r5
     5fc:	10c4b03a 	or	r2,r2,r3
     600:	1806d07a 	srli	r3,r3,1
     604:	280ad07a 	srli	r5,r5,1
     608:	183ffa1e 	bne	r3,zero,5f4 <__alt_mem_onchip_memory2_0+0xfbffc5f4>
     60c:	38000126 	beq	r7,zero,614 <__divsi3+0x60>
     610:	0085c83a 	sub	r2,zero,r2
     614:	f800283a 	ret
     618:	014bc83a 	sub	r5,zero,r5
     61c:	39c0005c 	xori	r7,r7,1
     620:	003fe706 	br	5c0 <__alt_mem_onchip_memory2_0+0xfbffc5c0>
     624:	0109c83a 	sub	r4,zero,r4
     628:	01c00044 	movi	r7,1
     62c:	003fe306 	br	5bc <__alt_mem_onchip_memory2_0+0xfbffc5bc>
     630:	00c00044 	movi	r3,1
     634:	003fee06 	br	5f0 <__alt_mem_onchip_memory2_0+0xfbffc5f0>

00000638 <__modsi3>:
     638:	20001716 	blt	r4,zero,698 <__modsi3+0x60>
     63c:	000f883a 	mov	r7,zero
     640:	2005883a 	mov	r2,r4
     644:	28001216 	blt	r5,zero,690 <__modsi3+0x58>
     648:	2900162e 	bgeu	r5,r4,6a4 <__modsi3+0x6c>
     64c:	01800804 	movi	r6,32
     650:	00c00044 	movi	r3,1
     654:	00000106 	br	65c <__modsi3+0x24>
     658:	30000a26 	beq	r6,zero,684 <__modsi3+0x4c>
     65c:	294b883a 	add	r5,r5,r5
     660:	31bfffc4 	addi	r6,r6,-1
     664:	18c7883a 	add	r3,r3,r3
     668:	293ffb36 	bltu	r5,r4,658 <__alt_mem_onchip_memory2_0+0xfbffc658>
     66c:	18000526 	beq	r3,zero,684 <__modsi3+0x4c>
     670:	1806d07a 	srli	r3,r3,1
     674:	11400136 	bltu	r2,r5,67c <__modsi3+0x44>
     678:	1145c83a 	sub	r2,r2,r5
     67c:	280ad07a 	srli	r5,r5,1
     680:	183ffb1e 	bne	r3,zero,670 <__alt_mem_onchip_memory2_0+0xfbffc670>
     684:	38000126 	beq	r7,zero,68c <__modsi3+0x54>
     688:	0085c83a 	sub	r2,zero,r2
     68c:	f800283a 	ret
     690:	014bc83a 	sub	r5,zero,r5
     694:	003fec06 	br	648 <__alt_mem_onchip_memory2_0+0xfbffc648>
     698:	0109c83a 	sub	r4,zero,r4
     69c:	01c00044 	movi	r7,1
     6a0:	003fe706 	br	640 <__alt_mem_onchip_memory2_0+0xfbffc640>
     6a4:	00c00044 	movi	r3,1
     6a8:	003ff106 	br	670 <__alt_mem_onchip_memory2_0+0xfbffc670>

000006ac <__udivsi3>:
     6ac:	200d883a 	mov	r6,r4
     6b0:	2900152e 	bgeu	r5,r4,708 <__udivsi3+0x5c>
     6b4:	28001416 	blt	r5,zero,708 <__udivsi3+0x5c>
     6b8:	00800804 	movi	r2,32
     6bc:	00c00044 	movi	r3,1
     6c0:	00000206 	br	6cc <__udivsi3+0x20>
     6c4:	10000e26 	beq	r2,zero,700 <__udivsi3+0x54>
     6c8:	28000516 	blt	r5,zero,6e0 <__udivsi3+0x34>
     6cc:	294b883a 	add	r5,r5,r5
     6d0:	10bfffc4 	addi	r2,r2,-1
     6d4:	18c7883a 	add	r3,r3,r3
     6d8:	293ffa36 	bltu	r5,r4,6c4 <__alt_mem_onchip_memory2_0+0xfbffc6c4>
     6dc:	18000826 	beq	r3,zero,700 <__udivsi3+0x54>
     6e0:	0005883a 	mov	r2,zero
     6e4:	31400236 	bltu	r6,r5,6f0 <__udivsi3+0x44>
     6e8:	314dc83a 	sub	r6,r6,r5
     6ec:	10c4b03a 	or	r2,r2,r3
     6f0:	1806d07a 	srli	r3,r3,1
     6f4:	280ad07a 	srli	r5,r5,1
     6f8:	183ffa1e 	bne	r3,zero,6e4 <__alt_mem_onchip_memory2_0+0xfbffc6e4>
     6fc:	f800283a 	ret
     700:	0005883a 	mov	r2,zero
     704:	f800283a 	ret
     708:	00c00044 	movi	r3,1
     70c:	003ff406 	br	6e0 <__alt_mem_onchip_memory2_0+0xfbffc6e0>

00000710 <__umodsi3>:
     710:	2005883a 	mov	r2,r4
     714:	2900122e 	bgeu	r5,r4,760 <__umodsi3+0x50>
     718:	28001116 	blt	r5,zero,760 <__umodsi3+0x50>
     71c:	01800804 	movi	r6,32
     720:	00c00044 	movi	r3,1
     724:	00000206 	br	730 <__umodsi3+0x20>
     728:	30000c26 	beq	r6,zero,75c <__umodsi3+0x4c>
     72c:	28000516 	blt	r5,zero,744 <__umodsi3+0x34>
     730:	294b883a 	add	r5,r5,r5
     734:	31bfffc4 	addi	r6,r6,-1
     738:	18c7883a 	add	r3,r3,r3
     73c:	293ffa36 	bltu	r5,r4,728 <__alt_mem_onchip_memory2_0+0xfbffc728>
     740:	18000626 	beq	r3,zero,75c <__umodsi3+0x4c>
     744:	1806d07a 	srli	r3,r3,1
     748:	11400136 	bltu	r2,r5,750 <__umodsi3+0x40>
     74c:	1145c83a 	sub	r2,r2,r5
     750:	280ad07a 	srli	r5,r5,1
     754:	183ffb1e 	bne	r3,zero,744 <__alt_mem_onchip_memory2_0+0xfbffc744>
     758:	f800283a 	ret
     75c:	f800283a 	ret
     760:	00c00044 	movi	r3,1
     764:	003ff706 	br	744 <__alt_mem_onchip_memory2_0+0xfbffc744>

00000768 <_puts_r>:
     768:	defff604 	addi	sp,sp,-40
     76c:	dc000715 	stw	r16,28(sp)
     770:	2021883a 	mov	r16,r4
     774:	2809883a 	mov	r4,r5
     778:	dc400815 	stw	r17,32(sp)
     77c:	dfc00915 	stw	ra,36(sp)
     780:	2823883a 	mov	r17,r5
     784:	000083c0 	call	83c <strlen>
     788:	10c00044 	addi	r3,r2,1
     78c:	d8800115 	stw	r2,4(sp)
     790:	00800074 	movhi	r2,1
     794:	10bbaf04 	addi	r2,r2,-4420
     798:	d8800215 	stw	r2,8(sp)
     79c:	00800044 	movi	r2,1
     7a0:	d8800315 	stw	r2,12(sp)
     7a4:	00800084 	movi	r2,2
     7a8:	dc400015 	stw	r17,0(sp)
     7ac:	d8c00615 	stw	r3,24(sp)
     7b0:	dec00415 	stw	sp,16(sp)
     7b4:	d8800515 	stw	r2,20(sp)
     7b8:	80000226 	beq	r16,zero,7c4 <_puts_r+0x5c>
     7bc:	80800e17 	ldw	r2,56(r16)
     7c0:	10001426 	beq	r2,zero,814 <_puts_r+0xac>
     7c4:	81400217 	ldw	r5,8(r16)
     7c8:	2880030b 	ldhu	r2,12(r5)
     7cc:	10c8000c 	andi	r3,r2,8192
     7d0:	1800061e 	bne	r3,zero,7ec <_puts_r+0x84>
     7d4:	29001917 	ldw	r4,100(r5)
     7d8:	00f7ffc4 	movi	r3,-8193
     7dc:	10880014 	ori	r2,r2,8192
     7e0:	20c6703a 	and	r3,r4,r3
     7e4:	2880030d 	sth	r2,12(r5)
     7e8:	28c01915 	stw	r3,100(r5)
     7ec:	d9800404 	addi	r6,sp,16
     7f0:	8009883a 	mov	r4,r16
     7f4:	0000c740 	call	c74 <__sfvwrite_r>
     7f8:	1000091e 	bne	r2,zero,820 <_puts_r+0xb8>
     7fc:	00800284 	movi	r2,10
     800:	dfc00917 	ldw	ra,36(sp)
     804:	dc400817 	ldw	r17,32(sp)
     808:	dc000717 	ldw	r16,28(sp)
     80c:	dec00a04 	addi	sp,sp,40
     810:	f800283a 	ret
     814:	8009883a 	mov	r4,r16
     818:	0000c240 	call	c24 <__sinit>
     81c:	003fe906 	br	7c4 <__alt_mem_onchip_memory2_0+0xfbffc7c4>
     820:	00bfffc4 	movi	r2,-1
     824:	003ff606 	br	800 <__alt_mem_onchip_memory2_0+0xfbffc800>

00000828 <puts>:
     828:	00800074 	movhi	r2,1
     82c:	1082d904 	addi	r2,r2,2916
     830:	200b883a 	mov	r5,r4
     834:	11000017 	ldw	r4,0(r2)
     838:	00007681 	jmpi	768 <_puts_r>

0000083c <strlen>:
     83c:	208000cc 	andi	r2,r4,3
     840:	10002026 	beq	r2,zero,8c4 <strlen+0x88>
     844:	20800007 	ldb	r2,0(r4)
     848:	10002026 	beq	r2,zero,8cc <strlen+0x90>
     84c:	2005883a 	mov	r2,r4
     850:	00000206 	br	85c <strlen+0x20>
     854:	10c00007 	ldb	r3,0(r2)
     858:	18001826 	beq	r3,zero,8bc <strlen+0x80>
     85c:	10800044 	addi	r2,r2,1
     860:	10c000cc 	andi	r3,r2,3
     864:	183ffb1e 	bne	r3,zero,854 <__alt_mem_onchip_memory2_0+0xfbffc854>
     868:	10c00017 	ldw	r3,0(r2)
     86c:	01ffbff4 	movhi	r7,65279
     870:	39ffbfc4 	addi	r7,r7,-257
     874:	00ca303a 	nor	r5,zero,r3
     878:	01a02074 	movhi	r6,32897
     87c:	19c7883a 	add	r3,r3,r7
     880:	31a02004 	addi	r6,r6,-32640
     884:	1946703a 	and	r3,r3,r5
     888:	1986703a 	and	r3,r3,r6
     88c:	1800091e 	bne	r3,zero,8b4 <strlen+0x78>
     890:	10800104 	addi	r2,r2,4
     894:	10c00017 	ldw	r3,0(r2)
     898:	19cb883a 	add	r5,r3,r7
     89c:	00c6303a 	nor	r3,zero,r3
     8a0:	28c6703a 	and	r3,r5,r3
     8a4:	1986703a 	and	r3,r3,r6
     8a8:	183ff926 	beq	r3,zero,890 <__alt_mem_onchip_memory2_0+0xfbffc890>
     8ac:	00000106 	br	8b4 <strlen+0x78>
     8b0:	10800044 	addi	r2,r2,1
     8b4:	10c00007 	ldb	r3,0(r2)
     8b8:	183ffd1e 	bne	r3,zero,8b0 <__alt_mem_onchip_memory2_0+0xfbffc8b0>
     8bc:	1105c83a 	sub	r2,r2,r4
     8c0:	f800283a 	ret
     8c4:	2005883a 	mov	r2,r4
     8c8:	003fe706 	br	868 <__alt_mem_onchip_memory2_0+0xfbffc868>
     8cc:	0005883a 	mov	r2,zero
     8d0:	f800283a 	ret

000008d4 <__fp_unlock>:
     8d4:	0005883a 	mov	r2,zero
     8d8:	f800283a 	ret

000008dc <_cleanup_r>:
     8dc:	01400034 	movhi	r5,0
     8e0:	294a1c04 	addi	r5,r5,10352
     8e4:	00011f41 	jmpi	11f4 <_fwalk_reent>

000008e8 <__sinit.part.1>:
     8e8:	defff704 	addi	sp,sp,-36
     8ec:	00c00034 	movhi	r3,0
     8f0:	dfc00815 	stw	ra,32(sp)
     8f4:	ddc00715 	stw	r23,28(sp)
     8f8:	dd800615 	stw	r22,24(sp)
     8fc:	dd400515 	stw	r21,20(sp)
     900:	dd000415 	stw	r20,16(sp)
     904:	dcc00315 	stw	r19,12(sp)
     908:	dc800215 	stw	r18,8(sp)
     90c:	dc400115 	stw	r17,4(sp)
     910:	dc000015 	stw	r16,0(sp)
     914:	18c23704 	addi	r3,r3,2268
     918:	24000117 	ldw	r16,4(r4)
     91c:	20c00f15 	stw	r3,60(r4)
     920:	2080bb04 	addi	r2,r4,748
     924:	00c000c4 	movi	r3,3
     928:	20c0b915 	stw	r3,740(r4)
     92c:	2080ba15 	stw	r2,744(r4)
     930:	2000b815 	stw	zero,736(r4)
     934:	05c00204 	movi	r23,8
     938:	00800104 	movi	r2,4
     93c:	2025883a 	mov	r18,r4
     940:	b80d883a 	mov	r6,r23
     944:	81001704 	addi	r4,r16,92
     948:	000b883a 	mov	r5,zero
     94c:	80000015 	stw	zero,0(r16)
     950:	80000115 	stw	zero,4(r16)
     954:	80000215 	stw	zero,8(r16)
     958:	8080030d 	sth	r2,12(r16)
     95c:	80001915 	stw	zero,100(r16)
     960:	8000038d 	sth	zero,14(r16)
     964:	80000415 	stw	zero,16(r16)
     968:	80000515 	stw	zero,20(r16)
     96c:	80000615 	stw	zero,24(r16)
     970:	0001e4c0 	call	1e4c <memset>
     974:	05800034 	movhi	r22,0
     978:	94400217 	ldw	r17,8(r18)
     97c:	05400034 	movhi	r21,0
     980:	05000034 	movhi	r20,0
     984:	04c00034 	movhi	r19,0
     988:	b5894b04 	addi	r22,r22,9516
     98c:	ad496204 	addi	r21,r21,9608
     990:	a5098104 	addi	r20,r20,9732
     994:	9cc99804 	addi	r19,r19,9824
     998:	85800815 	stw	r22,32(r16)
     99c:	85400915 	stw	r21,36(r16)
     9a0:	85000a15 	stw	r20,40(r16)
     9a4:	84c00b15 	stw	r19,44(r16)
     9a8:	84000715 	stw	r16,28(r16)
     9ac:	00800284 	movi	r2,10
     9b0:	8880030d 	sth	r2,12(r17)
     9b4:	00800044 	movi	r2,1
     9b8:	b80d883a 	mov	r6,r23
     9bc:	89001704 	addi	r4,r17,92
     9c0:	000b883a 	mov	r5,zero
     9c4:	88000015 	stw	zero,0(r17)
     9c8:	88000115 	stw	zero,4(r17)
     9cc:	88000215 	stw	zero,8(r17)
     9d0:	88001915 	stw	zero,100(r17)
     9d4:	8880038d 	sth	r2,14(r17)
     9d8:	88000415 	stw	zero,16(r17)
     9dc:	88000515 	stw	zero,20(r17)
     9e0:	88000615 	stw	zero,24(r17)
     9e4:	0001e4c0 	call	1e4c <memset>
     9e8:	94000317 	ldw	r16,12(r18)
     9ec:	00800484 	movi	r2,18
     9f0:	8c400715 	stw	r17,28(r17)
     9f4:	8d800815 	stw	r22,32(r17)
     9f8:	8d400915 	stw	r21,36(r17)
     9fc:	8d000a15 	stw	r20,40(r17)
     a00:	8cc00b15 	stw	r19,44(r17)
     a04:	8080030d 	sth	r2,12(r16)
     a08:	00800084 	movi	r2,2
     a0c:	80000015 	stw	zero,0(r16)
     a10:	80000115 	stw	zero,4(r16)
     a14:	80000215 	stw	zero,8(r16)
     a18:	80001915 	stw	zero,100(r16)
     a1c:	8080038d 	sth	r2,14(r16)
     a20:	80000415 	stw	zero,16(r16)
     a24:	80000515 	stw	zero,20(r16)
     a28:	80000615 	stw	zero,24(r16)
     a2c:	b80d883a 	mov	r6,r23
     a30:	000b883a 	mov	r5,zero
     a34:	81001704 	addi	r4,r16,92
     a38:	0001e4c0 	call	1e4c <memset>
     a3c:	00800044 	movi	r2,1
     a40:	84000715 	stw	r16,28(r16)
     a44:	85800815 	stw	r22,32(r16)
     a48:	85400915 	stw	r21,36(r16)
     a4c:	85000a15 	stw	r20,40(r16)
     a50:	84c00b15 	stw	r19,44(r16)
     a54:	90800e15 	stw	r2,56(r18)
     a58:	dfc00817 	ldw	ra,32(sp)
     a5c:	ddc00717 	ldw	r23,28(sp)
     a60:	dd800617 	ldw	r22,24(sp)
     a64:	dd400517 	ldw	r21,20(sp)
     a68:	dd000417 	ldw	r20,16(sp)
     a6c:	dcc00317 	ldw	r19,12(sp)
     a70:	dc800217 	ldw	r18,8(sp)
     a74:	dc400117 	ldw	r17,4(sp)
     a78:	dc000017 	ldw	r16,0(sp)
     a7c:	dec00904 	addi	sp,sp,36
     a80:	f800283a 	ret

00000a84 <__fp_lock>:
     a84:	0005883a 	mov	r2,zero
     a88:	f800283a 	ret

00000a8c <__sfmoreglue>:
     a8c:	defffc04 	addi	sp,sp,-16
     a90:	dc400115 	stw	r17,4(sp)
     a94:	2c7fffc4 	addi	r17,r5,-1
     a98:	8c401a24 	muli	r17,r17,104
     a9c:	dc800215 	stw	r18,8(sp)
     aa0:	2825883a 	mov	r18,r5
     aa4:	89401d04 	addi	r5,r17,116
     aa8:	dc000015 	stw	r16,0(sp)
     aac:	dfc00315 	stw	ra,12(sp)
     ab0:	00012b80 	call	12b8 <_malloc_r>
     ab4:	1021883a 	mov	r16,r2
     ab8:	10000726 	beq	r2,zero,ad8 <__sfmoreglue+0x4c>
     abc:	11000304 	addi	r4,r2,12
     ac0:	10000015 	stw	zero,0(r2)
     ac4:	14800115 	stw	r18,4(r2)
     ac8:	11000215 	stw	r4,8(r2)
     acc:	89801a04 	addi	r6,r17,104
     ad0:	000b883a 	mov	r5,zero
     ad4:	0001e4c0 	call	1e4c <memset>
     ad8:	8005883a 	mov	r2,r16
     adc:	dfc00317 	ldw	ra,12(sp)
     ae0:	dc800217 	ldw	r18,8(sp)
     ae4:	dc400117 	ldw	r17,4(sp)
     ae8:	dc000017 	ldw	r16,0(sp)
     aec:	dec00404 	addi	sp,sp,16
     af0:	f800283a 	ret

00000af4 <__sfp>:
     af4:	defffb04 	addi	sp,sp,-20
     af8:	dc000015 	stw	r16,0(sp)
     afc:	04000074 	movhi	r16,1
     b00:	8402d804 	addi	r16,r16,2912
     b04:	dcc00315 	stw	r19,12(sp)
     b08:	2027883a 	mov	r19,r4
     b0c:	81000017 	ldw	r4,0(r16)
     b10:	dfc00415 	stw	ra,16(sp)
     b14:	dc800215 	stw	r18,8(sp)
     b18:	20800e17 	ldw	r2,56(r4)
     b1c:	dc400115 	stw	r17,4(sp)
     b20:	1000021e 	bne	r2,zero,b2c <__sfp+0x38>
     b24:	00008e80 	call	8e8 <__sinit.part.1>
     b28:	81000017 	ldw	r4,0(r16)
     b2c:	2480b804 	addi	r18,r4,736
     b30:	047fffc4 	movi	r17,-1
     b34:	91000117 	ldw	r4,4(r18)
     b38:	94000217 	ldw	r16,8(r18)
     b3c:	213fffc4 	addi	r4,r4,-1
     b40:	20000a16 	blt	r4,zero,b6c <__sfp+0x78>
     b44:	8080030f 	ldh	r2,12(r16)
     b48:	10000c26 	beq	r2,zero,b7c <__sfp+0x88>
     b4c:	80c01d04 	addi	r3,r16,116
     b50:	00000206 	br	b5c <__sfp+0x68>
     b54:	18bfe60f 	ldh	r2,-104(r3)
     b58:	10000826 	beq	r2,zero,b7c <__sfp+0x88>
     b5c:	213fffc4 	addi	r4,r4,-1
     b60:	1c3ffd04 	addi	r16,r3,-12
     b64:	18c01a04 	addi	r3,r3,104
     b68:	247ffa1e 	bne	r4,r17,b54 <__alt_mem_onchip_memory2_0+0xfbffcb54>
     b6c:	90800017 	ldw	r2,0(r18)
     b70:	10001d26 	beq	r2,zero,be8 <__sfp+0xf4>
     b74:	1025883a 	mov	r18,r2
     b78:	003fee06 	br	b34 <__alt_mem_onchip_memory2_0+0xfbffcb34>
     b7c:	00bfffc4 	movi	r2,-1
     b80:	8080038d 	sth	r2,14(r16)
     b84:	00800044 	movi	r2,1
     b88:	8080030d 	sth	r2,12(r16)
     b8c:	80001915 	stw	zero,100(r16)
     b90:	80000015 	stw	zero,0(r16)
     b94:	80000215 	stw	zero,8(r16)
     b98:	80000115 	stw	zero,4(r16)
     b9c:	80000415 	stw	zero,16(r16)
     ba0:	80000515 	stw	zero,20(r16)
     ba4:	80000615 	stw	zero,24(r16)
     ba8:	01800204 	movi	r6,8
     bac:	000b883a 	mov	r5,zero
     bb0:	81001704 	addi	r4,r16,92
     bb4:	0001e4c0 	call	1e4c <memset>
     bb8:	8005883a 	mov	r2,r16
     bbc:	80000c15 	stw	zero,48(r16)
     bc0:	80000d15 	stw	zero,52(r16)
     bc4:	80001115 	stw	zero,68(r16)
     bc8:	80001215 	stw	zero,72(r16)
     bcc:	dfc00417 	ldw	ra,16(sp)
     bd0:	dcc00317 	ldw	r19,12(sp)
     bd4:	dc800217 	ldw	r18,8(sp)
     bd8:	dc400117 	ldw	r17,4(sp)
     bdc:	dc000017 	ldw	r16,0(sp)
     be0:	dec00504 	addi	sp,sp,20
     be4:	f800283a 	ret
     be8:	01400104 	movi	r5,4
     bec:	9809883a 	mov	r4,r19
     bf0:	0000a8c0 	call	a8c <__sfmoreglue>
     bf4:	90800015 	stw	r2,0(r18)
     bf8:	103fde1e 	bne	r2,zero,b74 <__alt_mem_onchip_memory2_0+0xfbffcb74>
     bfc:	00800304 	movi	r2,12
     c00:	98800015 	stw	r2,0(r19)
     c04:	0005883a 	mov	r2,zero
     c08:	003ff006 	br	bcc <__alt_mem_onchip_memory2_0+0xfbffcbcc>

00000c0c <_cleanup>:
     c0c:	00800074 	movhi	r2,1
     c10:	1082d804 	addi	r2,r2,2912
     c14:	11000017 	ldw	r4,0(r2)
     c18:	01400034 	movhi	r5,0
     c1c:	294a1c04 	addi	r5,r5,10352
     c20:	00011f41 	jmpi	11f4 <_fwalk_reent>

00000c24 <__sinit>:
     c24:	20800e17 	ldw	r2,56(r4)
     c28:	10000126 	beq	r2,zero,c30 <__sinit+0xc>
     c2c:	f800283a 	ret
     c30:	00008e81 	jmpi	8e8 <__sinit.part.1>

00000c34 <__sfp_lock_acquire>:
     c34:	f800283a 	ret

00000c38 <__sfp_lock_release>:
     c38:	f800283a 	ret

00000c3c <__sinit_lock_acquire>:
     c3c:	f800283a 	ret

00000c40 <__sinit_lock_release>:
     c40:	f800283a 	ret

00000c44 <__fp_lock_all>:
     c44:	00800074 	movhi	r2,1
     c48:	1082d904 	addi	r2,r2,2916
     c4c:	11000017 	ldw	r4,0(r2)
     c50:	01400034 	movhi	r5,0
     c54:	2942a104 	addi	r5,r5,2692
     c58:	00011301 	jmpi	1130 <_fwalk>

00000c5c <__fp_unlock_all>:
     c5c:	00800074 	movhi	r2,1
     c60:	1082d904 	addi	r2,r2,2916
     c64:	11000017 	ldw	r4,0(r2)
     c68:	01400034 	movhi	r5,0
     c6c:	29423504 	addi	r5,r5,2260
     c70:	00011301 	jmpi	1130 <_fwalk>

00000c74 <__sfvwrite_r>:
     c74:	30800217 	ldw	r2,8(r6)
     c78:	10006726 	beq	r2,zero,e18 <__sfvwrite_r+0x1a4>
     c7c:	28c0030b 	ldhu	r3,12(r5)
     c80:	defff404 	addi	sp,sp,-48
     c84:	dd400715 	stw	r21,28(sp)
     c88:	dd000615 	stw	r20,24(sp)
     c8c:	dc000215 	stw	r16,8(sp)
     c90:	dfc00b15 	stw	ra,44(sp)
     c94:	df000a15 	stw	fp,40(sp)
     c98:	ddc00915 	stw	r23,36(sp)
     c9c:	dd800815 	stw	r22,32(sp)
     ca0:	dcc00515 	stw	r19,20(sp)
     ca4:	dc800415 	stw	r18,16(sp)
     ca8:	dc400315 	stw	r17,12(sp)
     cac:	1880020c 	andi	r2,r3,8
     cb0:	2821883a 	mov	r16,r5
     cb4:	202b883a 	mov	r21,r4
     cb8:	3029883a 	mov	r20,r6
     cbc:	10002726 	beq	r2,zero,d5c <__sfvwrite_r+0xe8>
     cc0:	28800417 	ldw	r2,16(r5)
     cc4:	10002526 	beq	r2,zero,d5c <__sfvwrite_r+0xe8>
     cc8:	1880008c 	andi	r2,r3,2
     ccc:	a4400017 	ldw	r17,0(r20)
     cd0:	10002a26 	beq	r2,zero,d7c <__sfvwrite_r+0x108>
     cd4:	05a00034 	movhi	r22,32768
     cd8:	0027883a 	mov	r19,zero
     cdc:	0025883a 	mov	r18,zero
     ce0:	b5bf0004 	addi	r22,r22,-1024
     ce4:	980d883a 	mov	r6,r19
     ce8:	a809883a 	mov	r4,r21
     cec:	90004626 	beq	r18,zero,e08 <__sfvwrite_r+0x194>
     cf0:	900f883a 	mov	r7,r18
     cf4:	b480022e 	bgeu	r22,r18,d00 <__sfvwrite_r+0x8c>
     cf8:	01e00034 	movhi	r7,32768
     cfc:	39ff0004 	addi	r7,r7,-1024
     d00:	80800917 	ldw	r2,36(r16)
     d04:	81400717 	ldw	r5,28(r16)
     d08:	103ee83a 	callr	r2
     d0c:	0080570e 	bge	zero,r2,e6c <__sfvwrite_r+0x1f8>
     d10:	a0c00217 	ldw	r3,8(r20)
     d14:	98a7883a 	add	r19,r19,r2
     d18:	90a5c83a 	sub	r18,r18,r2
     d1c:	1885c83a 	sub	r2,r3,r2
     d20:	a0800215 	stw	r2,8(r20)
     d24:	103fef1e 	bne	r2,zero,ce4 <__alt_mem_onchip_memory2_0+0xfbffcce4>
     d28:	0005883a 	mov	r2,zero
     d2c:	dfc00b17 	ldw	ra,44(sp)
     d30:	df000a17 	ldw	fp,40(sp)
     d34:	ddc00917 	ldw	r23,36(sp)
     d38:	dd800817 	ldw	r22,32(sp)
     d3c:	dd400717 	ldw	r21,28(sp)
     d40:	dd000617 	ldw	r20,24(sp)
     d44:	dcc00517 	ldw	r19,20(sp)
     d48:	dc800417 	ldw	r18,16(sp)
     d4c:	dc400317 	ldw	r17,12(sp)
     d50:	dc000217 	ldw	r16,8(sp)
     d54:	dec00c04 	addi	sp,sp,48
     d58:	f800283a 	ret
     d5c:	800b883a 	mov	r5,r16
     d60:	a809883a 	mov	r4,r21
     d64:	00026c80 	call	26c8 <__swsetup_r>
     d68:	1000eb1e 	bne	r2,zero,1118 <__sfvwrite_r+0x4a4>
     d6c:	80c0030b 	ldhu	r3,12(r16)
     d70:	a4400017 	ldw	r17,0(r20)
     d74:	1880008c 	andi	r2,r3,2
     d78:	103fd61e 	bne	r2,zero,cd4 <__alt_mem_onchip_memory2_0+0xfbffccd4>
     d7c:	1880004c 	andi	r2,r3,1
     d80:	10003f1e 	bne	r2,zero,e80 <__sfvwrite_r+0x20c>
     d84:	0039883a 	mov	fp,zero
     d88:	0025883a 	mov	r18,zero
     d8c:	90001a26 	beq	r18,zero,df8 <__sfvwrite_r+0x184>
     d90:	1880800c 	andi	r2,r3,512
     d94:	84c00217 	ldw	r19,8(r16)
     d98:	10002126 	beq	r2,zero,e20 <__sfvwrite_r+0x1ac>
     d9c:	982f883a 	mov	r23,r19
     da0:	94c09336 	bltu	r18,r19,ff0 <__sfvwrite_r+0x37c>
     da4:	1881200c 	andi	r2,r3,1152
     da8:	10009e1e 	bne	r2,zero,1024 <__sfvwrite_r+0x3b0>
     dac:	81000017 	ldw	r4,0(r16)
     db0:	b80d883a 	mov	r6,r23
     db4:	e00b883a 	mov	r5,fp
     db8:	0001cf00 	call	1cf0 <memmove>
     dbc:	80c00217 	ldw	r3,8(r16)
     dc0:	81000017 	ldw	r4,0(r16)
     dc4:	9005883a 	mov	r2,r18
     dc8:	1ce7c83a 	sub	r19,r3,r19
     dcc:	25cf883a 	add	r7,r4,r23
     dd0:	84c00215 	stw	r19,8(r16)
     dd4:	81c00015 	stw	r7,0(r16)
     dd8:	a0c00217 	ldw	r3,8(r20)
     ddc:	e0b9883a 	add	fp,fp,r2
     de0:	90a5c83a 	sub	r18,r18,r2
     de4:	18a7c83a 	sub	r19,r3,r2
     de8:	a4c00215 	stw	r19,8(r20)
     dec:	983fce26 	beq	r19,zero,d28 <__alt_mem_onchip_memory2_0+0xfbffcd28>
     df0:	80c0030b 	ldhu	r3,12(r16)
     df4:	903fe61e 	bne	r18,zero,d90 <__alt_mem_onchip_memory2_0+0xfbffcd90>
     df8:	8f000017 	ldw	fp,0(r17)
     dfc:	8c800117 	ldw	r18,4(r17)
     e00:	8c400204 	addi	r17,r17,8
     e04:	003fe106 	br	d8c <__alt_mem_onchip_memory2_0+0xfbffcd8c>
     e08:	8cc00017 	ldw	r19,0(r17)
     e0c:	8c800117 	ldw	r18,4(r17)
     e10:	8c400204 	addi	r17,r17,8
     e14:	003fb306 	br	ce4 <__alt_mem_onchip_memory2_0+0xfbffcce4>
     e18:	0005883a 	mov	r2,zero
     e1c:	f800283a 	ret
     e20:	81000017 	ldw	r4,0(r16)
     e24:	80800417 	ldw	r2,16(r16)
     e28:	11005736 	bltu	r2,r4,f88 <__sfvwrite_r+0x314>
     e2c:	85c00517 	ldw	r23,20(r16)
     e30:	95c05536 	bltu	r18,r23,f88 <__sfvwrite_r+0x314>
     e34:	00a00034 	movhi	r2,32768
     e38:	10bfffc4 	addi	r2,r2,-1
     e3c:	9009883a 	mov	r4,r18
     e40:	1480012e 	bgeu	r2,r18,e48 <__sfvwrite_r+0x1d4>
     e44:	1009883a 	mov	r4,r2
     e48:	b80b883a 	mov	r5,r23
     e4c:	00005b40 	call	5b4 <__divsi3>
     e50:	15cf383a 	mul	r7,r2,r23
     e54:	81400717 	ldw	r5,28(r16)
     e58:	80800917 	ldw	r2,36(r16)
     e5c:	e00d883a 	mov	r6,fp
     e60:	a809883a 	mov	r4,r21
     e64:	103ee83a 	callr	r2
     e68:	00bfdb16 	blt	zero,r2,dd8 <__alt_mem_onchip_memory2_0+0xfbffcdd8>
     e6c:	8080030b 	ldhu	r2,12(r16)
     e70:	10801014 	ori	r2,r2,64
     e74:	8080030d 	sth	r2,12(r16)
     e78:	00bfffc4 	movi	r2,-1
     e7c:	003fab06 	br	d2c <__alt_mem_onchip_memory2_0+0xfbffcd2c>
     e80:	0027883a 	mov	r19,zero
     e84:	0011883a 	mov	r8,zero
     e88:	0039883a 	mov	fp,zero
     e8c:	0025883a 	mov	r18,zero
     e90:	90001f26 	beq	r18,zero,f10 <__sfvwrite_r+0x29c>
     e94:	40005a26 	beq	r8,zero,1000 <__sfvwrite_r+0x38c>
     e98:	982d883a 	mov	r22,r19
     e9c:	94c0012e 	bgeu	r18,r19,ea4 <__sfvwrite_r+0x230>
     ea0:	902d883a 	mov	r22,r18
     ea4:	81000017 	ldw	r4,0(r16)
     ea8:	80800417 	ldw	r2,16(r16)
     eac:	b02f883a 	mov	r23,r22
     eb0:	81c00517 	ldw	r7,20(r16)
     eb4:	1100032e 	bgeu	r2,r4,ec4 <__sfvwrite_r+0x250>
     eb8:	80c00217 	ldw	r3,8(r16)
     ebc:	38c7883a 	add	r3,r7,r3
     ec0:	1d801816 	blt	r3,r22,f24 <__sfvwrite_r+0x2b0>
     ec4:	b1c03e16 	blt	r22,r7,fc0 <__sfvwrite_r+0x34c>
     ec8:	80800917 	ldw	r2,36(r16)
     ecc:	81400717 	ldw	r5,28(r16)
     ed0:	e00d883a 	mov	r6,fp
     ed4:	da000115 	stw	r8,4(sp)
     ed8:	a809883a 	mov	r4,r21
     edc:	103ee83a 	callr	r2
     ee0:	102f883a 	mov	r23,r2
     ee4:	da000117 	ldw	r8,4(sp)
     ee8:	00bfe00e 	bge	zero,r2,e6c <__alt_mem_onchip_memory2_0+0xfbffce6c>
     eec:	9de7c83a 	sub	r19,r19,r23
     ef0:	98001f26 	beq	r19,zero,f70 <__sfvwrite_r+0x2fc>
     ef4:	a0800217 	ldw	r2,8(r20)
     ef8:	e5f9883a 	add	fp,fp,r23
     efc:	95e5c83a 	sub	r18,r18,r23
     f00:	15efc83a 	sub	r23,r2,r23
     f04:	a5c00215 	stw	r23,8(r20)
     f08:	b83f8726 	beq	r23,zero,d28 <__alt_mem_onchip_memory2_0+0xfbffcd28>
     f0c:	903fe11e 	bne	r18,zero,e94 <__alt_mem_onchip_memory2_0+0xfbffce94>
     f10:	8f000017 	ldw	fp,0(r17)
     f14:	8c800117 	ldw	r18,4(r17)
     f18:	0011883a 	mov	r8,zero
     f1c:	8c400204 	addi	r17,r17,8
     f20:	003fdb06 	br	e90 <__alt_mem_onchip_memory2_0+0xfbffce90>
     f24:	180d883a 	mov	r6,r3
     f28:	e00b883a 	mov	r5,fp
     f2c:	da000115 	stw	r8,4(sp)
     f30:	d8c00015 	stw	r3,0(sp)
     f34:	0001cf00 	call	1cf0 <memmove>
     f38:	d8c00017 	ldw	r3,0(sp)
     f3c:	80800017 	ldw	r2,0(r16)
     f40:	800b883a 	mov	r5,r16
     f44:	a809883a 	mov	r4,r21
     f48:	10c5883a 	add	r2,r2,r3
     f4c:	80800015 	stw	r2,0(r16)
     f50:	d8c00015 	stw	r3,0(sp)
     f54:	0002b900 	call	2b90 <_fflush_r>
     f58:	d8c00017 	ldw	r3,0(sp)
     f5c:	da000117 	ldw	r8,4(sp)
     f60:	103fc21e 	bne	r2,zero,e6c <__alt_mem_onchip_memory2_0+0xfbffce6c>
     f64:	182f883a 	mov	r23,r3
     f68:	9de7c83a 	sub	r19,r19,r23
     f6c:	983fe11e 	bne	r19,zero,ef4 <__alt_mem_onchip_memory2_0+0xfbffcef4>
     f70:	800b883a 	mov	r5,r16
     f74:	a809883a 	mov	r4,r21
     f78:	0002b900 	call	2b90 <_fflush_r>
     f7c:	103fbb1e 	bne	r2,zero,e6c <__alt_mem_onchip_memory2_0+0xfbffce6c>
     f80:	0011883a 	mov	r8,zero
     f84:	003fdb06 	br	ef4 <__alt_mem_onchip_memory2_0+0xfbffcef4>
     f88:	94c0012e 	bgeu	r18,r19,f90 <__sfvwrite_r+0x31c>
     f8c:	9027883a 	mov	r19,r18
     f90:	980d883a 	mov	r6,r19
     f94:	e00b883a 	mov	r5,fp
     f98:	0001cf00 	call	1cf0 <memmove>
     f9c:	80800217 	ldw	r2,8(r16)
     fa0:	80c00017 	ldw	r3,0(r16)
     fa4:	14c5c83a 	sub	r2,r2,r19
     fa8:	1cc7883a 	add	r3,r3,r19
     fac:	80800215 	stw	r2,8(r16)
     fb0:	80c00015 	stw	r3,0(r16)
     fb4:	10004326 	beq	r2,zero,10c4 <__sfvwrite_r+0x450>
     fb8:	9805883a 	mov	r2,r19
     fbc:	003f8606 	br	dd8 <__alt_mem_onchip_memory2_0+0xfbffcdd8>
     fc0:	b00d883a 	mov	r6,r22
     fc4:	e00b883a 	mov	r5,fp
     fc8:	da000115 	stw	r8,4(sp)
     fcc:	0001cf00 	call	1cf0 <memmove>
     fd0:	80800217 	ldw	r2,8(r16)
     fd4:	80c00017 	ldw	r3,0(r16)
     fd8:	da000117 	ldw	r8,4(sp)
     fdc:	1585c83a 	sub	r2,r2,r22
     fe0:	1dad883a 	add	r22,r3,r22
     fe4:	80800215 	stw	r2,8(r16)
     fe8:	85800015 	stw	r22,0(r16)
     fec:	003fbf06 	br	eec <__alt_mem_onchip_memory2_0+0xfbffceec>
     ff0:	81000017 	ldw	r4,0(r16)
     ff4:	9027883a 	mov	r19,r18
     ff8:	902f883a 	mov	r23,r18
     ffc:	003f6c06 	br	db0 <__alt_mem_onchip_memory2_0+0xfbffcdb0>
    1000:	900d883a 	mov	r6,r18
    1004:	01400284 	movi	r5,10
    1008:	e009883a 	mov	r4,fp
    100c:	0001ac40 	call	1ac4 <memchr>
    1010:	10003e26 	beq	r2,zero,110c <__sfvwrite_r+0x498>
    1014:	10800044 	addi	r2,r2,1
    1018:	1727c83a 	sub	r19,r2,fp
    101c:	02000044 	movi	r8,1
    1020:	003f9d06 	br	e98 <__alt_mem_onchip_memory2_0+0xfbffce98>
    1024:	80800517 	ldw	r2,20(r16)
    1028:	81400417 	ldw	r5,16(r16)
    102c:	81c00017 	ldw	r7,0(r16)
    1030:	10a7883a 	add	r19,r2,r2
    1034:	9885883a 	add	r2,r19,r2
    1038:	1026d7fa 	srli	r19,r2,31
    103c:	396dc83a 	sub	r22,r7,r5
    1040:	b1000044 	addi	r4,r22,1
    1044:	9885883a 	add	r2,r19,r2
    1048:	1027d07a 	srai	r19,r2,1
    104c:	2485883a 	add	r2,r4,r18
    1050:	980d883a 	mov	r6,r19
    1054:	9880022e 	bgeu	r19,r2,1060 <__sfvwrite_r+0x3ec>
    1058:	1027883a 	mov	r19,r2
    105c:	100d883a 	mov	r6,r2
    1060:	18c1000c 	andi	r3,r3,1024
    1064:	18001c26 	beq	r3,zero,10d8 <__sfvwrite_r+0x464>
    1068:	300b883a 	mov	r5,r6
    106c:	a809883a 	mov	r4,r21
    1070:	00012b80 	call	12b8 <_malloc_r>
    1074:	102f883a 	mov	r23,r2
    1078:	10002926 	beq	r2,zero,1120 <__sfvwrite_r+0x4ac>
    107c:	81400417 	ldw	r5,16(r16)
    1080:	b00d883a 	mov	r6,r22
    1084:	1009883a 	mov	r4,r2
    1088:	0001ba80 	call	1ba8 <memcpy>
    108c:	8080030b 	ldhu	r2,12(r16)
    1090:	00fedfc4 	movi	r3,-1153
    1094:	10c4703a 	and	r2,r2,r3
    1098:	10802014 	ori	r2,r2,128
    109c:	8080030d 	sth	r2,12(r16)
    10a0:	bd89883a 	add	r4,r23,r22
    10a4:	9d8fc83a 	sub	r7,r19,r22
    10a8:	85c00415 	stw	r23,16(r16)
    10ac:	84c00515 	stw	r19,20(r16)
    10b0:	81000015 	stw	r4,0(r16)
    10b4:	9027883a 	mov	r19,r18
    10b8:	81c00215 	stw	r7,8(r16)
    10bc:	902f883a 	mov	r23,r18
    10c0:	003f3b06 	br	db0 <__alt_mem_onchip_memory2_0+0xfbffcdb0>
    10c4:	800b883a 	mov	r5,r16
    10c8:	a809883a 	mov	r4,r21
    10cc:	0002b900 	call	2b90 <_fflush_r>
    10d0:	103fb926 	beq	r2,zero,fb8 <__alt_mem_onchip_memory2_0+0xfbffcfb8>
    10d4:	003f6506 	br	e6c <__alt_mem_onchip_memory2_0+0xfbffce6c>
    10d8:	a809883a 	mov	r4,r21
    10dc:	0001f740 	call	1f74 <_realloc_r>
    10e0:	102f883a 	mov	r23,r2
    10e4:	103fee1e 	bne	r2,zero,10a0 <__alt_mem_onchip_memory2_0+0xfbffd0a0>
    10e8:	81400417 	ldw	r5,16(r16)
    10ec:	a809883a 	mov	r4,r21
    10f0:	0002d400 	call	2d40 <_free_r>
    10f4:	8080030b 	ldhu	r2,12(r16)
    10f8:	00ffdfc4 	movi	r3,-129
    10fc:	1884703a 	and	r2,r3,r2
    1100:	00c00304 	movi	r3,12
    1104:	a8c00015 	stw	r3,0(r21)
    1108:	003f5906 	br	e70 <__alt_mem_onchip_memory2_0+0xfbffce70>
    110c:	94c00044 	addi	r19,r18,1
    1110:	02000044 	movi	r8,1
    1114:	003f6006 	br	e98 <__alt_mem_onchip_memory2_0+0xfbffce98>
    1118:	00bfffc4 	movi	r2,-1
    111c:	003f0306 	br	d2c <__alt_mem_onchip_memory2_0+0xfbffcd2c>
    1120:	00800304 	movi	r2,12
    1124:	a8800015 	stw	r2,0(r21)
    1128:	8080030b 	ldhu	r2,12(r16)
    112c:	003f5006 	br	e70 <__alt_mem_onchip_memory2_0+0xfbffce70>

00001130 <_fwalk>:
    1130:	defff704 	addi	sp,sp,-36
    1134:	dd000415 	stw	r20,16(sp)
    1138:	dfc00815 	stw	ra,32(sp)
    113c:	ddc00715 	stw	r23,28(sp)
    1140:	dd800615 	stw	r22,24(sp)
    1144:	dd400515 	stw	r21,20(sp)
    1148:	dcc00315 	stw	r19,12(sp)
    114c:	dc800215 	stw	r18,8(sp)
    1150:	dc400115 	stw	r17,4(sp)
    1154:	dc000015 	stw	r16,0(sp)
    1158:	2500b804 	addi	r20,r4,736
    115c:	a0002326 	beq	r20,zero,11ec <_fwalk+0xbc>
    1160:	282b883a 	mov	r21,r5
    1164:	002f883a 	mov	r23,zero
    1168:	05800044 	movi	r22,1
    116c:	04ffffc4 	movi	r19,-1
    1170:	a4400117 	ldw	r17,4(r20)
    1174:	a4800217 	ldw	r18,8(r20)
    1178:	8c7fffc4 	addi	r17,r17,-1
    117c:	88000d16 	blt	r17,zero,11b4 <_fwalk+0x84>
    1180:	94000304 	addi	r16,r18,12
    1184:	94800384 	addi	r18,r18,14
    1188:	8080000b 	ldhu	r2,0(r16)
    118c:	8c7fffc4 	addi	r17,r17,-1
    1190:	813ffd04 	addi	r4,r16,-12
    1194:	b080042e 	bgeu	r22,r2,11a8 <_fwalk+0x78>
    1198:	9080000f 	ldh	r2,0(r18)
    119c:	14c00226 	beq	r2,r19,11a8 <_fwalk+0x78>
    11a0:	a83ee83a 	callr	r21
    11a4:	b8aeb03a 	or	r23,r23,r2
    11a8:	84001a04 	addi	r16,r16,104
    11ac:	94801a04 	addi	r18,r18,104
    11b0:	8cfff51e 	bne	r17,r19,1188 <__alt_mem_onchip_memory2_0+0xfbffd188>
    11b4:	a5000017 	ldw	r20,0(r20)
    11b8:	a03fed1e 	bne	r20,zero,1170 <__alt_mem_onchip_memory2_0+0xfbffd170>
    11bc:	b805883a 	mov	r2,r23
    11c0:	dfc00817 	ldw	ra,32(sp)
    11c4:	ddc00717 	ldw	r23,28(sp)
    11c8:	dd800617 	ldw	r22,24(sp)
    11cc:	dd400517 	ldw	r21,20(sp)
    11d0:	dd000417 	ldw	r20,16(sp)
    11d4:	dcc00317 	ldw	r19,12(sp)
    11d8:	dc800217 	ldw	r18,8(sp)
    11dc:	dc400117 	ldw	r17,4(sp)
    11e0:	dc000017 	ldw	r16,0(sp)
    11e4:	dec00904 	addi	sp,sp,36
    11e8:	f800283a 	ret
    11ec:	002f883a 	mov	r23,zero
    11f0:	003ff206 	br	11bc <__alt_mem_onchip_memory2_0+0xfbffd1bc>

000011f4 <_fwalk_reent>:
    11f4:	defff704 	addi	sp,sp,-36
    11f8:	dd000415 	stw	r20,16(sp)
    11fc:	dfc00815 	stw	ra,32(sp)
    1200:	ddc00715 	stw	r23,28(sp)
    1204:	dd800615 	stw	r22,24(sp)
    1208:	dd400515 	stw	r21,20(sp)
    120c:	dcc00315 	stw	r19,12(sp)
    1210:	dc800215 	stw	r18,8(sp)
    1214:	dc400115 	stw	r17,4(sp)
    1218:	dc000015 	stw	r16,0(sp)
    121c:	2500b804 	addi	r20,r4,736
    1220:	a0002326 	beq	r20,zero,12b0 <_fwalk_reent+0xbc>
    1224:	282b883a 	mov	r21,r5
    1228:	2027883a 	mov	r19,r4
    122c:	002f883a 	mov	r23,zero
    1230:	05800044 	movi	r22,1
    1234:	04bfffc4 	movi	r18,-1
    1238:	a4400117 	ldw	r17,4(r20)
    123c:	a4000217 	ldw	r16,8(r20)
    1240:	8c7fffc4 	addi	r17,r17,-1
    1244:	88000c16 	blt	r17,zero,1278 <_fwalk_reent+0x84>
    1248:	84000304 	addi	r16,r16,12
    124c:	8080000b 	ldhu	r2,0(r16)
    1250:	8c7fffc4 	addi	r17,r17,-1
    1254:	817ffd04 	addi	r5,r16,-12
    1258:	b080052e 	bgeu	r22,r2,1270 <_fwalk_reent+0x7c>
    125c:	8080008f 	ldh	r2,2(r16)
    1260:	9809883a 	mov	r4,r19
    1264:	14800226 	beq	r2,r18,1270 <_fwalk_reent+0x7c>
    1268:	a83ee83a 	callr	r21
    126c:	b8aeb03a 	or	r23,r23,r2
    1270:	84001a04 	addi	r16,r16,104
    1274:	8cbff51e 	bne	r17,r18,124c <__alt_mem_onchip_memory2_0+0xfbffd24c>
    1278:	a5000017 	ldw	r20,0(r20)
    127c:	a03fee1e 	bne	r20,zero,1238 <__alt_mem_onchip_memory2_0+0xfbffd238>
    1280:	b805883a 	mov	r2,r23
    1284:	dfc00817 	ldw	ra,32(sp)
    1288:	ddc00717 	ldw	r23,28(sp)
    128c:	dd800617 	ldw	r22,24(sp)
    1290:	dd400517 	ldw	r21,20(sp)
    1294:	dd000417 	ldw	r20,16(sp)
    1298:	dcc00317 	ldw	r19,12(sp)
    129c:	dc800217 	ldw	r18,8(sp)
    12a0:	dc400117 	ldw	r17,4(sp)
    12a4:	dc000017 	ldw	r16,0(sp)
    12a8:	dec00904 	addi	sp,sp,36
    12ac:	f800283a 	ret
    12b0:	002f883a 	mov	r23,zero
    12b4:	003ff206 	br	1280 <__alt_mem_onchip_memory2_0+0xfbffd280>

000012b8 <_malloc_r>:
    12b8:	defff504 	addi	sp,sp,-44
    12bc:	dc800315 	stw	r18,12(sp)
    12c0:	dfc00a15 	stw	ra,40(sp)
    12c4:	df000915 	stw	fp,36(sp)
    12c8:	ddc00815 	stw	r23,32(sp)
    12cc:	dd800715 	stw	r22,28(sp)
    12d0:	dd400615 	stw	r21,24(sp)
    12d4:	dd000515 	stw	r20,20(sp)
    12d8:	dcc00415 	stw	r19,16(sp)
    12dc:	dc400215 	stw	r17,8(sp)
    12e0:	dc000115 	stw	r16,4(sp)
    12e4:	288002c4 	addi	r2,r5,11
    12e8:	00c00584 	movi	r3,22
    12ec:	2025883a 	mov	r18,r4
    12f0:	18807f2e 	bgeu	r3,r2,14f0 <_malloc_r+0x238>
    12f4:	047ffe04 	movi	r17,-8
    12f8:	1462703a 	and	r17,r2,r17
    12fc:	8800a316 	blt	r17,zero,158c <_malloc_r+0x2d4>
    1300:	8940a236 	bltu	r17,r5,158c <_malloc_r+0x2d4>
    1304:	0003e540 	call	3e54 <__malloc_lock>
    1308:	00807dc4 	movi	r2,503
    130c:	1441e92e 	bgeu	r2,r17,1ab4 <_malloc_r+0x7fc>
    1310:	8804d27a 	srli	r2,r17,9
    1314:	1000a126 	beq	r2,zero,159c <_malloc_r+0x2e4>
    1318:	00c00104 	movi	r3,4
    131c:	18811e36 	bltu	r3,r2,1798 <_malloc_r+0x4e0>
    1320:	8804d1ba 	srli	r2,r17,6
    1324:	12000e44 	addi	r8,r2,57
    1328:	11c00e04 	addi	r7,r2,56
    132c:	4209883a 	add	r4,r8,r8
    1330:	04c00074 	movhi	r19,1
    1334:	2109883a 	add	r4,r4,r4
    1338:	9cfd1604 	addi	r19,r19,-2984
    133c:	2109883a 	add	r4,r4,r4
    1340:	9909883a 	add	r4,r19,r4
    1344:	24000117 	ldw	r16,4(r4)
    1348:	213ffe04 	addi	r4,r4,-8
    134c:	24009726 	beq	r4,r16,15ac <_malloc_r+0x2f4>
    1350:	80800117 	ldw	r2,4(r16)
    1354:	01bfff04 	movi	r6,-4
    1358:	014003c4 	movi	r5,15
    135c:	1184703a 	and	r2,r2,r6
    1360:	1447c83a 	sub	r3,r2,r17
    1364:	28c00716 	blt	r5,r3,1384 <_malloc_r+0xcc>
    1368:	1800920e 	bge	r3,zero,15b4 <_malloc_r+0x2fc>
    136c:	84000317 	ldw	r16,12(r16)
    1370:	24008e26 	beq	r4,r16,15ac <_malloc_r+0x2f4>
    1374:	80800117 	ldw	r2,4(r16)
    1378:	1184703a 	and	r2,r2,r6
    137c:	1447c83a 	sub	r3,r2,r17
    1380:	28fff90e 	bge	r5,r3,1368 <__alt_mem_onchip_memory2_0+0xfbffd368>
    1384:	3809883a 	mov	r4,r7
    1388:	01800074 	movhi	r6,1
    138c:	9c000417 	ldw	r16,16(r19)
    1390:	31bd1604 	addi	r6,r6,-2984
    1394:	32000204 	addi	r8,r6,8
    1398:	82013426 	beq	r16,r8,186c <_malloc_r+0x5b4>
    139c:	80c00117 	ldw	r3,4(r16)
    13a0:	00bfff04 	movi	r2,-4
    13a4:	188e703a 	and	r7,r3,r2
    13a8:	3c45c83a 	sub	r2,r7,r17
    13ac:	00c003c4 	movi	r3,15
    13b0:	18811f16 	blt	r3,r2,1830 <_malloc_r+0x578>
    13b4:	32000515 	stw	r8,20(r6)
    13b8:	32000415 	stw	r8,16(r6)
    13bc:	10007f0e 	bge	r2,zero,15bc <_malloc_r+0x304>
    13c0:	00807fc4 	movi	r2,511
    13c4:	11c0fd36 	bltu	r2,r7,17bc <_malloc_r+0x504>
    13c8:	3806d0fa 	srli	r3,r7,3
    13cc:	01c00044 	movi	r7,1
    13d0:	30800117 	ldw	r2,4(r6)
    13d4:	19400044 	addi	r5,r3,1
    13d8:	294b883a 	add	r5,r5,r5
    13dc:	1807d0ba 	srai	r3,r3,2
    13e0:	294b883a 	add	r5,r5,r5
    13e4:	294b883a 	add	r5,r5,r5
    13e8:	298b883a 	add	r5,r5,r6
    13ec:	38c6983a 	sll	r3,r7,r3
    13f0:	29c00017 	ldw	r7,0(r5)
    13f4:	2a7ffe04 	addi	r9,r5,-8
    13f8:	1886b03a 	or	r3,r3,r2
    13fc:	82400315 	stw	r9,12(r16)
    1400:	81c00215 	stw	r7,8(r16)
    1404:	30c00115 	stw	r3,4(r6)
    1408:	2c000015 	stw	r16,0(r5)
    140c:	3c000315 	stw	r16,12(r7)
    1410:	2005d0ba 	srai	r2,r4,2
    1414:	01400044 	movi	r5,1
    1418:	288a983a 	sll	r5,r5,r2
    141c:	19406f36 	bltu	r3,r5,15dc <_malloc_r+0x324>
    1420:	28c4703a 	and	r2,r5,r3
    1424:	10000a1e 	bne	r2,zero,1450 <_malloc_r+0x198>
    1428:	00bfff04 	movi	r2,-4
    142c:	294b883a 	add	r5,r5,r5
    1430:	2088703a 	and	r4,r4,r2
    1434:	28c4703a 	and	r2,r5,r3
    1438:	21000104 	addi	r4,r4,4
    143c:	1000041e 	bne	r2,zero,1450 <_malloc_r+0x198>
    1440:	294b883a 	add	r5,r5,r5
    1444:	28c4703a 	and	r2,r5,r3
    1448:	21000104 	addi	r4,r4,4
    144c:	103ffc26 	beq	r2,zero,1440 <__alt_mem_onchip_memory2_0+0xfbffd440>
    1450:	02bfff04 	movi	r10,-4
    1454:	024003c4 	movi	r9,15
    1458:	21800044 	addi	r6,r4,1
    145c:	318d883a 	add	r6,r6,r6
    1460:	318d883a 	add	r6,r6,r6
    1464:	318d883a 	add	r6,r6,r6
    1468:	998d883a 	add	r6,r19,r6
    146c:	333ffe04 	addi	r12,r6,-8
    1470:	2017883a 	mov	r11,r4
    1474:	31800104 	addi	r6,r6,4
    1478:	34000017 	ldw	r16,0(r6)
    147c:	31fffd04 	addi	r7,r6,-12
    1480:	81c0041e 	bne	r16,r7,1494 <_malloc_r+0x1dc>
    1484:	0000fb06 	br	1874 <_malloc_r+0x5bc>
    1488:	1801030e 	bge	r3,zero,1898 <_malloc_r+0x5e0>
    148c:	84000317 	ldw	r16,12(r16)
    1490:	81c0f826 	beq	r16,r7,1874 <_malloc_r+0x5bc>
    1494:	80800117 	ldw	r2,4(r16)
    1498:	1284703a 	and	r2,r2,r10
    149c:	1447c83a 	sub	r3,r2,r17
    14a0:	48fff90e 	bge	r9,r3,1488 <__alt_mem_onchip_memory2_0+0xfbffd488>
    14a4:	80800317 	ldw	r2,12(r16)
    14a8:	81000217 	ldw	r4,8(r16)
    14ac:	89400054 	ori	r5,r17,1
    14b0:	81400115 	stw	r5,4(r16)
    14b4:	20800315 	stw	r2,12(r4)
    14b8:	11000215 	stw	r4,8(r2)
    14bc:	8463883a 	add	r17,r16,r17
    14c0:	9c400515 	stw	r17,20(r19)
    14c4:	9c400415 	stw	r17,16(r19)
    14c8:	18800054 	ori	r2,r3,1
    14cc:	88800115 	stw	r2,4(r17)
    14d0:	8a000315 	stw	r8,12(r17)
    14d4:	8a000215 	stw	r8,8(r17)
    14d8:	88e3883a 	add	r17,r17,r3
    14dc:	88c00015 	stw	r3,0(r17)
    14e0:	9009883a 	mov	r4,r18
    14e4:	0003f740 	call	3f74 <__malloc_unlock>
    14e8:	80800204 	addi	r2,r16,8
    14ec:	00001b06 	br	155c <_malloc_r+0x2a4>
    14f0:	04400404 	movi	r17,16
    14f4:	89402536 	bltu	r17,r5,158c <_malloc_r+0x2d4>
    14f8:	0003e540 	call	3e54 <__malloc_lock>
    14fc:	00800184 	movi	r2,6
    1500:	01000084 	movi	r4,2
    1504:	04c00074 	movhi	r19,1
    1508:	1085883a 	add	r2,r2,r2
    150c:	9cfd1604 	addi	r19,r19,-2984
    1510:	1085883a 	add	r2,r2,r2
    1514:	9885883a 	add	r2,r19,r2
    1518:	14000117 	ldw	r16,4(r2)
    151c:	10fffe04 	addi	r3,r2,-8
    1520:	80c0d926 	beq	r16,r3,1888 <_malloc_r+0x5d0>
    1524:	80c00117 	ldw	r3,4(r16)
    1528:	81000317 	ldw	r4,12(r16)
    152c:	00bfff04 	movi	r2,-4
    1530:	1884703a 	and	r2,r3,r2
    1534:	81400217 	ldw	r5,8(r16)
    1538:	8085883a 	add	r2,r16,r2
    153c:	10c00117 	ldw	r3,4(r2)
    1540:	29000315 	stw	r4,12(r5)
    1544:	21400215 	stw	r5,8(r4)
    1548:	18c00054 	ori	r3,r3,1
    154c:	10c00115 	stw	r3,4(r2)
    1550:	9009883a 	mov	r4,r18
    1554:	0003f740 	call	3f74 <__malloc_unlock>
    1558:	80800204 	addi	r2,r16,8
    155c:	dfc00a17 	ldw	ra,40(sp)
    1560:	df000917 	ldw	fp,36(sp)
    1564:	ddc00817 	ldw	r23,32(sp)
    1568:	dd800717 	ldw	r22,28(sp)
    156c:	dd400617 	ldw	r21,24(sp)
    1570:	dd000517 	ldw	r20,20(sp)
    1574:	dcc00417 	ldw	r19,16(sp)
    1578:	dc800317 	ldw	r18,12(sp)
    157c:	dc400217 	ldw	r17,8(sp)
    1580:	dc000117 	ldw	r16,4(sp)
    1584:	dec00b04 	addi	sp,sp,44
    1588:	f800283a 	ret
    158c:	00800304 	movi	r2,12
    1590:	90800015 	stw	r2,0(r18)
    1594:	0005883a 	mov	r2,zero
    1598:	003ff006 	br	155c <__alt_mem_onchip_memory2_0+0xfbffd55c>
    159c:	01002004 	movi	r4,128
    15a0:	02001004 	movi	r8,64
    15a4:	01c00fc4 	movi	r7,63
    15a8:	003f6106 	br	1330 <__alt_mem_onchip_memory2_0+0xfbffd330>
    15ac:	4009883a 	mov	r4,r8
    15b0:	003f7506 	br	1388 <__alt_mem_onchip_memory2_0+0xfbffd388>
    15b4:	81000317 	ldw	r4,12(r16)
    15b8:	003fde06 	br	1534 <__alt_mem_onchip_memory2_0+0xfbffd534>
    15bc:	81c5883a 	add	r2,r16,r7
    15c0:	11400117 	ldw	r5,4(r2)
    15c4:	9009883a 	mov	r4,r18
    15c8:	29400054 	ori	r5,r5,1
    15cc:	11400115 	stw	r5,4(r2)
    15d0:	0003f740 	call	3f74 <__malloc_unlock>
    15d4:	80800204 	addi	r2,r16,8
    15d8:	003fe006 	br	155c <__alt_mem_onchip_memory2_0+0xfbffd55c>
    15dc:	9c000217 	ldw	r16,8(r19)
    15e0:	00bfff04 	movi	r2,-4
    15e4:	85800117 	ldw	r22,4(r16)
    15e8:	b0ac703a 	and	r22,r22,r2
    15ec:	b4400336 	bltu	r22,r17,15fc <_malloc_r+0x344>
    15f0:	b445c83a 	sub	r2,r22,r17
    15f4:	00c003c4 	movi	r3,15
    15f8:	18805d16 	blt	r3,r2,1770 <_malloc_r+0x4b8>
    15fc:	05c00074 	movhi	r23,1
    1600:	00800074 	movhi	r2,1
    1604:	108a0204 	addi	r2,r2,10248
    1608:	bdc2da04 	addi	r23,r23,2920
    160c:	15400017 	ldw	r21,0(r2)
    1610:	b8c00017 	ldw	r3,0(r23)
    1614:	00bfffc4 	movi	r2,-1
    1618:	858d883a 	add	r6,r16,r22
    161c:	8d6b883a 	add	r21,r17,r21
    1620:	1880ea26 	beq	r3,r2,19cc <_malloc_r+0x714>
    1624:	ad4403c4 	addi	r21,r21,4111
    1628:	00bc0004 	movi	r2,-4096
    162c:	a8aa703a 	and	r21,r21,r2
    1630:	a80b883a 	mov	r5,r21
    1634:	9009883a 	mov	r4,r18
    1638:	d9800015 	stw	r6,0(sp)
    163c:	00024d80 	call	24d8 <_sbrk_r>
    1640:	1029883a 	mov	r20,r2
    1644:	00bfffc4 	movi	r2,-1
    1648:	d9800017 	ldw	r6,0(sp)
    164c:	a080e826 	beq	r20,r2,19f0 <_malloc_r+0x738>
    1650:	a180a636 	bltu	r20,r6,18ec <_malloc_r+0x634>
    1654:	07000074 	movhi	fp,1
    1658:	e70a2404 	addi	fp,fp,10384
    165c:	e0800017 	ldw	r2,0(fp)
    1660:	a887883a 	add	r3,r21,r2
    1664:	e0c00015 	stw	r3,0(fp)
    1668:	3500e626 	beq	r6,r20,1a04 <_malloc_r+0x74c>
    166c:	b9000017 	ldw	r4,0(r23)
    1670:	00bfffc4 	movi	r2,-1
    1674:	2080ee26 	beq	r4,r2,1a30 <_malloc_r+0x778>
    1678:	a185c83a 	sub	r2,r20,r6
    167c:	10c5883a 	add	r2,r2,r3
    1680:	e0800015 	stw	r2,0(fp)
    1684:	a0c001cc 	andi	r3,r20,7
    1688:	1800bc26 	beq	r3,zero,197c <_malloc_r+0x6c4>
    168c:	a0e9c83a 	sub	r20,r20,r3
    1690:	00840204 	movi	r2,4104
    1694:	a5000204 	addi	r20,r20,8
    1698:	10c7c83a 	sub	r3,r2,r3
    169c:	a545883a 	add	r2,r20,r21
    16a0:	1083ffcc 	andi	r2,r2,4095
    16a4:	18abc83a 	sub	r21,r3,r2
    16a8:	a80b883a 	mov	r5,r21
    16ac:	9009883a 	mov	r4,r18
    16b0:	00024d80 	call	24d8 <_sbrk_r>
    16b4:	00ffffc4 	movi	r3,-1
    16b8:	10c0e126 	beq	r2,r3,1a40 <_malloc_r+0x788>
    16bc:	1505c83a 	sub	r2,r2,r20
    16c0:	1545883a 	add	r2,r2,r21
    16c4:	10800054 	ori	r2,r2,1
    16c8:	e0c00017 	ldw	r3,0(fp)
    16cc:	9d000215 	stw	r20,8(r19)
    16d0:	a0800115 	stw	r2,4(r20)
    16d4:	a8c7883a 	add	r3,r21,r3
    16d8:	e0c00015 	stw	r3,0(fp)
    16dc:	84c00e26 	beq	r16,r19,1718 <_malloc_r+0x460>
    16e0:	018003c4 	movi	r6,15
    16e4:	3580a72e 	bgeu	r6,r22,1984 <_malloc_r+0x6cc>
    16e8:	81400117 	ldw	r5,4(r16)
    16ec:	013ffe04 	movi	r4,-8
    16f0:	b0bffd04 	addi	r2,r22,-12
    16f4:	1104703a 	and	r2,r2,r4
    16f8:	2900004c 	andi	r4,r5,1
    16fc:	2088b03a 	or	r4,r4,r2
    1700:	81000115 	stw	r4,4(r16)
    1704:	01400144 	movi	r5,5
    1708:	8089883a 	add	r4,r16,r2
    170c:	21400115 	stw	r5,4(r4)
    1710:	21400215 	stw	r5,8(r4)
    1714:	3080cd36 	bltu	r6,r2,1a4c <_malloc_r+0x794>
    1718:	00800074 	movhi	r2,1
    171c:	108a0104 	addi	r2,r2,10244
    1720:	11000017 	ldw	r4,0(r2)
    1724:	20c0012e 	bgeu	r4,r3,172c <_malloc_r+0x474>
    1728:	10c00015 	stw	r3,0(r2)
    172c:	00800074 	movhi	r2,1
    1730:	108a0004 	addi	r2,r2,10240
    1734:	11000017 	ldw	r4,0(r2)
    1738:	9c000217 	ldw	r16,8(r19)
    173c:	20c0012e 	bgeu	r4,r3,1744 <_malloc_r+0x48c>
    1740:	10c00015 	stw	r3,0(r2)
    1744:	80c00117 	ldw	r3,4(r16)
    1748:	00bfff04 	movi	r2,-4
    174c:	1886703a 	and	r3,r3,r2
    1750:	1c45c83a 	sub	r2,r3,r17
    1754:	1c400236 	bltu	r3,r17,1760 <_malloc_r+0x4a8>
    1758:	00c003c4 	movi	r3,15
    175c:	18800416 	blt	r3,r2,1770 <_malloc_r+0x4b8>
    1760:	9009883a 	mov	r4,r18
    1764:	0003f740 	call	3f74 <__malloc_unlock>
    1768:	0005883a 	mov	r2,zero
    176c:	003f7b06 	br	155c <__alt_mem_onchip_memory2_0+0xfbffd55c>
    1770:	88c00054 	ori	r3,r17,1
    1774:	80c00115 	stw	r3,4(r16)
    1778:	8463883a 	add	r17,r16,r17
    177c:	10800054 	ori	r2,r2,1
    1780:	9c400215 	stw	r17,8(r19)
    1784:	88800115 	stw	r2,4(r17)
    1788:	9009883a 	mov	r4,r18
    178c:	0003f740 	call	3f74 <__malloc_unlock>
    1790:	80800204 	addi	r2,r16,8
    1794:	003f7106 	br	155c <__alt_mem_onchip_memory2_0+0xfbffd55c>
    1798:	00c00504 	movi	r3,20
    179c:	18804a2e 	bgeu	r3,r2,18c8 <_malloc_r+0x610>
    17a0:	00c01504 	movi	r3,84
    17a4:	18806e36 	bltu	r3,r2,1960 <_malloc_r+0x6a8>
    17a8:	8804d33a 	srli	r2,r17,12
    17ac:	12001bc4 	addi	r8,r2,111
    17b0:	11c01b84 	addi	r7,r2,110
    17b4:	4209883a 	add	r4,r8,r8
    17b8:	003edd06 	br	1330 <__alt_mem_onchip_memory2_0+0xfbffd330>
    17bc:	3804d27a 	srli	r2,r7,9
    17c0:	00c00104 	movi	r3,4
    17c4:	1880442e 	bgeu	r3,r2,18d8 <_malloc_r+0x620>
    17c8:	00c00504 	movi	r3,20
    17cc:	18808136 	bltu	r3,r2,19d4 <_malloc_r+0x71c>
    17d0:	11401704 	addi	r5,r2,92
    17d4:	10c016c4 	addi	r3,r2,91
    17d8:	294b883a 	add	r5,r5,r5
    17dc:	294b883a 	add	r5,r5,r5
    17e0:	294b883a 	add	r5,r5,r5
    17e4:	994b883a 	add	r5,r19,r5
    17e8:	28800017 	ldw	r2,0(r5)
    17ec:	01800074 	movhi	r6,1
    17f0:	297ffe04 	addi	r5,r5,-8
    17f4:	31bd1604 	addi	r6,r6,-2984
    17f8:	28806526 	beq	r5,r2,1990 <_malloc_r+0x6d8>
    17fc:	01bfff04 	movi	r6,-4
    1800:	10c00117 	ldw	r3,4(r2)
    1804:	1986703a 	and	r3,r3,r6
    1808:	38c0022e 	bgeu	r7,r3,1814 <_malloc_r+0x55c>
    180c:	10800217 	ldw	r2,8(r2)
    1810:	28bffb1e 	bne	r5,r2,1800 <__alt_mem_onchip_memory2_0+0xfbffd800>
    1814:	11400317 	ldw	r5,12(r2)
    1818:	98c00117 	ldw	r3,4(r19)
    181c:	81400315 	stw	r5,12(r16)
    1820:	80800215 	stw	r2,8(r16)
    1824:	2c000215 	stw	r16,8(r5)
    1828:	14000315 	stw	r16,12(r2)
    182c:	003ef806 	br	1410 <__alt_mem_onchip_memory2_0+0xfbffd410>
    1830:	88c00054 	ori	r3,r17,1
    1834:	80c00115 	stw	r3,4(r16)
    1838:	8463883a 	add	r17,r16,r17
    183c:	34400515 	stw	r17,20(r6)
    1840:	34400415 	stw	r17,16(r6)
    1844:	10c00054 	ori	r3,r2,1
    1848:	8a000315 	stw	r8,12(r17)
    184c:	8a000215 	stw	r8,8(r17)
    1850:	88c00115 	stw	r3,4(r17)
    1854:	88a3883a 	add	r17,r17,r2
    1858:	88800015 	stw	r2,0(r17)
    185c:	9009883a 	mov	r4,r18
    1860:	0003f740 	call	3f74 <__malloc_unlock>
    1864:	80800204 	addi	r2,r16,8
    1868:	003f3c06 	br	155c <__alt_mem_onchip_memory2_0+0xfbffd55c>
    186c:	30c00117 	ldw	r3,4(r6)
    1870:	003ee706 	br	1410 <__alt_mem_onchip_memory2_0+0xfbffd410>
    1874:	5ac00044 	addi	r11,r11,1
    1878:	588000cc 	andi	r2,r11,3
    187c:	31800204 	addi	r6,r6,8
    1880:	103efd1e 	bne	r2,zero,1478 <__alt_mem_onchip_memory2_0+0xfbffd478>
    1884:	00002406 	br	1918 <_malloc_r+0x660>
    1888:	14000317 	ldw	r16,12(r2)
    188c:	143f251e 	bne	r2,r16,1524 <__alt_mem_onchip_memory2_0+0xfbffd524>
    1890:	21000084 	addi	r4,r4,2
    1894:	003ebc06 	br	1388 <__alt_mem_onchip_memory2_0+0xfbffd388>
    1898:	8085883a 	add	r2,r16,r2
    189c:	10c00117 	ldw	r3,4(r2)
    18a0:	81000317 	ldw	r4,12(r16)
    18a4:	81400217 	ldw	r5,8(r16)
    18a8:	18c00054 	ori	r3,r3,1
    18ac:	10c00115 	stw	r3,4(r2)
    18b0:	29000315 	stw	r4,12(r5)
    18b4:	21400215 	stw	r5,8(r4)
    18b8:	9009883a 	mov	r4,r18
    18bc:	0003f740 	call	3f74 <__malloc_unlock>
    18c0:	80800204 	addi	r2,r16,8
    18c4:	003f2506 	br	155c <__alt_mem_onchip_memory2_0+0xfbffd55c>
    18c8:	12001704 	addi	r8,r2,92
    18cc:	11c016c4 	addi	r7,r2,91
    18d0:	4209883a 	add	r4,r8,r8
    18d4:	003e9606 	br	1330 <__alt_mem_onchip_memory2_0+0xfbffd330>
    18d8:	3804d1ba 	srli	r2,r7,6
    18dc:	11400e44 	addi	r5,r2,57
    18e0:	10c00e04 	addi	r3,r2,56
    18e4:	294b883a 	add	r5,r5,r5
    18e8:	003fbc06 	br	17dc <__alt_mem_onchip_memory2_0+0xfbffd7dc>
    18ec:	84ff5926 	beq	r16,r19,1654 <__alt_mem_onchip_memory2_0+0xfbffd654>
    18f0:	00800074 	movhi	r2,1
    18f4:	10bd1604 	addi	r2,r2,-2984
    18f8:	14000217 	ldw	r16,8(r2)
    18fc:	00bfff04 	movi	r2,-4
    1900:	80c00117 	ldw	r3,4(r16)
    1904:	1886703a 	and	r3,r3,r2
    1908:	003f9106 	br	1750 <__alt_mem_onchip_memory2_0+0xfbffd750>
    190c:	60800217 	ldw	r2,8(r12)
    1910:	213fffc4 	addi	r4,r4,-1
    1914:	1300651e 	bne	r2,r12,1aac <_malloc_r+0x7f4>
    1918:	208000cc 	andi	r2,r4,3
    191c:	633ffe04 	addi	r12,r12,-8
    1920:	103ffa1e 	bne	r2,zero,190c <__alt_mem_onchip_memory2_0+0xfbffd90c>
    1924:	98800117 	ldw	r2,4(r19)
    1928:	0146303a 	nor	r3,zero,r5
    192c:	1884703a 	and	r2,r3,r2
    1930:	98800115 	stw	r2,4(r19)
    1934:	294b883a 	add	r5,r5,r5
    1938:	117f2836 	bltu	r2,r5,15dc <__alt_mem_onchip_memory2_0+0xfbffd5dc>
    193c:	283f2726 	beq	r5,zero,15dc <__alt_mem_onchip_memory2_0+0xfbffd5dc>
    1940:	2886703a 	and	r3,r5,r2
    1944:	5809883a 	mov	r4,r11
    1948:	183ec31e 	bne	r3,zero,1458 <__alt_mem_onchip_memory2_0+0xfbffd458>
    194c:	294b883a 	add	r5,r5,r5
    1950:	2886703a 	and	r3,r5,r2
    1954:	21000104 	addi	r4,r4,4
    1958:	183ffc26 	beq	r3,zero,194c <__alt_mem_onchip_memory2_0+0xfbffd94c>
    195c:	003ebe06 	br	1458 <__alt_mem_onchip_memory2_0+0xfbffd458>
    1960:	00c05504 	movi	r3,340
    1964:	18801236 	bltu	r3,r2,19b0 <_malloc_r+0x6f8>
    1968:	8804d3fa 	srli	r2,r17,15
    196c:	12001e04 	addi	r8,r2,120
    1970:	11c01dc4 	addi	r7,r2,119
    1974:	4209883a 	add	r4,r8,r8
    1978:	003e6d06 	br	1330 <__alt_mem_onchip_memory2_0+0xfbffd330>
    197c:	00c40004 	movi	r3,4096
    1980:	003f4606 	br	169c <__alt_mem_onchip_memory2_0+0xfbffd69c>
    1984:	00800044 	movi	r2,1
    1988:	a0800115 	stw	r2,4(r20)
    198c:	003f7406 	br	1760 <__alt_mem_onchip_memory2_0+0xfbffd760>
    1990:	1805d0ba 	srai	r2,r3,2
    1994:	01c00044 	movi	r7,1
    1998:	30c00117 	ldw	r3,4(r6)
    199c:	388e983a 	sll	r7,r7,r2
    19a0:	2805883a 	mov	r2,r5
    19a4:	38c6b03a 	or	r3,r7,r3
    19a8:	30c00115 	stw	r3,4(r6)
    19ac:	003f9b06 	br	181c <__alt_mem_onchip_memory2_0+0xfbffd81c>
    19b0:	00c15504 	movi	r3,1364
    19b4:	18801a36 	bltu	r3,r2,1a20 <_malloc_r+0x768>
    19b8:	8804d4ba 	srli	r2,r17,18
    19bc:	12001f44 	addi	r8,r2,125
    19c0:	11c01f04 	addi	r7,r2,124
    19c4:	4209883a 	add	r4,r8,r8
    19c8:	003e5906 	br	1330 <__alt_mem_onchip_memory2_0+0xfbffd330>
    19cc:	ad400404 	addi	r21,r21,16
    19d0:	003f1706 	br	1630 <__alt_mem_onchip_memory2_0+0xfbffd630>
    19d4:	00c01504 	movi	r3,84
    19d8:	18802336 	bltu	r3,r2,1a68 <_malloc_r+0x7b0>
    19dc:	3804d33a 	srli	r2,r7,12
    19e0:	11401bc4 	addi	r5,r2,111
    19e4:	10c01b84 	addi	r3,r2,110
    19e8:	294b883a 	add	r5,r5,r5
    19ec:	003f7b06 	br	17dc <__alt_mem_onchip_memory2_0+0xfbffd7dc>
    19f0:	9c000217 	ldw	r16,8(r19)
    19f4:	00bfff04 	movi	r2,-4
    19f8:	80c00117 	ldw	r3,4(r16)
    19fc:	1886703a 	and	r3,r3,r2
    1a00:	003f5306 	br	1750 <__alt_mem_onchip_memory2_0+0xfbffd750>
    1a04:	3083ffcc 	andi	r2,r6,4095
    1a08:	103f181e 	bne	r2,zero,166c <__alt_mem_onchip_memory2_0+0xfbffd66c>
    1a0c:	99000217 	ldw	r4,8(r19)
    1a10:	b545883a 	add	r2,r22,r21
    1a14:	10800054 	ori	r2,r2,1
    1a18:	20800115 	stw	r2,4(r4)
    1a1c:	003f3e06 	br	1718 <__alt_mem_onchip_memory2_0+0xfbffd718>
    1a20:	01003f84 	movi	r4,254
    1a24:	02001fc4 	movi	r8,127
    1a28:	01c01f84 	movi	r7,126
    1a2c:	003e4006 	br	1330 <__alt_mem_onchip_memory2_0+0xfbffd330>
    1a30:	00800074 	movhi	r2,1
    1a34:	1082da04 	addi	r2,r2,2920
    1a38:	15000015 	stw	r20,0(r2)
    1a3c:	003f1106 	br	1684 <__alt_mem_onchip_memory2_0+0xfbffd684>
    1a40:	00800044 	movi	r2,1
    1a44:	002b883a 	mov	r21,zero
    1a48:	003f1f06 	br	16c8 <__alt_mem_onchip_memory2_0+0xfbffd6c8>
    1a4c:	81400204 	addi	r5,r16,8
    1a50:	9009883a 	mov	r4,r18
    1a54:	0002d400 	call	2d40 <_free_r>
    1a58:	00800074 	movhi	r2,1
    1a5c:	108a2404 	addi	r2,r2,10384
    1a60:	10c00017 	ldw	r3,0(r2)
    1a64:	003f2c06 	br	1718 <__alt_mem_onchip_memory2_0+0xfbffd718>
    1a68:	00c05504 	movi	r3,340
    1a6c:	18800536 	bltu	r3,r2,1a84 <_malloc_r+0x7cc>
    1a70:	3804d3fa 	srli	r2,r7,15
    1a74:	11401e04 	addi	r5,r2,120
    1a78:	10c01dc4 	addi	r3,r2,119
    1a7c:	294b883a 	add	r5,r5,r5
    1a80:	003f5606 	br	17dc <__alt_mem_onchip_memory2_0+0xfbffd7dc>
    1a84:	00c15504 	movi	r3,1364
    1a88:	18800536 	bltu	r3,r2,1aa0 <_malloc_r+0x7e8>
    1a8c:	3804d4ba 	srli	r2,r7,18
    1a90:	11401f44 	addi	r5,r2,125
    1a94:	10c01f04 	addi	r3,r2,124
    1a98:	294b883a 	add	r5,r5,r5
    1a9c:	003f4f06 	br	17dc <__alt_mem_onchip_memory2_0+0xfbffd7dc>
    1aa0:	01403f84 	movi	r5,254
    1aa4:	00c01f84 	movi	r3,126
    1aa8:	003f4c06 	br	17dc <__alt_mem_onchip_memory2_0+0xfbffd7dc>
    1aac:	98800117 	ldw	r2,4(r19)
    1ab0:	003fa006 	br	1934 <__alt_mem_onchip_memory2_0+0xfbffd934>
    1ab4:	8808d0fa 	srli	r4,r17,3
    1ab8:	20800044 	addi	r2,r4,1
    1abc:	1085883a 	add	r2,r2,r2
    1ac0:	003e9006 	br	1504 <__alt_mem_onchip_memory2_0+0xfbffd504>

00001ac4 <memchr>:
    1ac4:	208000cc 	andi	r2,r4,3
    1ac8:	280f883a 	mov	r7,r5
    1acc:	10003426 	beq	r2,zero,1ba0 <memchr+0xdc>
    1ad0:	30bfffc4 	addi	r2,r6,-1
    1ad4:	30001a26 	beq	r6,zero,1b40 <memchr+0x7c>
    1ad8:	20c00003 	ldbu	r3,0(r4)
    1adc:	29803fcc 	andi	r6,r5,255
    1ae0:	30c0051e 	bne	r6,r3,1af8 <memchr+0x34>
    1ae4:	00001806 	br	1b48 <memchr+0x84>
    1ae8:	10001526 	beq	r2,zero,1b40 <memchr+0x7c>
    1aec:	20c00003 	ldbu	r3,0(r4)
    1af0:	10bfffc4 	addi	r2,r2,-1
    1af4:	30c01426 	beq	r6,r3,1b48 <memchr+0x84>
    1af8:	21000044 	addi	r4,r4,1
    1afc:	20c000cc 	andi	r3,r4,3
    1b00:	183ff91e 	bne	r3,zero,1ae8 <__alt_mem_onchip_memory2_0+0xfbffdae8>
    1b04:	020000c4 	movi	r8,3
    1b08:	40801136 	bltu	r8,r2,1b50 <memchr+0x8c>
    1b0c:	10000c26 	beq	r2,zero,1b40 <memchr+0x7c>
    1b10:	20c00003 	ldbu	r3,0(r4)
    1b14:	29403fcc 	andi	r5,r5,255
    1b18:	28c00b26 	beq	r5,r3,1b48 <memchr+0x84>
    1b1c:	20c00044 	addi	r3,r4,1
    1b20:	39803fcc 	andi	r6,r7,255
    1b24:	2089883a 	add	r4,r4,r2
    1b28:	00000306 	br	1b38 <memchr+0x74>
    1b2c:	18c00044 	addi	r3,r3,1
    1b30:	197fffc3 	ldbu	r5,-1(r3)
    1b34:	31400526 	beq	r6,r5,1b4c <memchr+0x88>
    1b38:	1805883a 	mov	r2,r3
    1b3c:	20fffb1e 	bne	r4,r3,1b2c <__alt_mem_onchip_memory2_0+0xfbffdb2c>
    1b40:	0005883a 	mov	r2,zero
    1b44:	f800283a 	ret
    1b48:	2005883a 	mov	r2,r4
    1b4c:	f800283a 	ret
    1b50:	28c03fcc 	andi	r3,r5,255
    1b54:	1812923a 	slli	r9,r3,8
    1b58:	02ffbff4 	movhi	r11,65279
    1b5c:	02a02074 	movhi	r10,32897
    1b60:	48d2b03a 	or	r9,r9,r3
    1b64:	4806943a 	slli	r3,r9,16
    1b68:	5affbfc4 	addi	r11,r11,-257
    1b6c:	52a02004 	addi	r10,r10,-32640
    1b70:	48d2b03a 	or	r9,r9,r3
    1b74:	20c00017 	ldw	r3,0(r4)
    1b78:	48c6f03a 	xor	r3,r9,r3
    1b7c:	1acd883a 	add	r6,r3,r11
    1b80:	00c6303a 	nor	r3,zero,r3
    1b84:	30c6703a 	and	r3,r6,r3
    1b88:	1a86703a 	and	r3,r3,r10
    1b8c:	183fe01e 	bne	r3,zero,1b10 <__alt_mem_onchip_memory2_0+0xfbffdb10>
    1b90:	10bfff04 	addi	r2,r2,-4
    1b94:	21000104 	addi	r4,r4,4
    1b98:	40bff636 	bltu	r8,r2,1b74 <__alt_mem_onchip_memory2_0+0xfbffdb74>
    1b9c:	003fdb06 	br	1b0c <__alt_mem_onchip_memory2_0+0xfbffdb0c>
    1ba0:	3005883a 	mov	r2,r6
    1ba4:	003fd706 	br	1b04 <__alt_mem_onchip_memory2_0+0xfbffdb04>

00001ba8 <memcpy>:
    1ba8:	defffd04 	addi	sp,sp,-12
    1bac:	dfc00215 	stw	ra,8(sp)
    1bb0:	dc400115 	stw	r17,4(sp)
    1bb4:	dc000015 	stw	r16,0(sp)
    1bb8:	00c003c4 	movi	r3,15
    1bbc:	2005883a 	mov	r2,r4
    1bc0:	1980452e 	bgeu	r3,r6,1cd8 <memcpy+0x130>
    1bc4:	2906b03a 	or	r3,r5,r4
    1bc8:	18c000cc 	andi	r3,r3,3
    1bcc:	1800441e 	bne	r3,zero,1ce0 <memcpy+0x138>
    1bd0:	347ffc04 	addi	r17,r6,-16
    1bd4:	8822d13a 	srli	r17,r17,4
    1bd8:	28c00104 	addi	r3,r5,4
    1bdc:	23400104 	addi	r13,r4,4
    1be0:	8820913a 	slli	r16,r17,4
    1be4:	2b000204 	addi	r12,r5,8
    1be8:	22c00204 	addi	r11,r4,8
    1bec:	84000504 	addi	r16,r16,20
    1bf0:	2a800304 	addi	r10,r5,12
    1bf4:	22400304 	addi	r9,r4,12
    1bf8:	2c21883a 	add	r16,r5,r16
    1bfc:	2811883a 	mov	r8,r5
    1c00:	200f883a 	mov	r7,r4
    1c04:	41000017 	ldw	r4,0(r8)
    1c08:	1fc00017 	ldw	ra,0(r3)
    1c0c:	63c00017 	ldw	r15,0(r12)
    1c10:	39000015 	stw	r4,0(r7)
    1c14:	53800017 	ldw	r14,0(r10)
    1c18:	6fc00015 	stw	ra,0(r13)
    1c1c:	5bc00015 	stw	r15,0(r11)
    1c20:	4b800015 	stw	r14,0(r9)
    1c24:	18c00404 	addi	r3,r3,16
    1c28:	39c00404 	addi	r7,r7,16
    1c2c:	42000404 	addi	r8,r8,16
    1c30:	6b400404 	addi	r13,r13,16
    1c34:	63000404 	addi	r12,r12,16
    1c38:	5ac00404 	addi	r11,r11,16
    1c3c:	52800404 	addi	r10,r10,16
    1c40:	4a400404 	addi	r9,r9,16
    1c44:	1c3fef1e 	bne	r3,r16,1c04 <__alt_mem_onchip_memory2_0+0xfbffdc04>
    1c48:	89c00044 	addi	r7,r17,1
    1c4c:	380e913a 	slli	r7,r7,4
    1c50:	310003cc 	andi	r4,r6,15
    1c54:	02c000c4 	movi	r11,3
    1c58:	11c7883a 	add	r3,r2,r7
    1c5c:	29cb883a 	add	r5,r5,r7
    1c60:	5900212e 	bgeu	r11,r4,1ce8 <memcpy+0x140>
    1c64:	1813883a 	mov	r9,r3
    1c68:	2811883a 	mov	r8,r5
    1c6c:	200f883a 	mov	r7,r4
    1c70:	42800017 	ldw	r10,0(r8)
    1c74:	4a400104 	addi	r9,r9,4
    1c78:	39ffff04 	addi	r7,r7,-4
    1c7c:	4abfff15 	stw	r10,-4(r9)
    1c80:	42000104 	addi	r8,r8,4
    1c84:	59fffa36 	bltu	r11,r7,1c70 <__alt_mem_onchip_memory2_0+0xfbffdc70>
    1c88:	213fff04 	addi	r4,r4,-4
    1c8c:	2008d0ba 	srli	r4,r4,2
    1c90:	318000cc 	andi	r6,r6,3
    1c94:	21000044 	addi	r4,r4,1
    1c98:	2109883a 	add	r4,r4,r4
    1c9c:	2109883a 	add	r4,r4,r4
    1ca0:	1907883a 	add	r3,r3,r4
    1ca4:	290b883a 	add	r5,r5,r4
    1ca8:	30000626 	beq	r6,zero,1cc4 <memcpy+0x11c>
    1cac:	198d883a 	add	r6,r3,r6
    1cb0:	29c00003 	ldbu	r7,0(r5)
    1cb4:	18c00044 	addi	r3,r3,1
    1cb8:	29400044 	addi	r5,r5,1
    1cbc:	19ffffc5 	stb	r7,-1(r3)
    1cc0:	19bffb1e 	bne	r3,r6,1cb0 <__alt_mem_onchip_memory2_0+0xfbffdcb0>
    1cc4:	dfc00217 	ldw	ra,8(sp)
    1cc8:	dc400117 	ldw	r17,4(sp)
    1ccc:	dc000017 	ldw	r16,0(sp)
    1cd0:	dec00304 	addi	sp,sp,12
    1cd4:	f800283a 	ret
    1cd8:	2007883a 	mov	r3,r4
    1cdc:	003ff206 	br	1ca8 <__alt_mem_onchip_memory2_0+0xfbffdca8>
    1ce0:	2007883a 	mov	r3,r4
    1ce4:	003ff106 	br	1cac <__alt_mem_onchip_memory2_0+0xfbffdcac>
    1ce8:	200d883a 	mov	r6,r4
    1cec:	003fee06 	br	1ca8 <__alt_mem_onchip_memory2_0+0xfbffdca8>

00001cf0 <memmove>:
    1cf0:	2005883a 	mov	r2,r4
    1cf4:	29000b2e 	bgeu	r5,r4,1d24 <memmove+0x34>
    1cf8:	298f883a 	add	r7,r5,r6
    1cfc:	21c0092e 	bgeu	r4,r7,1d24 <memmove+0x34>
    1d00:	2187883a 	add	r3,r4,r6
    1d04:	198bc83a 	sub	r5,r3,r6
    1d08:	30004826 	beq	r6,zero,1e2c <memmove+0x13c>
    1d0c:	39ffffc4 	addi	r7,r7,-1
    1d10:	39000003 	ldbu	r4,0(r7)
    1d14:	18ffffc4 	addi	r3,r3,-1
    1d18:	19000005 	stb	r4,0(r3)
    1d1c:	28fffb1e 	bne	r5,r3,1d0c <__alt_mem_onchip_memory2_0+0xfbffdd0c>
    1d20:	f800283a 	ret
    1d24:	00c003c4 	movi	r3,15
    1d28:	1980412e 	bgeu	r3,r6,1e30 <memmove+0x140>
    1d2c:	2886b03a 	or	r3,r5,r2
    1d30:	18c000cc 	andi	r3,r3,3
    1d34:	1800401e 	bne	r3,zero,1e38 <memmove+0x148>
    1d38:	33fffc04 	addi	r15,r6,-16
    1d3c:	781ed13a 	srli	r15,r15,4
    1d40:	28c00104 	addi	r3,r5,4
    1d44:	13400104 	addi	r13,r2,4
    1d48:	781c913a 	slli	r14,r15,4
    1d4c:	2b000204 	addi	r12,r5,8
    1d50:	12c00204 	addi	r11,r2,8
    1d54:	73800504 	addi	r14,r14,20
    1d58:	2a800304 	addi	r10,r5,12
    1d5c:	12400304 	addi	r9,r2,12
    1d60:	2b9d883a 	add	r14,r5,r14
    1d64:	2811883a 	mov	r8,r5
    1d68:	100f883a 	mov	r7,r2
    1d6c:	41000017 	ldw	r4,0(r8)
    1d70:	39c00404 	addi	r7,r7,16
    1d74:	18c00404 	addi	r3,r3,16
    1d78:	393ffc15 	stw	r4,-16(r7)
    1d7c:	193ffc17 	ldw	r4,-16(r3)
    1d80:	6b400404 	addi	r13,r13,16
    1d84:	5ac00404 	addi	r11,r11,16
    1d88:	693ffc15 	stw	r4,-16(r13)
    1d8c:	61000017 	ldw	r4,0(r12)
    1d90:	4a400404 	addi	r9,r9,16
    1d94:	42000404 	addi	r8,r8,16
    1d98:	593ffc15 	stw	r4,-16(r11)
    1d9c:	51000017 	ldw	r4,0(r10)
    1da0:	63000404 	addi	r12,r12,16
    1da4:	52800404 	addi	r10,r10,16
    1da8:	493ffc15 	stw	r4,-16(r9)
    1dac:	1bbfef1e 	bne	r3,r14,1d6c <__alt_mem_onchip_memory2_0+0xfbffdd6c>
    1db0:	79000044 	addi	r4,r15,1
    1db4:	2008913a 	slli	r4,r4,4
    1db8:	328003cc 	andi	r10,r6,15
    1dbc:	02c000c4 	movi	r11,3
    1dc0:	1107883a 	add	r3,r2,r4
    1dc4:	290b883a 	add	r5,r5,r4
    1dc8:	5a801e2e 	bgeu	r11,r10,1e44 <memmove+0x154>
    1dcc:	1813883a 	mov	r9,r3
    1dd0:	2811883a 	mov	r8,r5
    1dd4:	500f883a 	mov	r7,r10
    1dd8:	41000017 	ldw	r4,0(r8)
    1ddc:	4a400104 	addi	r9,r9,4
    1de0:	39ffff04 	addi	r7,r7,-4
    1de4:	493fff15 	stw	r4,-4(r9)
    1de8:	42000104 	addi	r8,r8,4
    1dec:	59fffa36 	bltu	r11,r7,1dd8 <__alt_mem_onchip_memory2_0+0xfbffddd8>
    1df0:	513fff04 	addi	r4,r10,-4
    1df4:	2008d0ba 	srli	r4,r4,2
    1df8:	318000cc 	andi	r6,r6,3
    1dfc:	21000044 	addi	r4,r4,1
    1e00:	2109883a 	add	r4,r4,r4
    1e04:	2109883a 	add	r4,r4,r4
    1e08:	1907883a 	add	r3,r3,r4
    1e0c:	290b883a 	add	r5,r5,r4
    1e10:	30000b26 	beq	r6,zero,1e40 <memmove+0x150>
    1e14:	198d883a 	add	r6,r3,r6
    1e18:	29c00003 	ldbu	r7,0(r5)
    1e1c:	18c00044 	addi	r3,r3,1
    1e20:	29400044 	addi	r5,r5,1
    1e24:	19ffffc5 	stb	r7,-1(r3)
    1e28:	19bffb1e 	bne	r3,r6,1e18 <__alt_mem_onchip_memory2_0+0xfbffde18>
    1e2c:	f800283a 	ret
    1e30:	1007883a 	mov	r3,r2
    1e34:	003ff606 	br	1e10 <__alt_mem_onchip_memory2_0+0xfbffde10>
    1e38:	1007883a 	mov	r3,r2
    1e3c:	003ff506 	br	1e14 <__alt_mem_onchip_memory2_0+0xfbffde14>
    1e40:	f800283a 	ret
    1e44:	500d883a 	mov	r6,r10
    1e48:	003ff106 	br	1e10 <__alt_mem_onchip_memory2_0+0xfbffde10>

00001e4c <memset>:
    1e4c:	20c000cc 	andi	r3,r4,3
    1e50:	2005883a 	mov	r2,r4
    1e54:	18004426 	beq	r3,zero,1f68 <memset+0x11c>
    1e58:	31ffffc4 	addi	r7,r6,-1
    1e5c:	30004026 	beq	r6,zero,1f60 <memset+0x114>
    1e60:	2813883a 	mov	r9,r5
    1e64:	200d883a 	mov	r6,r4
    1e68:	2007883a 	mov	r3,r4
    1e6c:	00000406 	br	1e80 <memset+0x34>
    1e70:	3a3fffc4 	addi	r8,r7,-1
    1e74:	31800044 	addi	r6,r6,1
    1e78:	38003926 	beq	r7,zero,1f60 <memset+0x114>
    1e7c:	400f883a 	mov	r7,r8
    1e80:	18c00044 	addi	r3,r3,1
    1e84:	32400005 	stb	r9,0(r6)
    1e88:	1a0000cc 	andi	r8,r3,3
    1e8c:	403ff81e 	bne	r8,zero,1e70 <__alt_mem_onchip_memory2_0+0xfbffde70>
    1e90:	010000c4 	movi	r4,3
    1e94:	21c02d2e 	bgeu	r4,r7,1f4c <memset+0x100>
    1e98:	29003fcc 	andi	r4,r5,255
    1e9c:	200c923a 	slli	r6,r4,8
    1ea0:	3108b03a 	or	r4,r6,r4
    1ea4:	200c943a 	slli	r6,r4,16
    1ea8:	218cb03a 	or	r6,r4,r6
    1eac:	010003c4 	movi	r4,15
    1eb0:	21c0182e 	bgeu	r4,r7,1f14 <memset+0xc8>
    1eb4:	3b3ffc04 	addi	r12,r7,-16
    1eb8:	6018d13a 	srli	r12,r12,4
    1ebc:	1a000104 	addi	r8,r3,4
    1ec0:	1ac00204 	addi	r11,r3,8
    1ec4:	6008913a 	slli	r4,r12,4
    1ec8:	1a800304 	addi	r10,r3,12
    1ecc:	1813883a 	mov	r9,r3
    1ed0:	21000504 	addi	r4,r4,20
    1ed4:	1909883a 	add	r4,r3,r4
    1ed8:	49800015 	stw	r6,0(r9)
    1edc:	41800015 	stw	r6,0(r8)
    1ee0:	59800015 	stw	r6,0(r11)
    1ee4:	51800015 	stw	r6,0(r10)
    1ee8:	42000404 	addi	r8,r8,16
    1eec:	4a400404 	addi	r9,r9,16
    1ef0:	5ac00404 	addi	r11,r11,16
    1ef4:	52800404 	addi	r10,r10,16
    1ef8:	413ff71e 	bne	r8,r4,1ed8 <__alt_mem_onchip_memory2_0+0xfbffded8>
    1efc:	63000044 	addi	r12,r12,1
    1f00:	6018913a 	slli	r12,r12,4
    1f04:	39c003cc 	andi	r7,r7,15
    1f08:	010000c4 	movi	r4,3
    1f0c:	1b07883a 	add	r3,r3,r12
    1f10:	21c00e2e 	bgeu	r4,r7,1f4c <memset+0x100>
    1f14:	1813883a 	mov	r9,r3
    1f18:	3811883a 	mov	r8,r7
    1f1c:	010000c4 	movi	r4,3
    1f20:	49800015 	stw	r6,0(r9)
    1f24:	423fff04 	addi	r8,r8,-4
    1f28:	4a400104 	addi	r9,r9,4
    1f2c:	223ffc36 	bltu	r4,r8,1f20 <__alt_mem_onchip_memory2_0+0xfbffdf20>
    1f30:	393fff04 	addi	r4,r7,-4
    1f34:	2008d0ba 	srli	r4,r4,2
    1f38:	39c000cc 	andi	r7,r7,3
    1f3c:	21000044 	addi	r4,r4,1
    1f40:	2109883a 	add	r4,r4,r4
    1f44:	2109883a 	add	r4,r4,r4
    1f48:	1907883a 	add	r3,r3,r4
    1f4c:	38000526 	beq	r7,zero,1f64 <memset+0x118>
    1f50:	19cf883a 	add	r7,r3,r7
    1f54:	19400005 	stb	r5,0(r3)
    1f58:	18c00044 	addi	r3,r3,1
    1f5c:	38fffd1e 	bne	r7,r3,1f54 <__alt_mem_onchip_memory2_0+0xfbffdf54>
    1f60:	f800283a 	ret
    1f64:	f800283a 	ret
    1f68:	2007883a 	mov	r3,r4
    1f6c:	300f883a 	mov	r7,r6
    1f70:	003fc706 	br	1e90 <__alt_mem_onchip_memory2_0+0xfbffde90>

00001f74 <_realloc_r>:
    1f74:	defff604 	addi	sp,sp,-40
    1f78:	dc800215 	stw	r18,8(sp)
    1f7c:	dfc00915 	stw	ra,36(sp)
    1f80:	df000815 	stw	fp,32(sp)
    1f84:	ddc00715 	stw	r23,28(sp)
    1f88:	dd800615 	stw	r22,24(sp)
    1f8c:	dd400515 	stw	r21,20(sp)
    1f90:	dd000415 	stw	r20,16(sp)
    1f94:	dcc00315 	stw	r19,12(sp)
    1f98:	dc400115 	stw	r17,4(sp)
    1f9c:	dc000015 	stw	r16,0(sp)
    1fa0:	3025883a 	mov	r18,r6
    1fa4:	2800b726 	beq	r5,zero,2284 <_realloc_r+0x310>
    1fa8:	282b883a 	mov	r21,r5
    1fac:	2029883a 	mov	r20,r4
    1fb0:	0003e540 	call	3e54 <__malloc_lock>
    1fb4:	a8bfff17 	ldw	r2,-4(r21)
    1fb8:	043fff04 	movi	r16,-4
    1fbc:	90c002c4 	addi	r3,r18,11
    1fc0:	01000584 	movi	r4,22
    1fc4:	acfffe04 	addi	r19,r21,-8
    1fc8:	1420703a 	and	r16,r2,r16
    1fcc:	20c0332e 	bgeu	r4,r3,209c <_realloc_r+0x128>
    1fd0:	047ffe04 	movi	r17,-8
    1fd4:	1c62703a 	and	r17,r3,r17
    1fd8:	8807883a 	mov	r3,r17
    1fdc:	88005816 	blt	r17,zero,2140 <_realloc_r+0x1cc>
    1fe0:	8c805736 	bltu	r17,r18,2140 <_realloc_r+0x1cc>
    1fe4:	80c0300e 	bge	r16,r3,20a8 <_realloc_r+0x134>
    1fe8:	07000074 	movhi	fp,1
    1fec:	e73d1604 	addi	fp,fp,-2984
    1ff0:	e1c00217 	ldw	r7,8(fp)
    1ff4:	9c09883a 	add	r4,r19,r16
    1ff8:	22000117 	ldw	r8,4(r4)
    1ffc:	21c06326 	beq	r4,r7,218c <_realloc_r+0x218>
    2000:	017fff84 	movi	r5,-2
    2004:	414a703a 	and	r5,r8,r5
    2008:	214b883a 	add	r5,r4,r5
    200c:	29800117 	ldw	r6,4(r5)
    2010:	3180004c 	andi	r6,r6,1
    2014:	30003f26 	beq	r6,zero,2114 <_realloc_r+0x1a0>
    2018:	1080004c 	andi	r2,r2,1
    201c:	10008326 	beq	r2,zero,222c <_realloc_r+0x2b8>
    2020:	900b883a 	mov	r5,r18
    2024:	a009883a 	mov	r4,r20
    2028:	00012b80 	call	12b8 <_malloc_r>
    202c:	1025883a 	mov	r18,r2
    2030:	10011e26 	beq	r2,zero,24ac <_realloc_r+0x538>
    2034:	a93fff17 	ldw	r4,-4(r21)
    2038:	10fffe04 	addi	r3,r2,-8
    203c:	00bfff84 	movi	r2,-2
    2040:	2084703a 	and	r2,r4,r2
    2044:	9885883a 	add	r2,r19,r2
    2048:	1880ee26 	beq	r3,r2,2404 <_realloc_r+0x490>
    204c:	81bfff04 	addi	r6,r16,-4
    2050:	00800904 	movi	r2,36
    2054:	1180b836 	bltu	r2,r6,2338 <_realloc_r+0x3c4>
    2058:	00c004c4 	movi	r3,19
    205c:	19809636 	bltu	r3,r6,22b8 <_realloc_r+0x344>
    2060:	9005883a 	mov	r2,r18
    2064:	a807883a 	mov	r3,r21
    2068:	19000017 	ldw	r4,0(r3)
    206c:	11000015 	stw	r4,0(r2)
    2070:	19000117 	ldw	r4,4(r3)
    2074:	11000115 	stw	r4,4(r2)
    2078:	18c00217 	ldw	r3,8(r3)
    207c:	10c00215 	stw	r3,8(r2)
    2080:	a80b883a 	mov	r5,r21
    2084:	a009883a 	mov	r4,r20
    2088:	0002d400 	call	2d40 <_free_r>
    208c:	a009883a 	mov	r4,r20
    2090:	0003f740 	call	3f74 <__malloc_unlock>
    2094:	9005883a 	mov	r2,r18
    2098:	00001206 	br	20e4 <_realloc_r+0x170>
    209c:	00c00404 	movi	r3,16
    20a0:	1823883a 	mov	r17,r3
    20a4:	003fce06 	br	1fe0 <__alt_mem_onchip_memory2_0+0xfbffdfe0>
    20a8:	a825883a 	mov	r18,r21
    20ac:	8445c83a 	sub	r2,r16,r17
    20b0:	00c003c4 	movi	r3,15
    20b4:	18802636 	bltu	r3,r2,2150 <_realloc_r+0x1dc>
    20b8:	99800117 	ldw	r6,4(r19)
    20bc:	9c07883a 	add	r3,r19,r16
    20c0:	3180004c 	andi	r6,r6,1
    20c4:	3420b03a 	or	r16,r6,r16
    20c8:	9c000115 	stw	r16,4(r19)
    20cc:	18800117 	ldw	r2,4(r3)
    20d0:	10800054 	ori	r2,r2,1
    20d4:	18800115 	stw	r2,4(r3)
    20d8:	a009883a 	mov	r4,r20
    20dc:	0003f740 	call	3f74 <__malloc_unlock>
    20e0:	9005883a 	mov	r2,r18
    20e4:	dfc00917 	ldw	ra,36(sp)
    20e8:	df000817 	ldw	fp,32(sp)
    20ec:	ddc00717 	ldw	r23,28(sp)
    20f0:	dd800617 	ldw	r22,24(sp)
    20f4:	dd400517 	ldw	r21,20(sp)
    20f8:	dd000417 	ldw	r20,16(sp)
    20fc:	dcc00317 	ldw	r19,12(sp)
    2100:	dc800217 	ldw	r18,8(sp)
    2104:	dc400117 	ldw	r17,4(sp)
    2108:	dc000017 	ldw	r16,0(sp)
    210c:	dec00a04 	addi	sp,sp,40
    2110:	f800283a 	ret
    2114:	017fff04 	movi	r5,-4
    2118:	414a703a 	and	r5,r8,r5
    211c:	814d883a 	add	r6,r16,r5
    2120:	30c01f16 	blt	r6,r3,21a0 <_realloc_r+0x22c>
    2124:	20800317 	ldw	r2,12(r4)
    2128:	20c00217 	ldw	r3,8(r4)
    212c:	a825883a 	mov	r18,r21
    2130:	3021883a 	mov	r16,r6
    2134:	18800315 	stw	r2,12(r3)
    2138:	10c00215 	stw	r3,8(r2)
    213c:	003fdb06 	br	20ac <__alt_mem_onchip_memory2_0+0xfbffe0ac>
    2140:	00800304 	movi	r2,12
    2144:	a0800015 	stw	r2,0(r20)
    2148:	0005883a 	mov	r2,zero
    214c:	003fe506 	br	20e4 <__alt_mem_onchip_memory2_0+0xfbffe0e4>
    2150:	98c00117 	ldw	r3,4(r19)
    2154:	9c4b883a 	add	r5,r19,r17
    2158:	11000054 	ori	r4,r2,1
    215c:	18c0004c 	andi	r3,r3,1
    2160:	1c62b03a 	or	r17,r3,r17
    2164:	9c400115 	stw	r17,4(r19)
    2168:	29000115 	stw	r4,4(r5)
    216c:	2885883a 	add	r2,r5,r2
    2170:	10c00117 	ldw	r3,4(r2)
    2174:	29400204 	addi	r5,r5,8
    2178:	a009883a 	mov	r4,r20
    217c:	18c00054 	ori	r3,r3,1
    2180:	10c00115 	stw	r3,4(r2)
    2184:	0002d400 	call	2d40 <_free_r>
    2188:	003fd306 	br	20d8 <__alt_mem_onchip_memory2_0+0xfbffe0d8>
    218c:	017fff04 	movi	r5,-4
    2190:	414a703a 	and	r5,r8,r5
    2194:	89800404 	addi	r6,r17,16
    2198:	8151883a 	add	r8,r16,r5
    219c:	4180590e 	bge	r8,r6,2304 <_realloc_r+0x390>
    21a0:	1080004c 	andi	r2,r2,1
    21a4:	103f9e1e 	bne	r2,zero,2020 <__alt_mem_onchip_memory2_0+0xfbffe020>
    21a8:	adbffe17 	ldw	r22,-8(r21)
    21ac:	00bfff04 	movi	r2,-4
    21b0:	9dadc83a 	sub	r22,r19,r22
    21b4:	b1800117 	ldw	r6,4(r22)
    21b8:	3084703a 	and	r2,r6,r2
    21bc:	20002026 	beq	r4,zero,2240 <_realloc_r+0x2cc>
    21c0:	80af883a 	add	r23,r16,r2
    21c4:	b96f883a 	add	r23,r23,r5
    21c8:	21c05f26 	beq	r4,r7,2348 <_realloc_r+0x3d4>
    21cc:	b8c01c16 	blt	r23,r3,2240 <_realloc_r+0x2cc>
    21d0:	20800317 	ldw	r2,12(r4)
    21d4:	20c00217 	ldw	r3,8(r4)
    21d8:	81bfff04 	addi	r6,r16,-4
    21dc:	01000904 	movi	r4,36
    21e0:	18800315 	stw	r2,12(r3)
    21e4:	10c00215 	stw	r3,8(r2)
    21e8:	b0c00217 	ldw	r3,8(r22)
    21ec:	b0800317 	ldw	r2,12(r22)
    21f0:	b4800204 	addi	r18,r22,8
    21f4:	18800315 	stw	r2,12(r3)
    21f8:	10c00215 	stw	r3,8(r2)
    21fc:	21801b36 	bltu	r4,r6,226c <_realloc_r+0x2f8>
    2200:	008004c4 	movi	r2,19
    2204:	1180352e 	bgeu	r2,r6,22dc <_realloc_r+0x368>
    2208:	a8800017 	ldw	r2,0(r21)
    220c:	b0800215 	stw	r2,8(r22)
    2210:	a8800117 	ldw	r2,4(r21)
    2214:	b0800315 	stw	r2,12(r22)
    2218:	008006c4 	movi	r2,27
    221c:	11807f36 	bltu	r2,r6,241c <_realloc_r+0x4a8>
    2220:	b0800404 	addi	r2,r22,16
    2224:	ad400204 	addi	r21,r21,8
    2228:	00002d06 	br	22e0 <_realloc_r+0x36c>
    222c:	adbffe17 	ldw	r22,-8(r21)
    2230:	00bfff04 	movi	r2,-4
    2234:	9dadc83a 	sub	r22,r19,r22
    2238:	b1000117 	ldw	r4,4(r22)
    223c:	2084703a 	and	r2,r4,r2
    2240:	b03f7726 	beq	r22,zero,2020 <__alt_mem_onchip_memory2_0+0xfbffe020>
    2244:	80af883a 	add	r23,r16,r2
    2248:	b8ff7516 	blt	r23,r3,2020 <__alt_mem_onchip_memory2_0+0xfbffe020>
    224c:	b0800317 	ldw	r2,12(r22)
    2250:	b0c00217 	ldw	r3,8(r22)
    2254:	81bfff04 	addi	r6,r16,-4
    2258:	01000904 	movi	r4,36
    225c:	18800315 	stw	r2,12(r3)
    2260:	10c00215 	stw	r3,8(r2)
    2264:	b4800204 	addi	r18,r22,8
    2268:	21bfe52e 	bgeu	r4,r6,2200 <__alt_mem_onchip_memory2_0+0xfbffe200>
    226c:	a80b883a 	mov	r5,r21
    2270:	9009883a 	mov	r4,r18
    2274:	0001cf00 	call	1cf0 <memmove>
    2278:	b821883a 	mov	r16,r23
    227c:	b027883a 	mov	r19,r22
    2280:	003f8a06 	br	20ac <__alt_mem_onchip_memory2_0+0xfbffe0ac>
    2284:	300b883a 	mov	r5,r6
    2288:	dfc00917 	ldw	ra,36(sp)
    228c:	df000817 	ldw	fp,32(sp)
    2290:	ddc00717 	ldw	r23,28(sp)
    2294:	dd800617 	ldw	r22,24(sp)
    2298:	dd400517 	ldw	r21,20(sp)
    229c:	dd000417 	ldw	r20,16(sp)
    22a0:	dcc00317 	ldw	r19,12(sp)
    22a4:	dc800217 	ldw	r18,8(sp)
    22a8:	dc400117 	ldw	r17,4(sp)
    22ac:	dc000017 	ldw	r16,0(sp)
    22b0:	dec00a04 	addi	sp,sp,40
    22b4:	00012b81 	jmpi	12b8 <_malloc_r>
    22b8:	a8c00017 	ldw	r3,0(r21)
    22bc:	90c00015 	stw	r3,0(r18)
    22c0:	a8c00117 	ldw	r3,4(r21)
    22c4:	90c00115 	stw	r3,4(r18)
    22c8:	00c006c4 	movi	r3,27
    22cc:	19804536 	bltu	r3,r6,23e4 <_realloc_r+0x470>
    22d0:	90800204 	addi	r2,r18,8
    22d4:	a8c00204 	addi	r3,r21,8
    22d8:	003f6306 	br	2068 <__alt_mem_onchip_memory2_0+0xfbffe068>
    22dc:	9005883a 	mov	r2,r18
    22e0:	a8c00017 	ldw	r3,0(r21)
    22e4:	b821883a 	mov	r16,r23
    22e8:	b027883a 	mov	r19,r22
    22ec:	10c00015 	stw	r3,0(r2)
    22f0:	a8c00117 	ldw	r3,4(r21)
    22f4:	10c00115 	stw	r3,4(r2)
    22f8:	a8c00217 	ldw	r3,8(r21)
    22fc:	10c00215 	stw	r3,8(r2)
    2300:	003f6a06 	br	20ac <__alt_mem_onchip_memory2_0+0xfbffe0ac>
    2304:	9c67883a 	add	r19,r19,r17
    2308:	4445c83a 	sub	r2,r8,r17
    230c:	e4c00215 	stw	r19,8(fp)
    2310:	10800054 	ori	r2,r2,1
    2314:	98800115 	stw	r2,4(r19)
    2318:	a8bfff17 	ldw	r2,-4(r21)
    231c:	a009883a 	mov	r4,r20
    2320:	1080004c 	andi	r2,r2,1
    2324:	1462b03a 	or	r17,r2,r17
    2328:	ac7fff15 	stw	r17,-4(r21)
    232c:	0003f740 	call	3f74 <__malloc_unlock>
    2330:	a805883a 	mov	r2,r21
    2334:	003f6b06 	br	20e4 <__alt_mem_onchip_memory2_0+0xfbffe0e4>
    2338:	a80b883a 	mov	r5,r21
    233c:	9009883a 	mov	r4,r18
    2340:	0001cf00 	call	1cf0 <memmove>
    2344:	003f4e06 	br	2080 <__alt_mem_onchip_memory2_0+0xfbffe080>
    2348:	89000404 	addi	r4,r17,16
    234c:	b93fbc16 	blt	r23,r4,2240 <__alt_mem_onchip_memory2_0+0xfbffe240>
    2350:	b0800317 	ldw	r2,12(r22)
    2354:	b0c00217 	ldw	r3,8(r22)
    2358:	81bfff04 	addi	r6,r16,-4
    235c:	01000904 	movi	r4,36
    2360:	18800315 	stw	r2,12(r3)
    2364:	10c00215 	stw	r3,8(r2)
    2368:	b4800204 	addi	r18,r22,8
    236c:	21804336 	bltu	r4,r6,247c <_realloc_r+0x508>
    2370:	008004c4 	movi	r2,19
    2374:	11803f2e 	bgeu	r2,r6,2474 <_realloc_r+0x500>
    2378:	a8800017 	ldw	r2,0(r21)
    237c:	b0800215 	stw	r2,8(r22)
    2380:	a8800117 	ldw	r2,4(r21)
    2384:	b0800315 	stw	r2,12(r22)
    2388:	008006c4 	movi	r2,27
    238c:	11803f36 	bltu	r2,r6,248c <_realloc_r+0x518>
    2390:	b0800404 	addi	r2,r22,16
    2394:	ad400204 	addi	r21,r21,8
    2398:	a8c00017 	ldw	r3,0(r21)
    239c:	10c00015 	stw	r3,0(r2)
    23a0:	a8c00117 	ldw	r3,4(r21)
    23a4:	10c00115 	stw	r3,4(r2)
    23a8:	a8c00217 	ldw	r3,8(r21)
    23ac:	10c00215 	stw	r3,8(r2)
    23b0:	b447883a 	add	r3,r22,r17
    23b4:	bc45c83a 	sub	r2,r23,r17
    23b8:	e0c00215 	stw	r3,8(fp)
    23bc:	10800054 	ori	r2,r2,1
    23c0:	18800115 	stw	r2,4(r3)
    23c4:	b0800117 	ldw	r2,4(r22)
    23c8:	a009883a 	mov	r4,r20
    23cc:	1080004c 	andi	r2,r2,1
    23d0:	1462b03a 	or	r17,r2,r17
    23d4:	b4400115 	stw	r17,4(r22)
    23d8:	0003f740 	call	3f74 <__malloc_unlock>
    23dc:	9005883a 	mov	r2,r18
    23e0:	003f4006 	br	20e4 <__alt_mem_onchip_memory2_0+0xfbffe0e4>
    23e4:	a8c00217 	ldw	r3,8(r21)
    23e8:	90c00215 	stw	r3,8(r18)
    23ec:	a8c00317 	ldw	r3,12(r21)
    23f0:	90c00315 	stw	r3,12(r18)
    23f4:	30801126 	beq	r6,r2,243c <_realloc_r+0x4c8>
    23f8:	90800404 	addi	r2,r18,16
    23fc:	a8c00404 	addi	r3,r21,16
    2400:	003f1906 	br	2068 <__alt_mem_onchip_memory2_0+0xfbffe068>
    2404:	90ffff17 	ldw	r3,-4(r18)
    2408:	00bfff04 	movi	r2,-4
    240c:	a825883a 	mov	r18,r21
    2410:	1884703a 	and	r2,r3,r2
    2414:	80a1883a 	add	r16,r16,r2
    2418:	003f2406 	br	20ac <__alt_mem_onchip_memory2_0+0xfbffe0ac>
    241c:	a8800217 	ldw	r2,8(r21)
    2420:	b0800415 	stw	r2,16(r22)
    2424:	a8800317 	ldw	r2,12(r21)
    2428:	b0800515 	stw	r2,20(r22)
    242c:	31000a26 	beq	r6,r4,2458 <_realloc_r+0x4e4>
    2430:	b0800604 	addi	r2,r22,24
    2434:	ad400404 	addi	r21,r21,16
    2438:	003fa906 	br	22e0 <__alt_mem_onchip_memory2_0+0xfbffe2e0>
    243c:	a9000417 	ldw	r4,16(r21)
    2440:	90800604 	addi	r2,r18,24
    2444:	a8c00604 	addi	r3,r21,24
    2448:	91000415 	stw	r4,16(r18)
    244c:	a9000517 	ldw	r4,20(r21)
    2450:	91000515 	stw	r4,20(r18)
    2454:	003f0406 	br	2068 <__alt_mem_onchip_memory2_0+0xfbffe068>
    2458:	a8c00417 	ldw	r3,16(r21)
    245c:	ad400604 	addi	r21,r21,24
    2460:	b0800804 	addi	r2,r22,32
    2464:	b0c00615 	stw	r3,24(r22)
    2468:	a8ffff17 	ldw	r3,-4(r21)
    246c:	b0c00715 	stw	r3,28(r22)
    2470:	003f9b06 	br	22e0 <__alt_mem_onchip_memory2_0+0xfbffe2e0>
    2474:	9005883a 	mov	r2,r18
    2478:	003fc706 	br	2398 <__alt_mem_onchip_memory2_0+0xfbffe398>
    247c:	a80b883a 	mov	r5,r21
    2480:	9009883a 	mov	r4,r18
    2484:	0001cf00 	call	1cf0 <memmove>
    2488:	003fc906 	br	23b0 <__alt_mem_onchip_memory2_0+0xfbffe3b0>
    248c:	a8800217 	ldw	r2,8(r21)
    2490:	b0800415 	stw	r2,16(r22)
    2494:	a8800317 	ldw	r2,12(r21)
    2498:	b0800515 	stw	r2,20(r22)
    249c:	31000726 	beq	r6,r4,24bc <_realloc_r+0x548>
    24a0:	b0800604 	addi	r2,r22,24
    24a4:	ad400404 	addi	r21,r21,16
    24a8:	003fbb06 	br	2398 <__alt_mem_onchip_memory2_0+0xfbffe398>
    24ac:	a009883a 	mov	r4,r20
    24b0:	0003f740 	call	3f74 <__malloc_unlock>
    24b4:	0005883a 	mov	r2,zero
    24b8:	003f0a06 	br	20e4 <__alt_mem_onchip_memory2_0+0xfbffe0e4>
    24bc:	a8c00417 	ldw	r3,16(r21)
    24c0:	ad400604 	addi	r21,r21,24
    24c4:	b0800804 	addi	r2,r22,32
    24c8:	b0c00615 	stw	r3,24(r22)
    24cc:	a8ffff17 	ldw	r3,-4(r21)
    24d0:	b0c00715 	stw	r3,28(r22)
    24d4:	003fb006 	br	2398 <__alt_mem_onchip_memory2_0+0xfbffe398>

000024d8 <_sbrk_r>:
    24d8:	defffd04 	addi	sp,sp,-12
    24dc:	dc000015 	stw	r16,0(sp)
    24e0:	04000074 	movhi	r16,1
    24e4:	dc400115 	stw	r17,4(sp)
    24e8:	840a0304 	addi	r16,r16,10252
    24ec:	2023883a 	mov	r17,r4
    24f0:	2809883a 	mov	r4,r5
    24f4:	dfc00215 	stw	ra,8(sp)
    24f8:	80000015 	stw	zero,0(r16)
    24fc:	0003b4c0 	call	3b4c <sbrk>
    2500:	00ffffc4 	movi	r3,-1
    2504:	10c00526 	beq	r2,r3,251c <_sbrk_r+0x44>
    2508:	dfc00217 	ldw	ra,8(sp)
    250c:	dc400117 	ldw	r17,4(sp)
    2510:	dc000017 	ldw	r16,0(sp)
    2514:	dec00304 	addi	sp,sp,12
    2518:	f800283a 	ret
    251c:	80c00017 	ldw	r3,0(r16)
    2520:	183ff926 	beq	r3,zero,2508 <__alt_mem_onchip_memory2_0+0xfbffe508>
    2524:	88c00015 	stw	r3,0(r17)
    2528:	003ff706 	br	2508 <__alt_mem_onchip_memory2_0+0xfbffe508>

0000252c <__sread>:
    252c:	defffe04 	addi	sp,sp,-8
    2530:	dc000015 	stw	r16,0(sp)
    2534:	2821883a 	mov	r16,r5
    2538:	2940038f 	ldh	r5,14(r5)
    253c:	dfc00115 	stw	ra,4(sp)
    2540:	000326c0 	call	326c <_read_r>
    2544:	10000716 	blt	r2,zero,2564 <__sread+0x38>
    2548:	80c01417 	ldw	r3,80(r16)
    254c:	1887883a 	add	r3,r3,r2
    2550:	80c01415 	stw	r3,80(r16)
    2554:	dfc00117 	ldw	ra,4(sp)
    2558:	dc000017 	ldw	r16,0(sp)
    255c:	dec00204 	addi	sp,sp,8
    2560:	f800283a 	ret
    2564:	80c0030b 	ldhu	r3,12(r16)
    2568:	18fbffcc 	andi	r3,r3,61439
    256c:	80c0030d 	sth	r3,12(r16)
    2570:	dfc00117 	ldw	ra,4(sp)
    2574:	dc000017 	ldw	r16,0(sp)
    2578:	dec00204 	addi	sp,sp,8
    257c:	f800283a 	ret

00002580 <__seofread>:
    2580:	0005883a 	mov	r2,zero
    2584:	f800283a 	ret

00002588 <__swrite>:
    2588:	2880030b 	ldhu	r2,12(r5)
    258c:	defffb04 	addi	sp,sp,-20
    2590:	dcc00315 	stw	r19,12(sp)
    2594:	dc800215 	stw	r18,8(sp)
    2598:	dc400115 	stw	r17,4(sp)
    259c:	dc000015 	stw	r16,0(sp)
    25a0:	dfc00415 	stw	ra,16(sp)
    25a4:	10c0400c 	andi	r3,r2,256
    25a8:	2821883a 	mov	r16,r5
    25ac:	2023883a 	mov	r17,r4
    25b0:	3025883a 	mov	r18,r6
    25b4:	3827883a 	mov	r19,r7
    25b8:	18000526 	beq	r3,zero,25d0 <__swrite+0x48>
    25bc:	2940038f 	ldh	r5,14(r5)
    25c0:	01c00084 	movi	r7,2
    25c4:	000d883a 	mov	r6,zero
    25c8:	00030500 	call	3050 <_lseek_r>
    25cc:	8080030b 	ldhu	r2,12(r16)
    25d0:	8140038f 	ldh	r5,14(r16)
    25d4:	10bbffcc 	andi	r2,r2,61439
    25d8:	980f883a 	mov	r7,r19
    25dc:	900d883a 	mov	r6,r18
    25e0:	8809883a 	mov	r4,r17
    25e4:	8080030d 	sth	r2,12(r16)
    25e8:	dfc00417 	ldw	ra,16(sp)
    25ec:	dcc00317 	ldw	r19,12(sp)
    25f0:	dc800217 	ldw	r18,8(sp)
    25f4:	dc400117 	ldw	r17,4(sp)
    25f8:	dc000017 	ldw	r16,0(sp)
    25fc:	dec00504 	addi	sp,sp,20
    2600:	00026681 	jmpi	2668 <_write_r>

00002604 <__sseek>:
    2604:	defffe04 	addi	sp,sp,-8
    2608:	dc000015 	stw	r16,0(sp)
    260c:	2821883a 	mov	r16,r5
    2610:	2940038f 	ldh	r5,14(r5)
    2614:	dfc00115 	stw	ra,4(sp)
    2618:	00030500 	call	3050 <_lseek_r>
    261c:	00ffffc4 	movi	r3,-1
    2620:	10c00826 	beq	r2,r3,2644 <__sseek+0x40>
    2624:	80c0030b 	ldhu	r3,12(r16)
    2628:	80801415 	stw	r2,80(r16)
    262c:	18c40014 	ori	r3,r3,4096
    2630:	80c0030d 	sth	r3,12(r16)
    2634:	dfc00117 	ldw	ra,4(sp)
    2638:	dc000017 	ldw	r16,0(sp)
    263c:	dec00204 	addi	sp,sp,8
    2640:	f800283a 	ret
    2644:	80c0030b 	ldhu	r3,12(r16)
    2648:	18fbffcc 	andi	r3,r3,61439
    264c:	80c0030d 	sth	r3,12(r16)
    2650:	dfc00117 	ldw	ra,4(sp)
    2654:	dc000017 	ldw	r16,0(sp)
    2658:	dec00204 	addi	sp,sp,8
    265c:	f800283a 	ret

00002660 <__sclose>:
    2660:	2940038f 	ldh	r5,14(r5)
    2664:	000281c1 	jmpi	281c <_close_r>

00002668 <_write_r>:
    2668:	defffd04 	addi	sp,sp,-12
    266c:	2805883a 	mov	r2,r5
    2670:	dc000015 	stw	r16,0(sp)
    2674:	04000074 	movhi	r16,1
    2678:	dc400115 	stw	r17,4(sp)
    267c:	300b883a 	mov	r5,r6
    2680:	840a0304 	addi	r16,r16,10252
    2684:	2023883a 	mov	r17,r4
    2688:	380d883a 	mov	r6,r7
    268c:	1009883a 	mov	r4,r2
    2690:	dfc00215 	stw	ra,8(sp)
    2694:	80000015 	stw	zero,0(r16)
    2698:	0003c380 	call	3c38 <write>
    269c:	00ffffc4 	movi	r3,-1
    26a0:	10c00526 	beq	r2,r3,26b8 <_write_r+0x50>
    26a4:	dfc00217 	ldw	ra,8(sp)
    26a8:	dc400117 	ldw	r17,4(sp)
    26ac:	dc000017 	ldw	r16,0(sp)
    26b0:	dec00304 	addi	sp,sp,12
    26b4:	f800283a 	ret
    26b8:	80c00017 	ldw	r3,0(r16)
    26bc:	183ff926 	beq	r3,zero,26a4 <__alt_mem_onchip_memory2_0+0xfbffe6a4>
    26c0:	88c00015 	stw	r3,0(r17)
    26c4:	003ff706 	br	26a4 <__alt_mem_onchip_memory2_0+0xfbffe6a4>

000026c8 <__swsetup_r>:
    26c8:	00800074 	movhi	r2,1
    26cc:	defffd04 	addi	sp,sp,-12
    26d0:	1082d904 	addi	r2,r2,2916
    26d4:	dc400115 	stw	r17,4(sp)
    26d8:	2023883a 	mov	r17,r4
    26dc:	11000017 	ldw	r4,0(r2)
    26e0:	dc000015 	stw	r16,0(sp)
    26e4:	dfc00215 	stw	ra,8(sp)
    26e8:	2821883a 	mov	r16,r5
    26ec:	20000226 	beq	r4,zero,26f8 <__swsetup_r+0x30>
    26f0:	20800e17 	ldw	r2,56(r4)
    26f4:	10003126 	beq	r2,zero,27bc <__swsetup_r+0xf4>
    26f8:	8080030b 	ldhu	r2,12(r16)
    26fc:	10c0020c 	andi	r3,r2,8
    2700:	1009883a 	mov	r4,r2
    2704:	18000f26 	beq	r3,zero,2744 <__swsetup_r+0x7c>
    2708:	80c00417 	ldw	r3,16(r16)
    270c:	18001526 	beq	r3,zero,2764 <__swsetup_r+0x9c>
    2710:	1100004c 	andi	r4,r2,1
    2714:	20001c1e 	bne	r4,zero,2788 <__swsetup_r+0xc0>
    2718:	1080008c 	andi	r2,r2,2
    271c:	1000291e 	bne	r2,zero,27c4 <__swsetup_r+0xfc>
    2720:	80800517 	ldw	r2,20(r16)
    2724:	80800215 	stw	r2,8(r16)
    2728:	18001c26 	beq	r3,zero,279c <__swsetup_r+0xd4>
    272c:	0005883a 	mov	r2,zero
    2730:	dfc00217 	ldw	ra,8(sp)
    2734:	dc400117 	ldw	r17,4(sp)
    2738:	dc000017 	ldw	r16,0(sp)
    273c:	dec00304 	addi	sp,sp,12
    2740:	f800283a 	ret
    2744:	2080040c 	andi	r2,r4,16
    2748:	10002e26 	beq	r2,zero,2804 <__swsetup_r+0x13c>
    274c:	2080010c 	andi	r2,r4,4
    2750:	10001e1e 	bne	r2,zero,27cc <__swsetup_r+0x104>
    2754:	80c00417 	ldw	r3,16(r16)
    2758:	20800214 	ori	r2,r4,8
    275c:	8080030d 	sth	r2,12(r16)
    2760:	183feb1e 	bne	r3,zero,2710 <__alt_mem_onchip_memory2_0+0xfbffe710>
    2764:	1100a00c 	andi	r4,r2,640
    2768:	01408004 	movi	r5,512
    276c:	217fe826 	beq	r4,r5,2710 <__alt_mem_onchip_memory2_0+0xfbffe710>
    2770:	800b883a 	mov	r5,r16
    2774:	8809883a 	mov	r4,r17
    2778:	00030b00 	call	30b0 <__smakebuf_r>
    277c:	8080030b 	ldhu	r2,12(r16)
    2780:	80c00417 	ldw	r3,16(r16)
    2784:	003fe206 	br	2710 <__alt_mem_onchip_memory2_0+0xfbffe710>
    2788:	80800517 	ldw	r2,20(r16)
    278c:	80000215 	stw	zero,8(r16)
    2790:	0085c83a 	sub	r2,zero,r2
    2794:	80800615 	stw	r2,24(r16)
    2798:	183fe41e 	bne	r3,zero,272c <__alt_mem_onchip_memory2_0+0xfbffe72c>
    279c:	80c0030b 	ldhu	r3,12(r16)
    27a0:	0005883a 	mov	r2,zero
    27a4:	1900200c 	andi	r4,r3,128
    27a8:	203fe126 	beq	r4,zero,2730 <__alt_mem_onchip_memory2_0+0xfbffe730>
    27ac:	18c01014 	ori	r3,r3,64
    27b0:	80c0030d 	sth	r3,12(r16)
    27b4:	00bfffc4 	movi	r2,-1
    27b8:	003fdd06 	br	2730 <__alt_mem_onchip_memory2_0+0xfbffe730>
    27bc:	0000c240 	call	c24 <__sinit>
    27c0:	003fcd06 	br	26f8 <__alt_mem_onchip_memory2_0+0xfbffe6f8>
    27c4:	0005883a 	mov	r2,zero
    27c8:	003fd606 	br	2724 <__alt_mem_onchip_memory2_0+0xfbffe724>
    27cc:	81400c17 	ldw	r5,48(r16)
    27d0:	28000626 	beq	r5,zero,27ec <__swsetup_r+0x124>
    27d4:	80801004 	addi	r2,r16,64
    27d8:	28800326 	beq	r5,r2,27e8 <__swsetup_r+0x120>
    27dc:	8809883a 	mov	r4,r17
    27e0:	0002d400 	call	2d40 <_free_r>
    27e4:	8100030b 	ldhu	r4,12(r16)
    27e8:	80000c15 	stw	zero,48(r16)
    27ec:	80c00417 	ldw	r3,16(r16)
    27f0:	00bff6c4 	movi	r2,-37
    27f4:	1108703a 	and	r4,r2,r4
    27f8:	80000115 	stw	zero,4(r16)
    27fc:	80c00015 	stw	r3,0(r16)
    2800:	003fd506 	br	2758 <__alt_mem_onchip_memory2_0+0xfbffe758>
    2804:	00800244 	movi	r2,9
    2808:	88800015 	stw	r2,0(r17)
    280c:	20801014 	ori	r2,r4,64
    2810:	8080030d 	sth	r2,12(r16)
    2814:	00bfffc4 	movi	r2,-1
    2818:	003fc506 	br	2730 <__alt_mem_onchip_memory2_0+0xfbffe730>

0000281c <_close_r>:
    281c:	defffd04 	addi	sp,sp,-12
    2820:	dc000015 	stw	r16,0(sp)
    2824:	04000074 	movhi	r16,1
    2828:	dc400115 	stw	r17,4(sp)
    282c:	840a0304 	addi	r16,r16,10252
    2830:	2023883a 	mov	r17,r4
    2834:	2809883a 	mov	r4,r5
    2838:	dfc00215 	stw	ra,8(sp)
    283c:	80000015 	stw	zero,0(r16)
    2840:	00033b80 	call	33b8 <close>
    2844:	00ffffc4 	movi	r3,-1
    2848:	10c00526 	beq	r2,r3,2860 <_close_r+0x44>
    284c:	dfc00217 	ldw	ra,8(sp)
    2850:	dc400117 	ldw	r17,4(sp)
    2854:	dc000017 	ldw	r16,0(sp)
    2858:	dec00304 	addi	sp,sp,12
    285c:	f800283a 	ret
    2860:	80c00017 	ldw	r3,0(r16)
    2864:	183ff926 	beq	r3,zero,284c <__alt_mem_onchip_memory2_0+0xfbffe84c>
    2868:	88c00015 	stw	r3,0(r17)
    286c:	003ff706 	br	284c <__alt_mem_onchip_memory2_0+0xfbffe84c>

00002870 <_fclose_r>:
    2870:	28003926 	beq	r5,zero,2958 <_fclose_r+0xe8>
    2874:	defffc04 	addi	sp,sp,-16
    2878:	dc400115 	stw	r17,4(sp)
    287c:	dc000015 	stw	r16,0(sp)
    2880:	dfc00315 	stw	ra,12(sp)
    2884:	dc800215 	stw	r18,8(sp)
    2888:	2023883a 	mov	r17,r4
    288c:	2821883a 	mov	r16,r5
    2890:	20000226 	beq	r4,zero,289c <_fclose_r+0x2c>
    2894:	20800e17 	ldw	r2,56(r4)
    2898:	10002726 	beq	r2,zero,2938 <_fclose_r+0xc8>
    289c:	8080030f 	ldh	r2,12(r16)
    28a0:	1000071e 	bne	r2,zero,28c0 <_fclose_r+0x50>
    28a4:	0005883a 	mov	r2,zero
    28a8:	dfc00317 	ldw	ra,12(sp)
    28ac:	dc800217 	ldw	r18,8(sp)
    28b0:	dc400117 	ldw	r17,4(sp)
    28b4:	dc000017 	ldw	r16,0(sp)
    28b8:	dec00404 	addi	sp,sp,16
    28bc:	f800283a 	ret
    28c0:	800b883a 	mov	r5,r16
    28c4:	8809883a 	mov	r4,r17
    28c8:	00029740 	call	2974 <__sflush_r>
    28cc:	1025883a 	mov	r18,r2
    28d0:	80800b17 	ldw	r2,44(r16)
    28d4:	10000426 	beq	r2,zero,28e8 <_fclose_r+0x78>
    28d8:	81400717 	ldw	r5,28(r16)
    28dc:	8809883a 	mov	r4,r17
    28e0:	103ee83a 	callr	r2
    28e4:	10001616 	blt	r2,zero,2940 <_fclose_r+0xd0>
    28e8:	8080030b 	ldhu	r2,12(r16)
    28ec:	1080200c 	andi	r2,r2,128
    28f0:	1000151e 	bne	r2,zero,2948 <_fclose_r+0xd8>
    28f4:	81400c17 	ldw	r5,48(r16)
    28f8:	28000526 	beq	r5,zero,2910 <_fclose_r+0xa0>
    28fc:	80801004 	addi	r2,r16,64
    2900:	28800226 	beq	r5,r2,290c <_fclose_r+0x9c>
    2904:	8809883a 	mov	r4,r17
    2908:	0002d400 	call	2d40 <_free_r>
    290c:	80000c15 	stw	zero,48(r16)
    2910:	81401117 	ldw	r5,68(r16)
    2914:	28000326 	beq	r5,zero,2924 <_fclose_r+0xb4>
    2918:	8809883a 	mov	r4,r17
    291c:	0002d400 	call	2d40 <_free_r>
    2920:	80001115 	stw	zero,68(r16)
    2924:	0000c340 	call	c34 <__sfp_lock_acquire>
    2928:	8000030d 	sth	zero,12(r16)
    292c:	0000c380 	call	c38 <__sfp_lock_release>
    2930:	9005883a 	mov	r2,r18
    2934:	003fdc06 	br	28a8 <__alt_mem_onchip_memory2_0+0xfbffe8a8>
    2938:	0000c240 	call	c24 <__sinit>
    293c:	003fd706 	br	289c <__alt_mem_onchip_memory2_0+0xfbffe89c>
    2940:	04bfffc4 	movi	r18,-1
    2944:	003fe806 	br	28e8 <__alt_mem_onchip_memory2_0+0xfbffe8e8>
    2948:	81400417 	ldw	r5,16(r16)
    294c:	8809883a 	mov	r4,r17
    2950:	0002d400 	call	2d40 <_free_r>
    2954:	003fe706 	br	28f4 <__alt_mem_onchip_memory2_0+0xfbffe8f4>
    2958:	0005883a 	mov	r2,zero
    295c:	f800283a 	ret

00002960 <fclose>:
    2960:	00800074 	movhi	r2,1
    2964:	1082d904 	addi	r2,r2,2916
    2968:	200b883a 	mov	r5,r4
    296c:	11000017 	ldw	r4,0(r2)
    2970:	00028701 	jmpi	2870 <_fclose_r>

00002974 <__sflush_r>:
    2974:	2880030b 	ldhu	r2,12(r5)
    2978:	defffb04 	addi	sp,sp,-20
    297c:	dcc00315 	stw	r19,12(sp)
    2980:	dc400115 	stw	r17,4(sp)
    2984:	dfc00415 	stw	ra,16(sp)
    2988:	dc800215 	stw	r18,8(sp)
    298c:	dc000015 	stw	r16,0(sp)
    2990:	10c0020c 	andi	r3,r2,8
    2994:	2823883a 	mov	r17,r5
    2998:	2027883a 	mov	r19,r4
    299c:	1800311e 	bne	r3,zero,2a64 <__sflush_r+0xf0>
    29a0:	28c00117 	ldw	r3,4(r5)
    29a4:	10820014 	ori	r2,r2,2048
    29a8:	2880030d 	sth	r2,12(r5)
    29ac:	00c04b0e 	bge	zero,r3,2adc <__sflush_r+0x168>
    29b0:	8a000a17 	ldw	r8,40(r17)
    29b4:	40002326 	beq	r8,zero,2a44 <__sflush_r+0xd0>
    29b8:	9c000017 	ldw	r16,0(r19)
    29bc:	10c4000c 	andi	r3,r2,4096
    29c0:	98000015 	stw	zero,0(r19)
    29c4:	18004826 	beq	r3,zero,2ae8 <__sflush_r+0x174>
    29c8:	89801417 	ldw	r6,80(r17)
    29cc:	10c0010c 	andi	r3,r2,4
    29d0:	18000626 	beq	r3,zero,29ec <__sflush_r+0x78>
    29d4:	88c00117 	ldw	r3,4(r17)
    29d8:	88800c17 	ldw	r2,48(r17)
    29dc:	30cdc83a 	sub	r6,r6,r3
    29e0:	10000226 	beq	r2,zero,29ec <__sflush_r+0x78>
    29e4:	88800f17 	ldw	r2,60(r17)
    29e8:	308dc83a 	sub	r6,r6,r2
    29ec:	89400717 	ldw	r5,28(r17)
    29f0:	000f883a 	mov	r7,zero
    29f4:	9809883a 	mov	r4,r19
    29f8:	403ee83a 	callr	r8
    29fc:	00ffffc4 	movi	r3,-1
    2a00:	10c04426 	beq	r2,r3,2b14 <__sflush_r+0x1a0>
    2a04:	88c0030b 	ldhu	r3,12(r17)
    2a08:	89000417 	ldw	r4,16(r17)
    2a0c:	88000115 	stw	zero,4(r17)
    2a10:	197dffcc 	andi	r5,r3,63487
    2a14:	8940030d 	sth	r5,12(r17)
    2a18:	89000015 	stw	r4,0(r17)
    2a1c:	18c4000c 	andi	r3,r3,4096
    2a20:	18002c1e 	bne	r3,zero,2ad4 <__sflush_r+0x160>
    2a24:	89400c17 	ldw	r5,48(r17)
    2a28:	9c000015 	stw	r16,0(r19)
    2a2c:	28000526 	beq	r5,zero,2a44 <__sflush_r+0xd0>
    2a30:	88801004 	addi	r2,r17,64
    2a34:	28800226 	beq	r5,r2,2a40 <__sflush_r+0xcc>
    2a38:	9809883a 	mov	r4,r19
    2a3c:	0002d400 	call	2d40 <_free_r>
    2a40:	88000c15 	stw	zero,48(r17)
    2a44:	0005883a 	mov	r2,zero
    2a48:	dfc00417 	ldw	ra,16(sp)
    2a4c:	dcc00317 	ldw	r19,12(sp)
    2a50:	dc800217 	ldw	r18,8(sp)
    2a54:	dc400117 	ldw	r17,4(sp)
    2a58:	dc000017 	ldw	r16,0(sp)
    2a5c:	dec00504 	addi	sp,sp,20
    2a60:	f800283a 	ret
    2a64:	2c800417 	ldw	r18,16(r5)
    2a68:	903ff626 	beq	r18,zero,2a44 <__alt_mem_onchip_memory2_0+0xfbffea44>
    2a6c:	2c000017 	ldw	r16,0(r5)
    2a70:	108000cc 	andi	r2,r2,3
    2a74:	2c800015 	stw	r18,0(r5)
    2a78:	84a1c83a 	sub	r16,r16,r18
    2a7c:	1000131e 	bne	r2,zero,2acc <__sflush_r+0x158>
    2a80:	28800517 	ldw	r2,20(r5)
    2a84:	88800215 	stw	r2,8(r17)
    2a88:	04000316 	blt	zero,r16,2a98 <__sflush_r+0x124>
    2a8c:	003fed06 	br	2a44 <__alt_mem_onchip_memory2_0+0xfbffea44>
    2a90:	90a5883a 	add	r18,r18,r2
    2a94:	043feb0e 	bge	zero,r16,2a44 <__alt_mem_onchip_memory2_0+0xfbffea44>
    2a98:	88800917 	ldw	r2,36(r17)
    2a9c:	89400717 	ldw	r5,28(r17)
    2aa0:	800f883a 	mov	r7,r16
    2aa4:	900d883a 	mov	r6,r18
    2aa8:	9809883a 	mov	r4,r19
    2aac:	103ee83a 	callr	r2
    2ab0:	80a1c83a 	sub	r16,r16,r2
    2ab4:	00bff616 	blt	zero,r2,2a90 <__alt_mem_onchip_memory2_0+0xfbffea90>
    2ab8:	88c0030b 	ldhu	r3,12(r17)
    2abc:	00bfffc4 	movi	r2,-1
    2ac0:	18c01014 	ori	r3,r3,64
    2ac4:	88c0030d 	sth	r3,12(r17)
    2ac8:	003fdf06 	br	2a48 <__alt_mem_onchip_memory2_0+0xfbffea48>
    2acc:	0005883a 	mov	r2,zero
    2ad0:	003fec06 	br	2a84 <__alt_mem_onchip_memory2_0+0xfbffea84>
    2ad4:	88801415 	stw	r2,80(r17)
    2ad8:	003fd206 	br	2a24 <__alt_mem_onchip_memory2_0+0xfbffea24>
    2adc:	28c00f17 	ldw	r3,60(r5)
    2ae0:	00ffb316 	blt	zero,r3,29b0 <__alt_mem_onchip_memory2_0+0xfbffe9b0>
    2ae4:	003fd706 	br	2a44 <__alt_mem_onchip_memory2_0+0xfbffea44>
    2ae8:	89400717 	ldw	r5,28(r17)
    2aec:	000d883a 	mov	r6,zero
    2af0:	01c00044 	movi	r7,1
    2af4:	9809883a 	mov	r4,r19
    2af8:	403ee83a 	callr	r8
    2afc:	100d883a 	mov	r6,r2
    2b00:	00bfffc4 	movi	r2,-1
    2b04:	30801426 	beq	r6,r2,2b58 <__sflush_r+0x1e4>
    2b08:	8880030b 	ldhu	r2,12(r17)
    2b0c:	8a000a17 	ldw	r8,40(r17)
    2b10:	003fae06 	br	29cc <__alt_mem_onchip_memory2_0+0xfbffe9cc>
    2b14:	98c00017 	ldw	r3,0(r19)
    2b18:	183fba26 	beq	r3,zero,2a04 <__alt_mem_onchip_memory2_0+0xfbffea04>
    2b1c:	01000744 	movi	r4,29
    2b20:	19000626 	beq	r3,r4,2b3c <__sflush_r+0x1c8>
    2b24:	01000584 	movi	r4,22
    2b28:	19000426 	beq	r3,r4,2b3c <__sflush_r+0x1c8>
    2b2c:	88c0030b 	ldhu	r3,12(r17)
    2b30:	18c01014 	ori	r3,r3,64
    2b34:	88c0030d 	sth	r3,12(r17)
    2b38:	003fc306 	br	2a48 <__alt_mem_onchip_memory2_0+0xfbffea48>
    2b3c:	8880030b 	ldhu	r2,12(r17)
    2b40:	88c00417 	ldw	r3,16(r17)
    2b44:	88000115 	stw	zero,4(r17)
    2b48:	10bdffcc 	andi	r2,r2,63487
    2b4c:	8880030d 	sth	r2,12(r17)
    2b50:	88c00015 	stw	r3,0(r17)
    2b54:	003fb306 	br	2a24 <__alt_mem_onchip_memory2_0+0xfbffea24>
    2b58:	98800017 	ldw	r2,0(r19)
    2b5c:	103fea26 	beq	r2,zero,2b08 <__alt_mem_onchip_memory2_0+0xfbffeb08>
    2b60:	00c00744 	movi	r3,29
    2b64:	10c00226 	beq	r2,r3,2b70 <__sflush_r+0x1fc>
    2b68:	00c00584 	movi	r3,22
    2b6c:	10c0031e 	bne	r2,r3,2b7c <__sflush_r+0x208>
    2b70:	9c000015 	stw	r16,0(r19)
    2b74:	0005883a 	mov	r2,zero
    2b78:	003fb306 	br	2a48 <__alt_mem_onchip_memory2_0+0xfbffea48>
    2b7c:	88c0030b 	ldhu	r3,12(r17)
    2b80:	3005883a 	mov	r2,r6
    2b84:	18c01014 	ori	r3,r3,64
    2b88:	88c0030d 	sth	r3,12(r17)
    2b8c:	003fae06 	br	2a48 <__alt_mem_onchip_memory2_0+0xfbffea48>

00002b90 <_fflush_r>:
    2b90:	defffd04 	addi	sp,sp,-12
    2b94:	dc000115 	stw	r16,4(sp)
    2b98:	dfc00215 	stw	ra,8(sp)
    2b9c:	2021883a 	mov	r16,r4
    2ba0:	20000226 	beq	r4,zero,2bac <_fflush_r+0x1c>
    2ba4:	20800e17 	ldw	r2,56(r4)
    2ba8:	10000c26 	beq	r2,zero,2bdc <_fflush_r+0x4c>
    2bac:	2880030f 	ldh	r2,12(r5)
    2bb0:	1000051e 	bne	r2,zero,2bc8 <_fflush_r+0x38>
    2bb4:	0005883a 	mov	r2,zero
    2bb8:	dfc00217 	ldw	ra,8(sp)
    2bbc:	dc000117 	ldw	r16,4(sp)
    2bc0:	dec00304 	addi	sp,sp,12
    2bc4:	f800283a 	ret
    2bc8:	8009883a 	mov	r4,r16
    2bcc:	dfc00217 	ldw	ra,8(sp)
    2bd0:	dc000117 	ldw	r16,4(sp)
    2bd4:	dec00304 	addi	sp,sp,12
    2bd8:	00029741 	jmpi	2974 <__sflush_r>
    2bdc:	d9400015 	stw	r5,0(sp)
    2be0:	0000c240 	call	c24 <__sinit>
    2be4:	d9400017 	ldw	r5,0(sp)
    2be8:	003ff006 	br	2bac <__alt_mem_onchip_memory2_0+0xfbffebac>

00002bec <fflush>:
    2bec:	20000526 	beq	r4,zero,2c04 <fflush+0x18>
    2bf0:	00800074 	movhi	r2,1
    2bf4:	1082d904 	addi	r2,r2,2916
    2bf8:	200b883a 	mov	r5,r4
    2bfc:	11000017 	ldw	r4,0(r2)
    2c00:	0002b901 	jmpi	2b90 <_fflush_r>
    2c04:	00800074 	movhi	r2,1
    2c08:	1082d804 	addi	r2,r2,2912
    2c0c:	11000017 	ldw	r4,0(r2)
    2c10:	01400034 	movhi	r5,0
    2c14:	294ae404 	addi	r5,r5,11152
    2c18:	00011f41 	jmpi	11f4 <_fwalk_reent>

00002c1c <_malloc_trim_r>:
    2c1c:	defffb04 	addi	sp,sp,-20
    2c20:	dcc00315 	stw	r19,12(sp)
    2c24:	04c00074 	movhi	r19,1
    2c28:	dc800215 	stw	r18,8(sp)
    2c2c:	dc400115 	stw	r17,4(sp)
    2c30:	dc000015 	stw	r16,0(sp)
    2c34:	dfc00415 	stw	ra,16(sp)
    2c38:	2821883a 	mov	r16,r5
    2c3c:	9cfd1604 	addi	r19,r19,-2984
    2c40:	2025883a 	mov	r18,r4
    2c44:	0003e540 	call	3e54 <__malloc_lock>
    2c48:	98800217 	ldw	r2,8(r19)
    2c4c:	14400117 	ldw	r17,4(r2)
    2c50:	00bfff04 	movi	r2,-4
    2c54:	88a2703a 	and	r17,r17,r2
    2c58:	8c21c83a 	sub	r16,r17,r16
    2c5c:	8403fbc4 	addi	r16,r16,4079
    2c60:	8020d33a 	srli	r16,r16,12
    2c64:	0083ffc4 	movi	r2,4095
    2c68:	843fffc4 	addi	r16,r16,-1
    2c6c:	8020933a 	slli	r16,r16,12
    2c70:	1400060e 	bge	r2,r16,2c8c <_malloc_trim_r+0x70>
    2c74:	000b883a 	mov	r5,zero
    2c78:	9009883a 	mov	r4,r18
    2c7c:	00024d80 	call	24d8 <_sbrk_r>
    2c80:	98c00217 	ldw	r3,8(r19)
    2c84:	1c47883a 	add	r3,r3,r17
    2c88:	10c00a26 	beq	r2,r3,2cb4 <_malloc_trim_r+0x98>
    2c8c:	9009883a 	mov	r4,r18
    2c90:	0003f740 	call	3f74 <__malloc_unlock>
    2c94:	0005883a 	mov	r2,zero
    2c98:	dfc00417 	ldw	ra,16(sp)
    2c9c:	dcc00317 	ldw	r19,12(sp)
    2ca0:	dc800217 	ldw	r18,8(sp)
    2ca4:	dc400117 	ldw	r17,4(sp)
    2ca8:	dc000017 	ldw	r16,0(sp)
    2cac:	dec00504 	addi	sp,sp,20
    2cb0:	f800283a 	ret
    2cb4:	040bc83a 	sub	r5,zero,r16
    2cb8:	9009883a 	mov	r4,r18
    2cbc:	00024d80 	call	24d8 <_sbrk_r>
    2cc0:	00ffffc4 	movi	r3,-1
    2cc4:	10c00d26 	beq	r2,r3,2cfc <_malloc_trim_r+0xe0>
    2cc8:	00c00074 	movhi	r3,1
    2ccc:	18ca2404 	addi	r3,r3,10384
    2cd0:	18800017 	ldw	r2,0(r3)
    2cd4:	99000217 	ldw	r4,8(r19)
    2cd8:	8c23c83a 	sub	r17,r17,r16
    2cdc:	8c400054 	ori	r17,r17,1
    2ce0:	1421c83a 	sub	r16,r2,r16
    2ce4:	24400115 	stw	r17,4(r4)
    2ce8:	9009883a 	mov	r4,r18
    2cec:	1c000015 	stw	r16,0(r3)
    2cf0:	0003f740 	call	3f74 <__malloc_unlock>
    2cf4:	00800044 	movi	r2,1
    2cf8:	003fe706 	br	2c98 <__alt_mem_onchip_memory2_0+0xfbffec98>
    2cfc:	000b883a 	mov	r5,zero
    2d00:	9009883a 	mov	r4,r18
    2d04:	00024d80 	call	24d8 <_sbrk_r>
    2d08:	99000217 	ldw	r4,8(r19)
    2d0c:	014003c4 	movi	r5,15
    2d10:	1107c83a 	sub	r3,r2,r4
    2d14:	28ffdd0e 	bge	r5,r3,2c8c <__alt_mem_onchip_memory2_0+0xfbffec8c>
    2d18:	01400074 	movhi	r5,1
    2d1c:	2942da04 	addi	r5,r5,2920
    2d20:	29400017 	ldw	r5,0(r5)
    2d24:	18c00054 	ori	r3,r3,1
    2d28:	20c00115 	stw	r3,4(r4)
    2d2c:	00c00074 	movhi	r3,1
    2d30:	1145c83a 	sub	r2,r2,r5
    2d34:	18ca2404 	addi	r3,r3,10384
    2d38:	18800015 	stw	r2,0(r3)
    2d3c:	003fd306 	br	2c8c <__alt_mem_onchip_memory2_0+0xfbffec8c>

00002d40 <_free_r>:
    2d40:	28004126 	beq	r5,zero,2e48 <_free_r+0x108>
    2d44:	defffd04 	addi	sp,sp,-12
    2d48:	dc400115 	stw	r17,4(sp)
    2d4c:	dc000015 	stw	r16,0(sp)
    2d50:	2023883a 	mov	r17,r4
    2d54:	2821883a 	mov	r16,r5
    2d58:	dfc00215 	stw	ra,8(sp)
    2d5c:	0003e540 	call	3e54 <__malloc_lock>
    2d60:	81ffff17 	ldw	r7,-4(r16)
    2d64:	00bfff84 	movi	r2,-2
    2d68:	01000074 	movhi	r4,1
    2d6c:	81bffe04 	addi	r6,r16,-8
    2d70:	3884703a 	and	r2,r7,r2
    2d74:	213d1604 	addi	r4,r4,-2984
    2d78:	308b883a 	add	r5,r6,r2
    2d7c:	2a400117 	ldw	r9,4(r5)
    2d80:	22000217 	ldw	r8,8(r4)
    2d84:	00ffff04 	movi	r3,-4
    2d88:	48c6703a 	and	r3,r9,r3
    2d8c:	2a005726 	beq	r5,r8,2eec <_free_r+0x1ac>
    2d90:	28c00115 	stw	r3,4(r5)
    2d94:	39c0004c 	andi	r7,r7,1
    2d98:	3800091e 	bne	r7,zero,2dc0 <_free_r+0x80>
    2d9c:	823ffe17 	ldw	r8,-8(r16)
    2da0:	22400204 	addi	r9,r4,8
    2da4:	320dc83a 	sub	r6,r6,r8
    2da8:	31c00217 	ldw	r7,8(r6)
    2dac:	1205883a 	add	r2,r2,r8
    2db0:	3a406526 	beq	r7,r9,2f48 <_free_r+0x208>
    2db4:	32000317 	ldw	r8,12(r6)
    2db8:	3a000315 	stw	r8,12(r7)
    2dbc:	41c00215 	stw	r7,8(r8)
    2dc0:	28cf883a 	add	r7,r5,r3
    2dc4:	39c00117 	ldw	r7,4(r7)
    2dc8:	39c0004c 	andi	r7,r7,1
    2dcc:	38003a26 	beq	r7,zero,2eb8 <_free_r+0x178>
    2dd0:	10c00054 	ori	r3,r2,1
    2dd4:	30c00115 	stw	r3,4(r6)
    2dd8:	3087883a 	add	r3,r6,r2
    2ddc:	18800015 	stw	r2,0(r3)
    2de0:	00c07fc4 	movi	r3,511
    2de4:	18801936 	bltu	r3,r2,2e4c <_free_r+0x10c>
    2de8:	1004d0fa 	srli	r2,r2,3
    2dec:	01c00044 	movi	r7,1
    2df0:	21400117 	ldw	r5,4(r4)
    2df4:	10c00044 	addi	r3,r2,1
    2df8:	18c7883a 	add	r3,r3,r3
    2dfc:	1005d0ba 	srai	r2,r2,2
    2e00:	18c7883a 	add	r3,r3,r3
    2e04:	18c7883a 	add	r3,r3,r3
    2e08:	1907883a 	add	r3,r3,r4
    2e0c:	3884983a 	sll	r2,r7,r2
    2e10:	19c00017 	ldw	r7,0(r3)
    2e14:	1a3ffe04 	addi	r8,r3,-8
    2e18:	1144b03a 	or	r2,r2,r5
    2e1c:	32000315 	stw	r8,12(r6)
    2e20:	31c00215 	stw	r7,8(r6)
    2e24:	20800115 	stw	r2,4(r4)
    2e28:	19800015 	stw	r6,0(r3)
    2e2c:	39800315 	stw	r6,12(r7)
    2e30:	8809883a 	mov	r4,r17
    2e34:	dfc00217 	ldw	ra,8(sp)
    2e38:	dc400117 	ldw	r17,4(sp)
    2e3c:	dc000017 	ldw	r16,0(sp)
    2e40:	dec00304 	addi	sp,sp,12
    2e44:	0003f741 	jmpi	3f74 <__malloc_unlock>
    2e48:	f800283a 	ret
    2e4c:	100ad27a 	srli	r5,r2,9
    2e50:	00c00104 	movi	r3,4
    2e54:	19404a36 	bltu	r3,r5,2f80 <_free_r+0x240>
    2e58:	100ad1ba 	srli	r5,r2,6
    2e5c:	28c00e44 	addi	r3,r5,57
    2e60:	18c7883a 	add	r3,r3,r3
    2e64:	29400e04 	addi	r5,r5,56
    2e68:	18c7883a 	add	r3,r3,r3
    2e6c:	18c7883a 	add	r3,r3,r3
    2e70:	1909883a 	add	r4,r3,r4
    2e74:	20c00017 	ldw	r3,0(r4)
    2e78:	01c00074 	movhi	r7,1
    2e7c:	213ffe04 	addi	r4,r4,-8
    2e80:	39fd1604 	addi	r7,r7,-2984
    2e84:	20c04426 	beq	r4,r3,2f98 <_free_r+0x258>
    2e88:	01ffff04 	movi	r7,-4
    2e8c:	19400117 	ldw	r5,4(r3)
    2e90:	29ca703a 	and	r5,r5,r7
    2e94:	1140022e 	bgeu	r2,r5,2ea0 <_free_r+0x160>
    2e98:	18c00217 	ldw	r3,8(r3)
    2e9c:	20fffb1e 	bne	r4,r3,2e8c <__alt_mem_onchip_memory2_0+0xfbffee8c>
    2ea0:	19000317 	ldw	r4,12(r3)
    2ea4:	31000315 	stw	r4,12(r6)
    2ea8:	30c00215 	stw	r3,8(r6)
    2eac:	21800215 	stw	r6,8(r4)
    2eb0:	19800315 	stw	r6,12(r3)
    2eb4:	003fde06 	br	2e30 <__alt_mem_onchip_memory2_0+0xfbffee30>
    2eb8:	29c00217 	ldw	r7,8(r5)
    2ebc:	10c5883a 	add	r2,r2,r3
    2ec0:	00c00074 	movhi	r3,1
    2ec4:	18fd1804 	addi	r3,r3,-2976
    2ec8:	38c03b26 	beq	r7,r3,2fb8 <_free_r+0x278>
    2ecc:	2a000317 	ldw	r8,12(r5)
    2ed0:	11400054 	ori	r5,r2,1
    2ed4:	3087883a 	add	r3,r6,r2
    2ed8:	3a000315 	stw	r8,12(r7)
    2edc:	41c00215 	stw	r7,8(r8)
    2ee0:	31400115 	stw	r5,4(r6)
    2ee4:	18800015 	stw	r2,0(r3)
    2ee8:	003fbd06 	br	2de0 <__alt_mem_onchip_memory2_0+0xfbffede0>
    2eec:	39c0004c 	andi	r7,r7,1
    2ef0:	10c5883a 	add	r2,r2,r3
    2ef4:	3800071e 	bne	r7,zero,2f14 <_free_r+0x1d4>
    2ef8:	81fffe17 	ldw	r7,-8(r16)
    2efc:	31cdc83a 	sub	r6,r6,r7
    2f00:	30c00317 	ldw	r3,12(r6)
    2f04:	31400217 	ldw	r5,8(r6)
    2f08:	11c5883a 	add	r2,r2,r7
    2f0c:	28c00315 	stw	r3,12(r5)
    2f10:	19400215 	stw	r5,8(r3)
    2f14:	10c00054 	ori	r3,r2,1
    2f18:	30c00115 	stw	r3,4(r6)
    2f1c:	00c00074 	movhi	r3,1
    2f20:	18c2db04 	addi	r3,r3,2924
    2f24:	18c00017 	ldw	r3,0(r3)
    2f28:	21800215 	stw	r6,8(r4)
    2f2c:	10ffc036 	bltu	r2,r3,2e30 <__alt_mem_onchip_memory2_0+0xfbffee30>
    2f30:	00800074 	movhi	r2,1
    2f34:	108a0204 	addi	r2,r2,10248
    2f38:	11400017 	ldw	r5,0(r2)
    2f3c:	8809883a 	mov	r4,r17
    2f40:	0002c1c0 	call	2c1c <_malloc_trim_r>
    2f44:	003fba06 	br	2e30 <__alt_mem_onchip_memory2_0+0xfbffee30>
    2f48:	28c9883a 	add	r4,r5,r3
    2f4c:	21000117 	ldw	r4,4(r4)
    2f50:	2100004c 	andi	r4,r4,1
    2f54:	2000391e 	bne	r4,zero,303c <_free_r+0x2fc>
    2f58:	29c00217 	ldw	r7,8(r5)
    2f5c:	29000317 	ldw	r4,12(r5)
    2f60:	1885883a 	add	r2,r3,r2
    2f64:	10c00054 	ori	r3,r2,1
    2f68:	39000315 	stw	r4,12(r7)
    2f6c:	21c00215 	stw	r7,8(r4)
    2f70:	30c00115 	stw	r3,4(r6)
    2f74:	308d883a 	add	r6,r6,r2
    2f78:	30800015 	stw	r2,0(r6)
    2f7c:	003fac06 	br	2e30 <__alt_mem_onchip_memory2_0+0xfbffee30>
    2f80:	00c00504 	movi	r3,20
    2f84:	19401536 	bltu	r3,r5,2fdc <_free_r+0x29c>
    2f88:	28c01704 	addi	r3,r5,92
    2f8c:	18c7883a 	add	r3,r3,r3
    2f90:	294016c4 	addi	r5,r5,91
    2f94:	003fb406 	br	2e68 <__alt_mem_onchip_memory2_0+0xfbffee68>
    2f98:	280bd0ba 	srai	r5,r5,2
    2f9c:	00c00044 	movi	r3,1
    2fa0:	38800117 	ldw	r2,4(r7)
    2fa4:	194a983a 	sll	r5,r3,r5
    2fa8:	2007883a 	mov	r3,r4
    2fac:	2884b03a 	or	r2,r5,r2
    2fb0:	38800115 	stw	r2,4(r7)
    2fb4:	003fbb06 	br	2ea4 <__alt_mem_onchip_memory2_0+0xfbffeea4>
    2fb8:	21800515 	stw	r6,20(r4)
    2fbc:	21800415 	stw	r6,16(r4)
    2fc0:	10c00054 	ori	r3,r2,1
    2fc4:	31c00315 	stw	r7,12(r6)
    2fc8:	31c00215 	stw	r7,8(r6)
    2fcc:	30c00115 	stw	r3,4(r6)
    2fd0:	308d883a 	add	r6,r6,r2
    2fd4:	30800015 	stw	r2,0(r6)
    2fd8:	003f9506 	br	2e30 <__alt_mem_onchip_memory2_0+0xfbffee30>
    2fdc:	00c01504 	movi	r3,84
    2fe0:	19400536 	bltu	r3,r5,2ff8 <_free_r+0x2b8>
    2fe4:	100ad33a 	srli	r5,r2,12
    2fe8:	28c01bc4 	addi	r3,r5,111
    2fec:	18c7883a 	add	r3,r3,r3
    2ff0:	29401b84 	addi	r5,r5,110
    2ff4:	003f9c06 	br	2e68 <__alt_mem_onchip_memory2_0+0xfbffee68>
    2ff8:	00c05504 	movi	r3,340
    2ffc:	19400536 	bltu	r3,r5,3014 <_free_r+0x2d4>
    3000:	100ad3fa 	srli	r5,r2,15
    3004:	28c01e04 	addi	r3,r5,120
    3008:	18c7883a 	add	r3,r3,r3
    300c:	29401dc4 	addi	r5,r5,119
    3010:	003f9506 	br	2e68 <__alt_mem_onchip_memory2_0+0xfbffee68>
    3014:	00c15504 	movi	r3,1364
    3018:	19400536 	bltu	r3,r5,3030 <_free_r+0x2f0>
    301c:	100ad4ba 	srli	r5,r2,18
    3020:	28c01f44 	addi	r3,r5,125
    3024:	18c7883a 	add	r3,r3,r3
    3028:	29401f04 	addi	r5,r5,124
    302c:	003f8e06 	br	2e68 <__alt_mem_onchip_memory2_0+0xfbffee68>
    3030:	00c03f84 	movi	r3,254
    3034:	01401f84 	movi	r5,126
    3038:	003f8b06 	br	2e68 <__alt_mem_onchip_memory2_0+0xfbffee68>
    303c:	10c00054 	ori	r3,r2,1
    3040:	30c00115 	stw	r3,4(r6)
    3044:	308d883a 	add	r6,r6,r2
    3048:	30800015 	stw	r2,0(r6)
    304c:	003f7806 	br	2e30 <__alt_mem_onchip_memory2_0+0xfbffee30>

00003050 <_lseek_r>:
    3050:	defffd04 	addi	sp,sp,-12
    3054:	2805883a 	mov	r2,r5
    3058:	dc000015 	stw	r16,0(sp)
    305c:	04000074 	movhi	r16,1
    3060:	dc400115 	stw	r17,4(sp)
    3064:	300b883a 	mov	r5,r6
    3068:	840a0304 	addi	r16,r16,10252
    306c:	2023883a 	mov	r17,r4
    3070:	380d883a 	mov	r6,r7
    3074:	1009883a 	mov	r4,r2
    3078:	dfc00215 	stw	ra,8(sp)
    307c:	80000015 	stw	zero,0(r16)
    3080:	00037a80 	call	37a8 <lseek>
    3084:	00ffffc4 	movi	r3,-1
    3088:	10c00526 	beq	r2,r3,30a0 <_lseek_r+0x50>
    308c:	dfc00217 	ldw	ra,8(sp)
    3090:	dc400117 	ldw	r17,4(sp)
    3094:	dc000017 	ldw	r16,0(sp)
    3098:	dec00304 	addi	sp,sp,12
    309c:	f800283a 	ret
    30a0:	80c00017 	ldw	r3,0(r16)
    30a4:	183ff926 	beq	r3,zero,308c <__alt_mem_onchip_memory2_0+0xfbfff08c>
    30a8:	88c00015 	stw	r3,0(r17)
    30ac:	003ff706 	br	308c <__alt_mem_onchip_memory2_0+0xfbfff08c>

000030b0 <__smakebuf_r>:
    30b0:	2880030b 	ldhu	r2,12(r5)
    30b4:	10c0008c 	andi	r3,r2,2
    30b8:	1800411e 	bne	r3,zero,31c0 <__smakebuf_r+0x110>
    30bc:	deffec04 	addi	sp,sp,-80
    30c0:	dc000f15 	stw	r16,60(sp)
    30c4:	2821883a 	mov	r16,r5
    30c8:	2940038f 	ldh	r5,14(r5)
    30cc:	dc401015 	stw	r17,64(sp)
    30d0:	dfc01315 	stw	ra,76(sp)
    30d4:	dcc01215 	stw	r19,72(sp)
    30d8:	dc801115 	stw	r18,68(sp)
    30dc:	2023883a 	mov	r17,r4
    30e0:	28001c16 	blt	r5,zero,3154 <__smakebuf_r+0xa4>
    30e4:	d80d883a 	mov	r6,sp
    30e8:	00032cc0 	call	32cc <_fstat_r>
    30ec:	10001816 	blt	r2,zero,3150 <__smakebuf_r+0xa0>
    30f0:	d8800117 	ldw	r2,4(sp)
    30f4:	00e00014 	movui	r3,32768
    30f8:	10bc000c 	andi	r2,r2,61440
    30fc:	14c80020 	cmpeqi	r19,r2,8192
    3100:	10c03726 	beq	r2,r3,31e0 <__smakebuf_r+0x130>
    3104:	80c0030b 	ldhu	r3,12(r16)
    3108:	18c20014 	ori	r3,r3,2048
    310c:	80c0030d 	sth	r3,12(r16)
    3110:	00c80004 	movi	r3,8192
    3114:	10c0521e 	bne	r2,r3,3260 <__smakebuf_r+0x1b0>
    3118:	8140038f 	ldh	r5,14(r16)
    311c:	8809883a 	mov	r4,r17
    3120:	00033280 	call	3328 <_isatty_r>
    3124:	10004c26 	beq	r2,zero,3258 <__smakebuf_r+0x1a8>
    3128:	8080030b 	ldhu	r2,12(r16)
    312c:	80c010c4 	addi	r3,r16,67
    3130:	80c00015 	stw	r3,0(r16)
    3134:	10800054 	ori	r2,r2,1
    3138:	8080030d 	sth	r2,12(r16)
    313c:	00800044 	movi	r2,1
    3140:	80c00415 	stw	r3,16(r16)
    3144:	80800515 	stw	r2,20(r16)
    3148:	04810004 	movi	r18,1024
    314c:	00000706 	br	316c <__smakebuf_r+0xbc>
    3150:	8080030b 	ldhu	r2,12(r16)
    3154:	10c0200c 	andi	r3,r2,128
    3158:	18001f1e 	bne	r3,zero,31d8 <__smakebuf_r+0x128>
    315c:	04810004 	movi	r18,1024
    3160:	10820014 	ori	r2,r2,2048
    3164:	8080030d 	sth	r2,12(r16)
    3168:	0027883a 	mov	r19,zero
    316c:	900b883a 	mov	r5,r18
    3170:	8809883a 	mov	r4,r17
    3174:	00012b80 	call	12b8 <_malloc_r>
    3178:	10002c26 	beq	r2,zero,322c <__smakebuf_r+0x17c>
    317c:	80c0030b 	ldhu	r3,12(r16)
    3180:	01000034 	movhi	r4,0
    3184:	21023704 	addi	r4,r4,2268
    3188:	89000f15 	stw	r4,60(r17)
    318c:	18c02014 	ori	r3,r3,128
    3190:	80c0030d 	sth	r3,12(r16)
    3194:	80800015 	stw	r2,0(r16)
    3198:	80800415 	stw	r2,16(r16)
    319c:	84800515 	stw	r18,20(r16)
    31a0:	98001a1e 	bne	r19,zero,320c <__smakebuf_r+0x15c>
    31a4:	dfc01317 	ldw	ra,76(sp)
    31a8:	dcc01217 	ldw	r19,72(sp)
    31ac:	dc801117 	ldw	r18,68(sp)
    31b0:	dc401017 	ldw	r17,64(sp)
    31b4:	dc000f17 	ldw	r16,60(sp)
    31b8:	dec01404 	addi	sp,sp,80
    31bc:	f800283a 	ret
    31c0:	288010c4 	addi	r2,r5,67
    31c4:	28800015 	stw	r2,0(r5)
    31c8:	28800415 	stw	r2,16(r5)
    31cc:	00800044 	movi	r2,1
    31d0:	28800515 	stw	r2,20(r5)
    31d4:	f800283a 	ret
    31d8:	04801004 	movi	r18,64
    31dc:	003fe006 	br	3160 <__alt_mem_onchip_memory2_0+0xfbfff160>
    31e0:	81000a17 	ldw	r4,40(r16)
    31e4:	00c00034 	movhi	r3,0
    31e8:	18c98104 	addi	r3,r3,9732
    31ec:	20ffc51e 	bne	r4,r3,3104 <__alt_mem_onchip_memory2_0+0xfbfff104>
    31f0:	8080030b 	ldhu	r2,12(r16)
    31f4:	04810004 	movi	r18,1024
    31f8:	84801315 	stw	r18,76(r16)
    31fc:	1484b03a 	or	r2,r2,r18
    3200:	8080030d 	sth	r2,12(r16)
    3204:	0027883a 	mov	r19,zero
    3208:	003fd806 	br	316c <__alt_mem_onchip_memory2_0+0xfbfff16c>
    320c:	8140038f 	ldh	r5,14(r16)
    3210:	8809883a 	mov	r4,r17
    3214:	00033280 	call	3328 <_isatty_r>
    3218:	103fe226 	beq	r2,zero,31a4 <__alt_mem_onchip_memory2_0+0xfbfff1a4>
    321c:	8080030b 	ldhu	r2,12(r16)
    3220:	10800054 	ori	r2,r2,1
    3224:	8080030d 	sth	r2,12(r16)
    3228:	003fde06 	br	31a4 <__alt_mem_onchip_memory2_0+0xfbfff1a4>
    322c:	8080030b 	ldhu	r2,12(r16)
    3230:	10c0800c 	andi	r3,r2,512
    3234:	183fdb1e 	bne	r3,zero,31a4 <__alt_mem_onchip_memory2_0+0xfbfff1a4>
    3238:	10800094 	ori	r2,r2,2
    323c:	80c010c4 	addi	r3,r16,67
    3240:	8080030d 	sth	r2,12(r16)
    3244:	00800044 	movi	r2,1
    3248:	80c00015 	stw	r3,0(r16)
    324c:	80c00415 	stw	r3,16(r16)
    3250:	80800515 	stw	r2,20(r16)
    3254:	003fd306 	br	31a4 <__alt_mem_onchip_memory2_0+0xfbfff1a4>
    3258:	04810004 	movi	r18,1024
    325c:	003fc306 	br	316c <__alt_mem_onchip_memory2_0+0xfbfff16c>
    3260:	0027883a 	mov	r19,zero
    3264:	04810004 	movi	r18,1024
    3268:	003fc006 	br	316c <__alt_mem_onchip_memory2_0+0xfbfff16c>

0000326c <_read_r>:
    326c:	defffd04 	addi	sp,sp,-12
    3270:	2805883a 	mov	r2,r5
    3274:	dc000015 	stw	r16,0(sp)
    3278:	04000074 	movhi	r16,1
    327c:	dc400115 	stw	r17,4(sp)
    3280:	300b883a 	mov	r5,r6
    3284:	840a0304 	addi	r16,r16,10252
    3288:	2023883a 	mov	r17,r4
    328c:	380d883a 	mov	r6,r7
    3290:	1009883a 	mov	r4,r2
    3294:	dfc00215 	stw	ra,8(sp)
    3298:	80000015 	stw	zero,0(r16)
    329c:	00039ec0 	call	39ec <read>
    32a0:	00ffffc4 	movi	r3,-1
    32a4:	10c00526 	beq	r2,r3,32bc <_read_r+0x50>
    32a8:	dfc00217 	ldw	ra,8(sp)
    32ac:	dc400117 	ldw	r17,4(sp)
    32b0:	dc000017 	ldw	r16,0(sp)
    32b4:	dec00304 	addi	sp,sp,12
    32b8:	f800283a 	ret
    32bc:	80c00017 	ldw	r3,0(r16)
    32c0:	183ff926 	beq	r3,zero,32a8 <__alt_mem_onchip_memory2_0+0xfbfff2a8>
    32c4:	88c00015 	stw	r3,0(r17)
    32c8:	003ff706 	br	32a8 <__alt_mem_onchip_memory2_0+0xfbfff2a8>

000032cc <_fstat_r>:
    32cc:	defffd04 	addi	sp,sp,-12
    32d0:	2805883a 	mov	r2,r5
    32d4:	dc000015 	stw	r16,0(sp)
    32d8:	04000074 	movhi	r16,1
    32dc:	dc400115 	stw	r17,4(sp)
    32e0:	840a0304 	addi	r16,r16,10252
    32e4:	2023883a 	mov	r17,r4
    32e8:	300b883a 	mov	r5,r6
    32ec:	1009883a 	mov	r4,r2
    32f0:	dfc00215 	stw	ra,8(sp)
    32f4:	80000015 	stw	zero,0(r16)
    32f8:	00034f00 	call	34f0 <fstat>
    32fc:	00ffffc4 	movi	r3,-1
    3300:	10c00526 	beq	r2,r3,3318 <_fstat_r+0x4c>
    3304:	dfc00217 	ldw	ra,8(sp)
    3308:	dc400117 	ldw	r17,4(sp)
    330c:	dc000017 	ldw	r16,0(sp)
    3310:	dec00304 	addi	sp,sp,12
    3314:	f800283a 	ret
    3318:	80c00017 	ldw	r3,0(r16)
    331c:	183ff926 	beq	r3,zero,3304 <__alt_mem_onchip_memory2_0+0xfbfff304>
    3320:	88c00015 	stw	r3,0(r17)
    3324:	003ff706 	br	3304 <__alt_mem_onchip_memory2_0+0xfbfff304>

00003328 <_isatty_r>:
    3328:	defffd04 	addi	sp,sp,-12
    332c:	dc000015 	stw	r16,0(sp)
    3330:	04000074 	movhi	r16,1
    3334:	dc400115 	stw	r17,4(sp)
    3338:	840a0304 	addi	r16,r16,10252
    333c:	2023883a 	mov	r17,r4
    3340:	2809883a 	mov	r4,r5
    3344:	dfc00215 	stw	ra,8(sp)
    3348:	80000015 	stw	zero,0(r16)
    334c:	00035dc0 	call	35dc <isatty>
    3350:	00ffffc4 	movi	r3,-1
    3354:	10c00526 	beq	r2,r3,336c <_isatty_r+0x44>
    3358:	dfc00217 	ldw	ra,8(sp)
    335c:	dc400117 	ldw	r17,4(sp)
    3360:	dc000017 	ldw	r16,0(sp)
    3364:	dec00304 	addi	sp,sp,12
    3368:	f800283a 	ret
    336c:	80c00017 	ldw	r3,0(r16)
    3370:	183ff926 	beq	r3,zero,3358 <__alt_mem_onchip_memory2_0+0xfbfff358>
    3374:	88c00015 	stw	r3,0(r17)
    3378:	003ff706 	br	3358 <__alt_mem_onchip_memory2_0+0xfbfff358>

0000337c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    337c:	defffe04 	addi	sp,sp,-8
    3380:	dfc00115 	stw	ra,4(sp)
    3384:	df000015 	stw	fp,0(sp)
    3388:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    338c:	d0a01017 	ldw	r2,-32704(gp)
    3390:	10000326 	beq	r2,zero,33a0 <alt_get_errno+0x24>
    3394:	d0a01017 	ldw	r2,-32704(gp)
    3398:	103ee83a 	callr	r2
    339c:	00000106 	br	33a4 <alt_get_errno+0x28>
    33a0:	d0a73204 	addi	r2,gp,-25400
}
    33a4:	e037883a 	mov	sp,fp
    33a8:	dfc00117 	ldw	ra,4(sp)
    33ac:	df000017 	ldw	fp,0(sp)
    33b0:	dec00204 	addi	sp,sp,8
    33b4:	f800283a 	ret

000033b8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    33b8:	defffb04 	addi	sp,sp,-20
    33bc:	dfc00415 	stw	ra,16(sp)
    33c0:	df000315 	stw	fp,12(sp)
    33c4:	df000304 	addi	fp,sp,12
    33c8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    33cc:	e0bfff17 	ldw	r2,-4(fp)
    33d0:	10000616 	blt	r2,zero,33ec <close+0x34>
    33d4:	e0bfff17 	ldw	r2,-4(fp)
    33d8:	10c00324 	muli	r3,r2,12
    33dc:	00800074 	movhi	r2,1
    33e0:	10be2204 	addi	r2,r2,-1912
    33e4:	1885883a 	add	r2,r3,r2
    33e8:	00000106 	br	33f0 <close+0x38>
    33ec:	0005883a 	mov	r2,zero
    33f0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    33f4:	e0bffd17 	ldw	r2,-12(fp)
    33f8:	10001926 	beq	r2,zero,3460 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    33fc:	e0bffd17 	ldw	r2,-12(fp)
    3400:	10800017 	ldw	r2,0(r2)
    3404:	10800417 	ldw	r2,16(r2)
    3408:	10000626 	beq	r2,zero,3424 <close+0x6c>
    340c:	e0bffd17 	ldw	r2,-12(fp)
    3410:	10800017 	ldw	r2,0(r2)
    3414:	10800417 	ldw	r2,16(r2)
    3418:	e13ffd17 	ldw	r4,-12(fp)
    341c:	103ee83a 	callr	r2
    3420:	00000106 	br	3428 <close+0x70>
    3424:	0005883a 	mov	r2,zero
    3428:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    342c:	e13fff17 	ldw	r4,-4(fp)
    3430:	0003ae80 	call	3ae8 <alt_release_fd>
    if (rval < 0)
    3434:	e0bffe17 	ldw	r2,-8(fp)
    3438:	1000070e 	bge	r2,zero,3458 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    343c:	000337c0 	call	337c <alt_get_errno>
    3440:	1007883a 	mov	r3,r2
    3444:	e0bffe17 	ldw	r2,-8(fp)
    3448:	0085c83a 	sub	r2,zero,r2
    344c:	18800015 	stw	r2,0(r3)
      return -1;
    3450:	00bfffc4 	movi	r2,-1
    3454:	00000706 	br	3474 <close+0xbc>
    }
    return 0;
    3458:	0005883a 	mov	r2,zero
    345c:	00000506 	br	3474 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3460:	000337c0 	call	337c <alt_get_errno>
    3464:	1007883a 	mov	r3,r2
    3468:	00801444 	movi	r2,81
    346c:	18800015 	stw	r2,0(r3)
    return -1;
    3470:	00bfffc4 	movi	r2,-1
  }
}
    3474:	e037883a 	mov	sp,fp
    3478:	dfc00117 	ldw	ra,4(sp)
    347c:	df000017 	ldw	fp,0(sp)
    3480:	dec00204 	addi	sp,sp,8
    3484:	f800283a 	ret

00003488 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    3488:	defffc04 	addi	sp,sp,-16
    348c:	df000315 	stw	fp,12(sp)
    3490:	df000304 	addi	fp,sp,12
    3494:	e13ffd15 	stw	r4,-12(fp)
    3498:	e17ffe15 	stw	r5,-8(fp)
    349c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    34a0:	e0bfff17 	ldw	r2,-4(fp)
}
    34a4:	e037883a 	mov	sp,fp
    34a8:	df000017 	ldw	fp,0(sp)
    34ac:	dec00104 	addi	sp,sp,4
    34b0:	f800283a 	ret

000034b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    34b4:	defffe04 	addi	sp,sp,-8
    34b8:	dfc00115 	stw	ra,4(sp)
    34bc:	df000015 	stw	fp,0(sp)
    34c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    34c4:	d0a01017 	ldw	r2,-32704(gp)
    34c8:	10000326 	beq	r2,zero,34d8 <alt_get_errno+0x24>
    34cc:	d0a01017 	ldw	r2,-32704(gp)
    34d0:	103ee83a 	callr	r2
    34d4:	00000106 	br	34dc <alt_get_errno+0x28>
    34d8:	d0a73204 	addi	r2,gp,-25400
}
    34dc:	e037883a 	mov	sp,fp
    34e0:	dfc00117 	ldw	ra,4(sp)
    34e4:	df000017 	ldw	fp,0(sp)
    34e8:	dec00204 	addi	sp,sp,8
    34ec:	f800283a 	ret

000034f0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    34f0:	defffb04 	addi	sp,sp,-20
    34f4:	dfc00415 	stw	ra,16(sp)
    34f8:	df000315 	stw	fp,12(sp)
    34fc:	df000304 	addi	fp,sp,12
    3500:	e13ffe15 	stw	r4,-8(fp)
    3504:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3508:	e0bffe17 	ldw	r2,-8(fp)
    350c:	10000616 	blt	r2,zero,3528 <fstat+0x38>
    3510:	e0bffe17 	ldw	r2,-8(fp)
    3514:	10c00324 	muli	r3,r2,12
    3518:	00800074 	movhi	r2,1
    351c:	10be2204 	addi	r2,r2,-1912
    3520:	1885883a 	add	r2,r3,r2
    3524:	00000106 	br	352c <fstat+0x3c>
    3528:	0005883a 	mov	r2,zero
    352c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    3530:	e0bffd17 	ldw	r2,-12(fp)
    3534:	10001026 	beq	r2,zero,3578 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    3538:	e0bffd17 	ldw	r2,-12(fp)
    353c:	10800017 	ldw	r2,0(r2)
    3540:	10800817 	ldw	r2,32(r2)
    3544:	10000726 	beq	r2,zero,3564 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    3548:	e0bffd17 	ldw	r2,-12(fp)
    354c:	10800017 	ldw	r2,0(r2)
    3550:	10800817 	ldw	r2,32(r2)
    3554:	e17fff17 	ldw	r5,-4(fp)
    3558:	e13ffd17 	ldw	r4,-12(fp)
    355c:	103ee83a 	callr	r2
    3560:	00000a06 	br	358c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    3564:	e0bfff17 	ldw	r2,-4(fp)
    3568:	00c80004 	movi	r3,8192
    356c:	10c00115 	stw	r3,4(r2)
      return 0;
    3570:	0005883a 	mov	r2,zero
    3574:	00000506 	br	358c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3578:	00034b40 	call	34b4 <alt_get_errno>
    357c:	1007883a 	mov	r3,r2
    3580:	00801444 	movi	r2,81
    3584:	18800015 	stw	r2,0(r3)
    return -1;
    3588:	00bfffc4 	movi	r2,-1
  }
}
    358c:	e037883a 	mov	sp,fp
    3590:	dfc00117 	ldw	ra,4(sp)
    3594:	df000017 	ldw	fp,0(sp)
    3598:	dec00204 	addi	sp,sp,8
    359c:	f800283a 	ret

000035a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    35a0:	defffe04 	addi	sp,sp,-8
    35a4:	dfc00115 	stw	ra,4(sp)
    35a8:	df000015 	stw	fp,0(sp)
    35ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    35b0:	d0a01017 	ldw	r2,-32704(gp)
    35b4:	10000326 	beq	r2,zero,35c4 <alt_get_errno+0x24>
    35b8:	d0a01017 	ldw	r2,-32704(gp)
    35bc:	103ee83a 	callr	r2
    35c0:	00000106 	br	35c8 <alt_get_errno+0x28>
    35c4:	d0a73204 	addi	r2,gp,-25400
}
    35c8:	e037883a 	mov	sp,fp
    35cc:	dfc00117 	ldw	ra,4(sp)
    35d0:	df000017 	ldw	fp,0(sp)
    35d4:	dec00204 	addi	sp,sp,8
    35d8:	f800283a 	ret

000035dc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    35dc:	deffed04 	addi	sp,sp,-76
    35e0:	dfc01215 	stw	ra,72(sp)
    35e4:	df001115 	stw	fp,68(sp)
    35e8:	df001104 	addi	fp,sp,68
    35ec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    35f0:	e0bfff17 	ldw	r2,-4(fp)
    35f4:	10000616 	blt	r2,zero,3610 <isatty+0x34>
    35f8:	e0bfff17 	ldw	r2,-4(fp)
    35fc:	10c00324 	muli	r3,r2,12
    3600:	00800074 	movhi	r2,1
    3604:	10be2204 	addi	r2,r2,-1912
    3608:	1885883a 	add	r2,r3,r2
    360c:	00000106 	br	3614 <isatty+0x38>
    3610:	0005883a 	mov	r2,zero
    3614:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    3618:	e0bfef17 	ldw	r2,-68(fp)
    361c:	10000e26 	beq	r2,zero,3658 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    3620:	e0bfef17 	ldw	r2,-68(fp)
    3624:	10800017 	ldw	r2,0(r2)
    3628:	10800817 	ldw	r2,32(r2)
    362c:	1000021e 	bne	r2,zero,3638 <isatty+0x5c>
    {
      return 1;
    3630:	00800044 	movi	r2,1
    3634:	00000d06 	br	366c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    3638:	e0bff004 	addi	r2,fp,-64
    363c:	100b883a 	mov	r5,r2
    3640:	e13fff17 	ldw	r4,-4(fp)
    3644:	00034f00 	call	34f0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    3648:	e0bff117 	ldw	r2,-60(fp)
    364c:	10880020 	cmpeqi	r2,r2,8192
    3650:	10803fcc 	andi	r2,r2,255
    3654:	00000506 	br	366c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3658:	00035a00 	call	35a0 <alt_get_errno>
    365c:	1007883a 	mov	r3,r2
    3660:	00801444 	movi	r2,81
    3664:	18800015 	stw	r2,0(r3)
    return 0;
    3668:	0005883a 	mov	r2,zero
  }
}
    366c:	e037883a 	mov	sp,fp
    3670:	dfc00117 	ldw	ra,4(sp)
    3674:	df000017 	ldw	fp,0(sp)
    3678:	dec00204 	addi	sp,sp,8
    367c:	f800283a 	ret

00003680 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    3680:	defffc04 	addi	sp,sp,-16
    3684:	df000315 	stw	fp,12(sp)
    3688:	df000304 	addi	fp,sp,12
    368c:	e13ffd15 	stw	r4,-12(fp)
    3690:	e17ffe15 	stw	r5,-8(fp)
    3694:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    3698:	e0fffe17 	ldw	r3,-8(fp)
    369c:	e0bffd17 	ldw	r2,-12(fp)
    36a0:	18800c26 	beq	r3,r2,36d4 <alt_load_section+0x54>
  {
    while( to != end )
    36a4:	00000806 	br	36c8 <alt_load_section+0x48>
    {
      *to++ = *from++;
    36a8:	e0bffe17 	ldw	r2,-8(fp)
    36ac:	10c00104 	addi	r3,r2,4
    36b0:	e0fffe15 	stw	r3,-8(fp)
    36b4:	e0fffd17 	ldw	r3,-12(fp)
    36b8:	19000104 	addi	r4,r3,4
    36bc:	e13ffd15 	stw	r4,-12(fp)
    36c0:	18c00017 	ldw	r3,0(r3)
    36c4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    36c8:	e0fffe17 	ldw	r3,-8(fp)
    36cc:	e0bfff17 	ldw	r2,-4(fp)
    36d0:	18bff51e 	bne	r3,r2,36a8 <__alt_mem_onchip_memory2_0+0xfbfff6a8>
    {
      *to++ = *from++;
    }
  }
}
    36d4:	0001883a 	nop
    36d8:	e037883a 	mov	sp,fp
    36dc:	df000017 	ldw	fp,0(sp)
    36e0:	dec00104 	addi	sp,sp,4
    36e4:	f800283a 	ret

000036e8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    36e8:	defffe04 	addi	sp,sp,-8
    36ec:	dfc00115 	stw	ra,4(sp)
    36f0:	df000015 	stw	fp,0(sp)
    36f4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    36f8:	01800074 	movhi	r6,1
    36fc:	31830504 	addi	r6,r6,3092
    3700:	01400074 	movhi	r5,1
    3704:	297c0a04 	addi	r5,r5,-4056
    3708:	01000074 	movhi	r4,1
    370c:	21030504 	addi	r4,r4,3092
    3710:	00036800 	call	3680 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    3714:	01800034 	movhi	r6,0
    3718:	31809104 	addi	r6,r6,580
    371c:	01400034 	movhi	r5,0
    3720:	29400804 	addi	r5,r5,32
    3724:	01000034 	movhi	r4,0
    3728:	21000804 	addi	r4,r4,32
    372c:	00036800 	call	3680 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    3730:	01800074 	movhi	r6,1
    3734:	31bc0a04 	addi	r6,r6,-4056
    3738:	01400074 	movhi	r5,1
    373c:	297aeb04 	addi	r5,r5,-5204
    3740:	01000074 	movhi	r4,1
    3744:	213aeb04 	addi	r4,r4,-5204
    3748:	00036800 	call	3680 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    374c:	000d3940 	call	d394 <alt_dcache_flush_all>
  alt_icache_flush_all();
    3750:	000d57c0 	call	d57c <alt_icache_flush_all>
}
    3754:	0001883a 	nop
    3758:	e037883a 	mov	sp,fp
    375c:	dfc00117 	ldw	ra,4(sp)
    3760:	df000017 	ldw	fp,0(sp)
    3764:	dec00204 	addi	sp,sp,8
    3768:	f800283a 	ret

0000376c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    376c:	defffe04 	addi	sp,sp,-8
    3770:	dfc00115 	stw	ra,4(sp)
    3774:	df000015 	stw	fp,0(sp)
    3778:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    377c:	d0a01017 	ldw	r2,-32704(gp)
    3780:	10000326 	beq	r2,zero,3790 <alt_get_errno+0x24>
    3784:	d0a01017 	ldw	r2,-32704(gp)
    3788:	103ee83a 	callr	r2
    378c:	00000106 	br	3794 <alt_get_errno+0x28>
    3790:	d0a73204 	addi	r2,gp,-25400
}
    3794:	e037883a 	mov	sp,fp
    3798:	dfc00117 	ldw	ra,4(sp)
    379c:	df000017 	ldw	fp,0(sp)
    37a0:	dec00204 	addi	sp,sp,8
    37a4:	f800283a 	ret

000037a8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    37a8:	defff904 	addi	sp,sp,-28
    37ac:	dfc00615 	stw	ra,24(sp)
    37b0:	df000515 	stw	fp,20(sp)
    37b4:	df000504 	addi	fp,sp,20
    37b8:	e13ffd15 	stw	r4,-12(fp)
    37bc:	e17ffe15 	stw	r5,-8(fp)
    37c0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    37c4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    37c8:	e0bffd17 	ldw	r2,-12(fp)
    37cc:	10000616 	blt	r2,zero,37e8 <lseek+0x40>
    37d0:	e0bffd17 	ldw	r2,-12(fp)
    37d4:	10c00324 	muli	r3,r2,12
    37d8:	00800074 	movhi	r2,1
    37dc:	10be2204 	addi	r2,r2,-1912
    37e0:	1885883a 	add	r2,r3,r2
    37e4:	00000106 	br	37ec <lseek+0x44>
    37e8:	0005883a 	mov	r2,zero
    37ec:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    37f0:	e0bffc17 	ldw	r2,-16(fp)
    37f4:	10001026 	beq	r2,zero,3838 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    37f8:	e0bffc17 	ldw	r2,-16(fp)
    37fc:	10800017 	ldw	r2,0(r2)
    3800:	10800717 	ldw	r2,28(r2)
    3804:	10000926 	beq	r2,zero,382c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    3808:	e0bffc17 	ldw	r2,-16(fp)
    380c:	10800017 	ldw	r2,0(r2)
    3810:	10800717 	ldw	r2,28(r2)
    3814:	e1bfff17 	ldw	r6,-4(fp)
    3818:	e17ffe17 	ldw	r5,-8(fp)
    381c:	e13ffc17 	ldw	r4,-16(fp)
    3820:	103ee83a 	callr	r2
    3824:	e0bffb15 	stw	r2,-20(fp)
    3828:	00000506 	br	3840 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    382c:	00bfde84 	movi	r2,-134
    3830:	e0bffb15 	stw	r2,-20(fp)
    3834:	00000206 	br	3840 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    3838:	00bfebc4 	movi	r2,-81
    383c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    3840:	e0bffb17 	ldw	r2,-20(fp)
    3844:	1000070e 	bge	r2,zero,3864 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    3848:	000376c0 	call	376c <alt_get_errno>
    384c:	1007883a 	mov	r3,r2
    3850:	e0bffb17 	ldw	r2,-20(fp)
    3854:	0085c83a 	sub	r2,zero,r2
    3858:	18800015 	stw	r2,0(r3)
    rc = -1;
    385c:	00bfffc4 	movi	r2,-1
    3860:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    3864:	e0bffb17 	ldw	r2,-20(fp)
}
    3868:	e037883a 	mov	sp,fp
    386c:	dfc00117 	ldw	ra,4(sp)
    3870:	df000017 	ldw	fp,0(sp)
    3874:	dec00204 	addi	sp,sp,8
    3878:	f800283a 	ret

0000387c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    387c:	defff904 	addi	sp,sp,-28
    3880:	dfc00615 	stw	ra,24(sp)
    3884:	df000515 	stw	fp,20(sp)
    3888:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    388c:	0009883a 	mov	r4,zero
    3890:	000b83c0 	call	b83c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    3894:	00048b00 	call	48b0 <OSInit>
    3898:	01000044 	movi	r4,1
    389c:	00092000 	call	9200 <OSSemCreate>
    38a0:	d0a73815 	stw	r2,-25376(gp)
    38a4:	01000044 	movi	r4,1
    38a8:	00092000 	call	9200 <OSSemCreate>
    38ac:	d0a73a15 	stw	r2,-25368(gp)
    38b0:	d0a73304 	addi	r2,gp,-25396
    38b4:	e0bffc15 	stw	r2,-16(fp)
    38b8:	00800044 	movi	r2,1
    38bc:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    38c0:	e0bffd0b 	ldhu	r2,-12(fp)
    38c4:	1009883a 	mov	r4,r2
    38c8:	00092000 	call	9200 <OSSemCreate>
    38cc:	1007883a 	mov	r3,r2
    38d0:	e0bffc17 	ldw	r2,-16(fp)
    38d4:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    38d8:	000b8740 	call	b874 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    38dc:	01800074 	movhi	r6,1
    38e0:	31bbb404 	addi	r6,r6,-4400
    38e4:	01400074 	movhi	r5,1
    38e8:	297bb404 	addi	r5,r5,-4400
    38ec:	01000074 	movhi	r4,1
    38f0:	213bb404 	addi	r4,r4,-4400
    38f4:	000d9140 	call	d914 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    38f8:	000d4bc0 	call	d4bc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    38fc:	01000074 	movhi	r4,1
    3900:	21354704 	addi	r4,r4,-10980
    3904:	000e4a40 	call	e4a4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    3908:	d0a73417 	ldw	r2,-25392(gp)
    390c:	d0e73517 	ldw	r3,-25388(gp)
    3910:	d1273617 	ldw	r4,-25384(gp)
    3914:	200d883a 	mov	r6,r4
    3918:	180b883a 	mov	r5,r3
    391c:	1009883a 	mov	r4,r2
    3920:	000046c0 	call	46c <main>
    3924:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    3928:	01000044 	movi	r4,1
    392c:	00033b80 	call	33b8 <close>
  exit (result);
    3930:	e13ffb17 	ldw	r4,-20(fp)
    3934:	000e4b80 	call	e4b8 <exit>

00003938 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    3938:	defffd04 	addi	sp,sp,-12
    393c:	dfc00215 	stw	ra,8(sp)
    3940:	df000115 	stw	fp,4(sp)
    3944:	df000104 	addi	fp,sp,4
    3948:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    394c:	d0a00817 	ldw	r2,-32736(gp)
    3950:	10800217 	ldw	r2,8(r2)
    3954:	100b883a 	mov	r5,r2
    3958:	e13fff17 	ldw	r4,-4(fp)
    395c:	000e6c00 	call	e6c0 <putc>
#endif
#endif
}
    3960:	e037883a 	mov	sp,fp
    3964:	dfc00117 	ldw	ra,4(sp)
    3968:	df000017 	ldw	fp,0(sp)
    396c:	dec00204 	addi	sp,sp,8
    3970:	f800283a 	ret

00003974 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    3974:	defffd04 	addi	sp,sp,-12
    3978:	dfc00215 	stw	ra,8(sp)
    397c:	df000115 	stw	fp,4(sp)
    3980:	df000104 	addi	fp,sp,4
    3984:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
    3988:	d0a00817 	ldw	r2,-32736(gp)
    398c:	10800217 	ldw	r2,8(r2)
    3990:	100b883a 	mov	r5,r2
    3994:	e13fff17 	ldw	r4,-4(fp)
    3998:	000e58c0 	call	e58c <fputs>
#endif
#endif
}
    399c:	e037883a 	mov	sp,fp
    39a0:	dfc00117 	ldw	ra,4(sp)
    39a4:	df000017 	ldw	fp,0(sp)
    39a8:	dec00204 	addi	sp,sp,8
    39ac:	f800283a 	ret

000039b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    39b0:	defffe04 	addi	sp,sp,-8
    39b4:	dfc00115 	stw	ra,4(sp)
    39b8:	df000015 	stw	fp,0(sp)
    39bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    39c0:	d0a01017 	ldw	r2,-32704(gp)
    39c4:	10000326 	beq	r2,zero,39d4 <alt_get_errno+0x24>
    39c8:	d0a01017 	ldw	r2,-32704(gp)
    39cc:	103ee83a 	callr	r2
    39d0:	00000106 	br	39d8 <alt_get_errno+0x28>
    39d4:	d0a73204 	addi	r2,gp,-25400
}
    39d8:	e037883a 	mov	sp,fp
    39dc:	dfc00117 	ldw	ra,4(sp)
    39e0:	df000017 	ldw	fp,0(sp)
    39e4:	dec00204 	addi	sp,sp,8
    39e8:	f800283a 	ret

000039ec <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    39ec:	defff904 	addi	sp,sp,-28
    39f0:	dfc00615 	stw	ra,24(sp)
    39f4:	df000515 	stw	fp,20(sp)
    39f8:	df000504 	addi	fp,sp,20
    39fc:	e13ffd15 	stw	r4,-12(fp)
    3a00:	e17ffe15 	stw	r5,-8(fp)
    3a04:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3a08:	e0bffd17 	ldw	r2,-12(fp)
    3a0c:	10000616 	blt	r2,zero,3a28 <read+0x3c>
    3a10:	e0bffd17 	ldw	r2,-12(fp)
    3a14:	10c00324 	muli	r3,r2,12
    3a18:	00800074 	movhi	r2,1
    3a1c:	10be2204 	addi	r2,r2,-1912
    3a20:	1885883a 	add	r2,r3,r2
    3a24:	00000106 	br	3a2c <read+0x40>
    3a28:	0005883a 	mov	r2,zero
    3a2c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    3a30:	e0bffb17 	ldw	r2,-20(fp)
    3a34:	10002226 	beq	r2,zero,3ac0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    3a38:	e0bffb17 	ldw	r2,-20(fp)
    3a3c:	10800217 	ldw	r2,8(r2)
    3a40:	108000cc 	andi	r2,r2,3
    3a44:	10800060 	cmpeqi	r2,r2,1
    3a48:	1000181e 	bne	r2,zero,3aac <read+0xc0>
        (fd->dev->read))
    3a4c:	e0bffb17 	ldw	r2,-20(fp)
    3a50:	10800017 	ldw	r2,0(r2)
    3a54:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    3a58:	10001426 	beq	r2,zero,3aac <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    3a5c:	e0bffb17 	ldw	r2,-20(fp)
    3a60:	10800017 	ldw	r2,0(r2)
    3a64:	10800517 	ldw	r2,20(r2)
    3a68:	e0ffff17 	ldw	r3,-4(fp)
    3a6c:	180d883a 	mov	r6,r3
    3a70:	e17ffe17 	ldw	r5,-8(fp)
    3a74:	e13ffb17 	ldw	r4,-20(fp)
    3a78:	103ee83a 	callr	r2
    3a7c:	e0bffc15 	stw	r2,-16(fp)
    3a80:	e0bffc17 	ldw	r2,-16(fp)
    3a84:	1000070e 	bge	r2,zero,3aa4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    3a88:	00039b00 	call	39b0 <alt_get_errno>
    3a8c:	1007883a 	mov	r3,r2
    3a90:	e0bffc17 	ldw	r2,-16(fp)
    3a94:	0085c83a 	sub	r2,zero,r2
    3a98:	18800015 	stw	r2,0(r3)
          return -1;
    3a9c:	00bfffc4 	movi	r2,-1
    3aa0:	00000c06 	br	3ad4 <read+0xe8>
        }
        return rval;
    3aa4:	e0bffc17 	ldw	r2,-16(fp)
    3aa8:	00000a06 	br	3ad4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    3aac:	00039b00 	call	39b0 <alt_get_errno>
    3ab0:	1007883a 	mov	r3,r2
    3ab4:	00800344 	movi	r2,13
    3ab8:	18800015 	stw	r2,0(r3)
    3abc:	00000406 	br	3ad0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    3ac0:	00039b00 	call	39b0 <alt_get_errno>
    3ac4:	1007883a 	mov	r3,r2
    3ac8:	00801444 	movi	r2,81
    3acc:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3ad0:	00bfffc4 	movi	r2,-1
}
    3ad4:	e037883a 	mov	sp,fp
    3ad8:	dfc00117 	ldw	ra,4(sp)
    3adc:	df000017 	ldw	fp,0(sp)
    3ae0:	dec00204 	addi	sp,sp,8
    3ae4:	f800283a 	ret

00003ae8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    3ae8:	defffe04 	addi	sp,sp,-8
    3aec:	df000115 	stw	fp,4(sp)
    3af0:	df000104 	addi	fp,sp,4
    3af4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    3af8:	e0bfff17 	ldw	r2,-4(fp)
    3afc:	108000d0 	cmplti	r2,r2,3
    3b00:	10000d1e 	bne	r2,zero,3b38 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    3b04:	00800074 	movhi	r2,1
    3b08:	10be2204 	addi	r2,r2,-1912
    3b0c:	e0ffff17 	ldw	r3,-4(fp)
    3b10:	18c00324 	muli	r3,r3,12
    3b14:	10c5883a 	add	r2,r2,r3
    3b18:	10800204 	addi	r2,r2,8
    3b1c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    3b20:	00800074 	movhi	r2,1
    3b24:	10be2204 	addi	r2,r2,-1912
    3b28:	e0ffff17 	ldw	r3,-4(fp)
    3b2c:	18c00324 	muli	r3,r3,12
    3b30:	10c5883a 	add	r2,r2,r3
    3b34:	10000015 	stw	zero,0(r2)
  }
}
    3b38:	0001883a 	nop
    3b3c:	e037883a 	mov	sp,fp
    3b40:	df000017 	ldw	fp,0(sp)
    3b44:	dec00104 	addi	sp,sp,4
    3b48:	f800283a 	ret

00003b4c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    3b4c:	defff904 	addi	sp,sp,-28
    3b50:	df000615 	stw	fp,24(sp)
    3b54:	df000604 	addi	fp,sp,24
    3b58:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3b5c:	0005303a 	rdctl	r2,status
    3b60:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3b64:	e0fffe17 	ldw	r3,-8(fp)
    3b68:	00bfff84 	movi	r2,-2
    3b6c:	1884703a 	and	r2,r3,r2
    3b70:	1001703a 	wrctl	status,r2
  
  return context;
    3b74:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    3b78:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    3b7c:	d0a01117 	ldw	r2,-32700(gp)
    3b80:	10c000c4 	addi	r3,r2,3
    3b84:	00bfff04 	movi	r2,-4
    3b88:	1884703a 	and	r2,r3,r2
    3b8c:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    3b90:	d0e01117 	ldw	r3,-32700(gp)
    3b94:	e0bfff17 	ldw	r2,-4(fp)
    3b98:	1887883a 	add	r3,r3,r2
    3b9c:	00810034 	movhi	r2,1024
    3ba0:	10800004 	addi	r2,r2,0
    3ba4:	10c0062e 	bgeu	r2,r3,3bc0 <sbrk+0x74>
    3ba8:	e0bffb17 	ldw	r2,-20(fp)
    3bac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3bb0:	e0bffa17 	ldw	r2,-24(fp)
    3bb4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    3bb8:	00bfffc4 	movi	r2,-1
    3bbc:	00000b06 	br	3bec <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    3bc0:	d0a01117 	ldw	r2,-32700(gp)
    3bc4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    3bc8:	d0e01117 	ldw	r3,-32700(gp)
    3bcc:	e0bfff17 	ldw	r2,-4(fp)
    3bd0:	1885883a 	add	r2,r3,r2
    3bd4:	d0a01115 	stw	r2,-32700(gp)
    3bd8:	e0bffb17 	ldw	r2,-20(fp)
    3bdc:	e0bffc15 	stw	r2,-16(fp)
    3be0:	e0bffc17 	ldw	r2,-16(fp)
    3be4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    3be8:	e0bffd17 	ldw	r2,-12(fp)
} 
    3bec:	e037883a 	mov	sp,fp
    3bf0:	df000017 	ldw	fp,0(sp)
    3bf4:	dec00104 	addi	sp,sp,4
    3bf8:	f800283a 	ret

00003bfc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3bfc:	defffe04 	addi	sp,sp,-8
    3c00:	dfc00115 	stw	ra,4(sp)
    3c04:	df000015 	stw	fp,0(sp)
    3c08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3c0c:	d0a01017 	ldw	r2,-32704(gp)
    3c10:	10000326 	beq	r2,zero,3c20 <alt_get_errno+0x24>
    3c14:	d0a01017 	ldw	r2,-32704(gp)
    3c18:	103ee83a 	callr	r2
    3c1c:	00000106 	br	3c24 <alt_get_errno+0x28>
    3c20:	d0a73204 	addi	r2,gp,-25400
}
    3c24:	e037883a 	mov	sp,fp
    3c28:	dfc00117 	ldw	ra,4(sp)
    3c2c:	df000017 	ldw	fp,0(sp)
    3c30:	dec00204 	addi	sp,sp,8
    3c34:	f800283a 	ret

00003c38 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    3c38:	defff904 	addi	sp,sp,-28
    3c3c:	dfc00615 	stw	ra,24(sp)
    3c40:	df000515 	stw	fp,20(sp)
    3c44:	df000504 	addi	fp,sp,20
    3c48:	e13ffd15 	stw	r4,-12(fp)
    3c4c:	e17ffe15 	stw	r5,-8(fp)
    3c50:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3c54:	e0bffd17 	ldw	r2,-12(fp)
    3c58:	10000616 	blt	r2,zero,3c74 <write+0x3c>
    3c5c:	e0bffd17 	ldw	r2,-12(fp)
    3c60:	10c00324 	muli	r3,r2,12
    3c64:	00800074 	movhi	r2,1
    3c68:	10be2204 	addi	r2,r2,-1912
    3c6c:	1885883a 	add	r2,r3,r2
    3c70:	00000106 	br	3c78 <write+0x40>
    3c74:	0005883a 	mov	r2,zero
    3c78:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    3c7c:	e0bffb17 	ldw	r2,-20(fp)
    3c80:	10002126 	beq	r2,zero,3d08 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    3c84:	e0bffb17 	ldw	r2,-20(fp)
    3c88:	10800217 	ldw	r2,8(r2)
    3c8c:	108000cc 	andi	r2,r2,3
    3c90:	10001826 	beq	r2,zero,3cf4 <write+0xbc>
    3c94:	e0bffb17 	ldw	r2,-20(fp)
    3c98:	10800017 	ldw	r2,0(r2)
    3c9c:	10800617 	ldw	r2,24(r2)
    3ca0:	10001426 	beq	r2,zero,3cf4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    3ca4:	e0bffb17 	ldw	r2,-20(fp)
    3ca8:	10800017 	ldw	r2,0(r2)
    3cac:	10800617 	ldw	r2,24(r2)
    3cb0:	e0ffff17 	ldw	r3,-4(fp)
    3cb4:	180d883a 	mov	r6,r3
    3cb8:	e17ffe17 	ldw	r5,-8(fp)
    3cbc:	e13ffb17 	ldw	r4,-20(fp)
    3cc0:	103ee83a 	callr	r2
    3cc4:	e0bffc15 	stw	r2,-16(fp)
    3cc8:	e0bffc17 	ldw	r2,-16(fp)
    3ccc:	1000070e 	bge	r2,zero,3cec <write+0xb4>
      {
        ALT_ERRNO = -rval;
    3cd0:	0003bfc0 	call	3bfc <alt_get_errno>
    3cd4:	1007883a 	mov	r3,r2
    3cd8:	e0bffc17 	ldw	r2,-16(fp)
    3cdc:	0085c83a 	sub	r2,zero,r2
    3ce0:	18800015 	stw	r2,0(r3)
        return -1;
    3ce4:	00bfffc4 	movi	r2,-1
    3ce8:	00000c06 	br	3d1c <write+0xe4>
      }
      return rval;
    3cec:	e0bffc17 	ldw	r2,-16(fp)
    3cf0:	00000a06 	br	3d1c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    3cf4:	0003bfc0 	call	3bfc <alt_get_errno>
    3cf8:	1007883a 	mov	r3,r2
    3cfc:	00800344 	movi	r2,13
    3d00:	18800015 	stw	r2,0(r3)
    3d04:	00000406 	br	3d18 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    3d08:	0003bfc0 	call	3bfc <alt_get_errno>
    3d0c:	1007883a 	mov	r3,r2
    3d10:	00801444 	movi	r2,81
    3d14:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3d18:	00bfffc4 	movi	r2,-1
}
    3d1c:	e037883a 	mov	sp,fp
    3d20:	dfc00117 	ldw	ra,4(sp)
    3d24:	df000017 	ldw	fp,0(sp)
    3d28:	dec00204 	addi	sp,sp,8
    3d2c:	f800283a 	ret

00003d30 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    3d30:	deffdf04 	addi	sp,sp,-132
    3d34:	dfc02015 	stw	ra,128(sp)
    3d38:	df001f15 	stw	fp,124(sp)
    3d3c:	df001f04 	addi	fp,sp,124
    3d40:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    3d44:	e0bfe204 	addi	r2,fp,-120
    3d48:	100b883a 	mov	r5,r2
    3d4c:	01003fc4 	movi	r4,255
    3d50:	000b1880 	call	b188 <OSTaskQuery>
    3d54:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    3d58:	e0bffe83 	ldbu	r2,-6(fp)
    3d5c:	10803fcc 	andi	r2,r2,255
    3d60:	10001e1e 	bne	r2,zero,3ddc <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
    3d64:	e0bfee83 	ldbu	r2,-70(fp)
    3d68:	10803fcc 	andi	r2,r2,255
    3d6c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    3d70:	d0a73817 	ldw	r2,-25376(gp)
    3d74:	e0fffd04 	addi	r3,fp,-12
    3d78:	180b883a 	mov	r5,r3
    3d7c:	1009883a 	mov	r4,r2
    3d80:	00099a00 	call	99a0 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    3d84:	e0bffe43 	ldbu	r2,-7(fp)
    3d88:	10803fcc 	andi	r2,r2,255
    3d8c:	10000726 	beq	r2,zero,3dac <__env_lock+0x7c>
    3d90:	d0a01217 	ldw	r2,-32696(gp)
    3d94:	e0ffe117 	ldw	r3,-124(fp)
    3d98:	1880041e 	bne	r3,r2,3dac <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
    3d9c:	d0a73717 	ldw	r2,-25380(gp)
    3da0:	10800044 	addi	r2,r2,1
    3da4:	d0a73715 	stw	r2,-25380(gp)
    3da8:	00000a06 	br	3dd4 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    3dac:	d0a73817 	ldw	r2,-25376(gp)
    3db0:	e0fffe84 	addi	r3,fp,-6
    3db4:	180d883a 	mov	r6,r3
    3db8:	000b883a 	mov	r5,zero
    3dbc:	1009883a 	mov	r4,r2
    3dc0:	00095180 	call	9518 <OSSemPend>
    locks  = 1;
    3dc4:	00800044 	movi	r2,1
    3dc8:	d0a73715 	stw	r2,-25380(gp)
    lockid = id;
    3dcc:	e0bfe117 	ldw	r2,-124(fp)
    3dd0:	d0a01215 	stw	r2,-32696(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    3dd4:	0001883a 	nop
    3dd8:	00000106 	br	3de0 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    3ddc:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    3de0:	e037883a 	mov	sp,fp
    3de4:	dfc00117 	ldw	ra,4(sp)
    3de8:	df000017 	ldw	fp,0(sp)
    3dec:	dec00204 	addi	sp,sp,8
    3df0:	f800283a 	ret

00003df4 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    3df4:	defffd04 	addi	sp,sp,-12
    3df8:	dfc00215 	stw	ra,8(sp)
    3dfc:	df000115 	stw	fp,4(sp)
    3e00:	df000104 	addi	fp,sp,4
    3e04:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    3e08:	d0a73717 	ldw	r2,-25380(gp)
    3e0c:	10000b26 	beq	r2,zero,3e3c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    3e10:	d0a73717 	ldw	r2,-25380(gp)
    3e14:	10bfffc4 	addi	r2,r2,-1
    3e18:	d0a73715 	stw	r2,-25380(gp)
    3e1c:	d0a73717 	ldw	r2,-25380(gp)
    3e20:	1000071e 	bne	r2,zero,3e40 <__env_unlock+0x4c>
  {
    lockid = -1;
    3e24:	00bfffc4 	movi	r2,-1
    3e28:	d0a01215 	stw	r2,-32696(gp)
    OSSemPost( alt_envsem );
    3e2c:	d0a73817 	ldw	r2,-25376(gp)
    3e30:	1009883a 	mov	r4,r2
    3e34:	00098900 	call	9890 <OSSemPost>
    3e38:	00000106 	br	3e40 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
    3e3c:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    3e40:	e037883a 	mov	sp,fp
    3e44:	dfc00117 	ldw	ra,4(sp)
    3e48:	df000017 	ldw	fp,0(sp)
    3e4c:	dec00204 	addi	sp,sp,8
    3e50:	f800283a 	ret

00003e54 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    3e54:	deffdb04 	addi	sp,sp,-148
    3e58:	dfc02415 	stw	ra,144(sp)
    3e5c:	df002315 	stw	fp,140(sp)
    3e60:	df002304 	addi	fp,sp,140
    3e64:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3e68:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    3e6c:	d0a73b43 	ldbu	r2,-25363(gp)
    3e70:	10803fcc 	andi	r2,r2,255
    3e74:	10800060 	cmpeqi	r2,r2,1
    3e78:	10003626 	beq	r2,zero,3f54 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    3e7c:	e0bfe204 	addi	r2,fp,-120
    3e80:	100b883a 	mov	r5,r2
    3e84:	01003fc4 	movi	r4,255
    3e88:	000b1880 	call	b188 <OSTaskQuery>
    3e8c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    3e90:	e0bffe83 	ldbu	r2,-6(fp)
    3e94:	10803fcc 	andi	r2,r2,255
    3e98:	1000301e 	bne	r2,zero,3f5c <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
    3e9c:	e0bfee83 	ldbu	r2,-70(fp)
    3ea0:	10803fcc 	andi	r2,r2,255
    3ea4:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    3ea8:	d0a73a17 	ldw	r2,-25368(gp)
    3eac:	e0fffd04 	addi	r3,fp,-12
    3eb0:	180b883a 	mov	r5,r3
    3eb4:	1009883a 	mov	r4,r2
    3eb8:	00099a00 	call	99a0 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3ebc:	0005303a 	rdctl	r2,status
    3ec0:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3ec4:	e0ffe117 	ldw	r3,-124(fp)
    3ec8:	00bfff84 	movi	r2,-2
    3ecc:	1884703a 	and	r2,r3,r2
    3ed0:	1001703a 	wrctl	status,r2
  
  return context;
    3ed4:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
    3ed8:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    3edc:	e0bffd0b 	ldhu	r2,-12(fp)
    3ee0:	10bfffcc 	andi	r2,r2,65535
    3ee4:	10000b1e 	bne	r2,zero,3f14 <__malloc_lock+0xc0>
    3ee8:	d0a01317 	ldw	r2,-32692(gp)
    3eec:	e0ffde17 	ldw	r3,-136(fp)
    3ef0:	1880081e 	bne	r3,r2,3f14 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
    3ef4:	d0a73917 	ldw	r2,-25372(gp)
    3ef8:	10800044 	addi	r2,r2,1
    3efc:	d0a73915 	stw	r2,-25372(gp)
    3f00:	e0bfdd17 	ldw	r2,-140(fp)
    3f04:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3f08:	e0bfdf17 	ldw	r2,-132(fp)
    3f0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    3f10:	00000e06 	br	3f4c <__malloc_lock+0xf8>
    3f14:	e0bfdd17 	ldw	r2,-140(fp)
    3f18:	e0bfe015 	stw	r2,-128(fp)
    3f1c:	e0bfe017 	ldw	r2,-128(fp)
    3f20:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    3f24:	d0a73a17 	ldw	r2,-25368(gp)
    3f28:	e0fffe84 	addi	r3,fp,-6
    3f2c:	180d883a 	mov	r6,r3
    3f30:	000b883a 	mov	r5,zero
    3f34:	1009883a 	mov	r4,r2
    3f38:	00095180 	call	9518 <OSSemPend>
    locks  = 1;
    3f3c:	00800044 	movi	r2,1
    3f40:	d0a73915 	stw	r2,-25372(gp)
    lockid = id;
    3f44:	e0bfde17 	ldw	r2,-136(fp)
    3f48:	d0a01315 	stw	r2,-32692(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    3f4c:	0001883a 	nop
    3f50:	00000306 	br	3f60 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
    3f54:	0001883a 	nop
    3f58:	00000106 	br	3f60 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    3f5c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    3f60:	e037883a 	mov	sp,fp
    3f64:	dfc00117 	ldw	ra,4(sp)
    3f68:	df000017 	ldw	fp,0(sp)
    3f6c:	dec00204 	addi	sp,sp,8
    3f70:	f800283a 	ret

00003f74 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    3f74:	defff804 	addi	sp,sp,-32
    3f78:	dfc00715 	stw	ra,28(sp)
    3f7c:	df000615 	stw	fp,24(sp)
    3f80:	df000604 	addi	fp,sp,24
    3f84:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3f88:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    3f8c:	d0a73b43 	ldbu	r2,-25363(gp)
    3f90:	10803fcc 	andi	r2,r2,255
    3f94:	10800060 	cmpeqi	r2,r2,1
    3f98:	10002326 	beq	r2,zero,4028 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3f9c:	0005303a 	rdctl	r2,status
    3fa0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3fa4:	e0fffe17 	ldw	r3,-8(fp)
    3fa8:	00bfff84 	movi	r2,-2
    3fac:	1884703a 	and	r2,r3,r2
    3fb0:	1001703a 	wrctl	status,r2
  
  return context;
    3fb4:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
    3fb8:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    3fbc:	d0a73917 	ldw	r2,-25372(gp)
    3fc0:	1000051e 	bne	r2,zero,3fd8 <__malloc_unlock+0x64>
    3fc4:	e0bffa17 	ldw	r2,-24(fp)
    3fc8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3fcc:	e0bffb17 	ldw	r2,-20(fp)
    3fd0:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    3fd4:	00001506 	br	402c <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    3fd8:	d0a73917 	ldw	r2,-25372(gp)
    3fdc:	10bfffc4 	addi	r2,r2,-1
    3fe0:	d0a73915 	stw	r2,-25372(gp)
    3fe4:	d0a73917 	ldw	r2,-25372(gp)
    3fe8:	10000a1e 	bne	r2,zero,4014 <__malloc_unlock+0xa0>
  {
    lockid = -1;
    3fec:	00bfffc4 	movi	r2,-1
    3ff0:	d0a01315 	stw	r2,-32692(gp)
    3ff4:	e0bffa17 	ldw	r2,-24(fp)
    3ff8:	e0bffc15 	stw	r2,-16(fp)
    3ffc:	e0bffc17 	ldw	r2,-16(fp)
    4000:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    4004:	d0a73a17 	ldw	r2,-25368(gp)
    4008:	1009883a 	mov	r4,r2
    400c:	00098900 	call	9890 <OSSemPost>
    4010:	00000606 	br	402c <__malloc_unlock+0xb8>
    4014:	e0bffa17 	ldw	r2,-24(fp)
    4018:	e0bffd15 	stw	r2,-12(fp)
    401c:	e0bffd17 	ldw	r2,-12(fp)
    4020:	1001703a 	wrctl	status,r2
    4024:	00000106 	br	402c <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
    4028:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    402c:	e037883a 	mov	sp,fp
    4030:	dfc00117 	ldw	ra,4(sp)
    4034:	df000017 	ldw	fp,0(sp)
    4038:	dec00204 	addi	sp,sp,8
    403c:	f800283a 	ret

00004040 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    4040:	defff704 	addi	sp,sp,-36
    4044:	dfc00815 	stw	ra,32(sp)
    4048:	df000715 	stw	fp,28(sp)
    404c:	df000704 	addi	fp,sp,28
    4050:	e13ffd15 	stw	r4,-12(fp)
    4054:	e17ffe15 	stw	r5,-8(fp)
    4058:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    405c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    4060:	e0bfff17 	ldw	r2,-4(fp)
    4064:	1000021e 	bne	r2,zero,4070 <OSEventNameGet+0x30>
        return (0);
    4068:	0005883a 	mov	r2,zero
    406c:	00003706 	br	414c <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    4070:	e0bffd17 	ldw	r2,-12(fp)
    4074:	1000051e 	bne	r2,zero,408c <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    4078:	e0bfff17 	ldw	r2,-4(fp)
    407c:	00c00104 	movi	r3,4
    4080:	10c00005 	stb	r3,0(r2)
        return (0);
    4084:	0005883a 	mov	r2,zero
    4088:	00003006 	br	414c <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    408c:	e0bffe17 	ldw	r2,-8(fp)
    4090:	1000051e 	bne	r2,zero,40a8 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    4094:	e0bfff17 	ldw	r2,-4(fp)
    4098:	00c00304 	movi	r3,12
    409c:	10c00005 	stb	r3,0(r2)
        return (0);
    40a0:	0005883a 	mov	r2,zero
    40a4:	00002906 	br	414c <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    40a8:	d0a74903 	ldbu	r2,-25308(gp)
    40ac:	10803fcc 	andi	r2,r2,255
    40b0:	10000526 	beq	r2,zero,40c8 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    40b4:	e0bfff17 	ldw	r2,-4(fp)
    40b8:	00c00444 	movi	r3,17
    40bc:	10c00005 	stb	r3,0(r2)
        return (0);
    40c0:	0005883a 	mov	r2,zero
    40c4:	00002106 	br	414c <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    40c8:	e0bffd17 	ldw	r2,-12(fp)
    40cc:	10800003 	ldbu	r2,0(r2)
    40d0:	10803fcc 	andi	r2,r2,255
    40d4:	10bfffc4 	addi	r2,r2,-1
    40d8:	10800128 	cmpgeui	r2,r2,4
    40dc:	10000526 	beq	r2,zero,40f4 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    40e0:	e0bfff17 	ldw	r2,-4(fp)
    40e4:	00c00044 	movi	r3,1
    40e8:	10c00005 	stb	r3,0(r2)
             return (0);
    40ec:	0005883a 	mov	r2,zero
    40f0:	00001606 	br	414c <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    40f4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    40f8:	0005303a 	rdctl	r2,status
    40fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4100:	e0fffb17 	ldw	r3,-20(fp)
    4104:	00bfff84 	movi	r2,-2
    4108:	1884703a 	and	r2,r3,r2
    410c:	1001703a 	wrctl	status,r2
  
  return context;
    4110:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    4114:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    4118:	e0bffd17 	ldw	r2,-12(fp)
    411c:	10800384 	addi	r2,r2,14
    4120:	100b883a 	mov	r5,r2
    4124:	e13ffe17 	ldw	r4,-8(fp)
    4128:	0005ac40 	call	5ac4 <OS_StrCopy>
    412c:	e0bffa05 	stb	r2,-24(fp)
    4130:	e0bff917 	ldw	r2,-28(fp)
    4134:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4138:	e0bffc17 	ldw	r2,-16(fp)
    413c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    4140:	e0bfff17 	ldw	r2,-4(fp)
    4144:	10000005 	stb	zero,0(r2)
    return (len);
    4148:	e0bffa03 	ldbu	r2,-24(fp)
}
    414c:	e037883a 	mov	sp,fp
    4150:	dfc00117 	ldw	ra,4(sp)
    4154:	df000017 	ldw	fp,0(sp)
    4158:	dec00204 	addi	sp,sp,8
    415c:	f800283a 	ret

00004160 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    4160:	defff604 	addi	sp,sp,-40
    4164:	dfc00915 	stw	ra,36(sp)
    4168:	df000815 	stw	fp,32(sp)
    416c:	df000804 	addi	fp,sp,32
    4170:	e13ffd15 	stw	r4,-12(fp)
    4174:	e17ffe15 	stw	r5,-8(fp)
    4178:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    417c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    4180:	e0bfff17 	ldw	r2,-4(fp)
    4184:	10004026 	beq	r2,zero,4288 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    4188:	e0bffd17 	ldw	r2,-12(fp)
    418c:	1000041e 	bne	r2,zero,41a0 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    4190:	e0bfff17 	ldw	r2,-4(fp)
    4194:	00c00104 	movi	r3,4
    4198:	10c00005 	stb	r3,0(r2)
        return;
    419c:	00003b06 	br	428c <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    41a0:	e0bffe17 	ldw	r2,-8(fp)
    41a4:	1000041e 	bne	r2,zero,41b8 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    41a8:	e0bfff17 	ldw	r2,-4(fp)
    41ac:	00c00304 	movi	r3,12
    41b0:	10c00005 	stb	r3,0(r2)
        return;
    41b4:	00003506 	br	428c <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    41b8:	d0a74903 	ldbu	r2,-25308(gp)
    41bc:	10803fcc 	andi	r2,r2,255
    41c0:	10000426 	beq	r2,zero,41d4 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    41c4:	e0bfff17 	ldw	r2,-4(fp)
    41c8:	00c00484 	movi	r3,18
    41cc:	10c00005 	stb	r3,0(r2)
        return;
    41d0:	00002e06 	br	428c <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
    41d4:	e0bffd17 	ldw	r2,-12(fp)
    41d8:	10800003 	ldbu	r2,0(r2)
    41dc:	10803fcc 	andi	r2,r2,255
    41e0:	10bfffc4 	addi	r2,r2,-1
    41e4:	10800128 	cmpgeui	r2,r2,4
    41e8:	10000426 	beq	r2,zero,41fc <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    41ec:	e0bfff17 	ldw	r2,-4(fp)
    41f0:	00c00044 	movi	r3,1
    41f4:	10c00005 	stb	r3,0(r2)
             return;
    41f8:	00002406 	br	428c <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    41fc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4200:	0005303a 	rdctl	r2,status
    4204:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4208:	e0fffc17 	ldw	r3,-16(fp)
    420c:	00bfff84 	movi	r2,-2
    4210:	1884703a 	and	r2,r3,r2
    4214:	1001703a 	wrctl	status,r2
  
  return context;
    4218:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    421c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    4220:	e13ffe17 	ldw	r4,-8(fp)
    4224:	0005b380 	call	5b38 <OS_StrLen>
    4228:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    422c:	e0bffa03 	ldbu	r2,-24(fp)
    4230:	10800830 	cmpltui	r2,r2,32
    4234:	1000081e 	bne	r2,zero,4258 <OSEventNameSet+0xf8>
    4238:	e0bff817 	ldw	r2,-32(fp)
    423c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4240:	e0bff917 	ldw	r2,-28(fp)
    4244:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    4248:	e0bfff17 	ldw	r2,-4(fp)
    424c:	00c002c4 	movi	r3,11
    4250:	10c00005 	stb	r3,0(r2)
        return;
    4254:	00000d06 	br	428c <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    4258:	e0bffd17 	ldw	r2,-12(fp)
    425c:	10800384 	addi	r2,r2,14
    4260:	e17ffe17 	ldw	r5,-8(fp)
    4264:	1009883a 	mov	r4,r2
    4268:	0005ac40 	call	5ac4 <OS_StrCopy>
    426c:	e0bff817 	ldw	r2,-32(fp)
    4270:	e0bffb15 	stw	r2,-20(fp)
    4274:	e0bffb17 	ldw	r2,-20(fp)
    4278:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    427c:	e0bfff17 	ldw	r2,-4(fp)
    4280:	10000005 	stb	zero,0(r2)
    4284:	00000106 	br	428c <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    4288:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    428c:	e037883a 	mov	sp,fp
    4290:	dfc00117 	ldw	ra,4(sp)
    4294:	df000017 	ldw	fp,0(sp)
    4298:	dec00204 	addi	sp,sp,8
    429c:	f800283a 	ret

000042a0 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    42a0:	deffed04 	addi	sp,sp,-76
    42a4:	dfc01215 	stw	ra,72(sp)
    42a8:	df001115 	stw	fp,68(sp)
    42ac:	df001104 	addi	fp,sp,68
    42b0:	e13ffc15 	stw	r4,-16(fp)
    42b4:	e17ffd15 	stw	r5,-12(fp)
    42b8:	e1bffe15 	stw	r6,-8(fp)
    42bc:	3805883a 	mov	r2,r7
    42c0:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    42c4:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    42c8:	e0800217 	ldw	r2,8(fp)
    42cc:	1000021e 	bne	r2,zero,42d8 <OSEventPendMulti+0x38>
        return (0);
    42d0:	0005883a 	mov	r2,zero
    42d4:	00017106 	br	489c <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    42d8:	e0bffc17 	ldw	r2,-16(fp)
    42dc:	1000051e 	bne	r2,zero,42f4 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    42e0:	e0800217 	ldw	r2,8(fp)
    42e4:	00c00104 	movi	r3,4
    42e8:	10c00005 	stb	r3,0(r2)
        return (0);
    42ec:	0005883a 	mov	r2,zero
    42f0:	00016a06 	br	489c <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    42f4:	e0bffd17 	ldw	r2,-12(fp)
    42f8:	1000051e 	bne	r2,zero,4310 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    42fc:	e0800217 	ldw	r2,8(fp)
    4300:	00c00104 	movi	r3,4
    4304:	10c00005 	stb	r3,0(r2)
        return (0);
    4308:	0005883a 	mov	r2,zero
    430c:	00016306 	br	489c <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    4310:	e0bffe17 	ldw	r2,-8(fp)
    4314:	1000051e 	bne	r2,zero,432c <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    4318:	e0800217 	ldw	r2,8(fp)
    431c:	00c00104 	movi	r3,4
    4320:	10c00005 	stb	r3,0(r2)
        return (0);
    4324:	0005883a 	mov	r2,zero
    4328:	00015c06 	br	489c <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    432c:	e0bffd17 	ldw	r2,-12(fp)
    4330:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    4334:	e0bffc17 	ldw	r2,-16(fp)
    4338:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    433c:	e0bfef17 	ldw	r2,-68(fp)
    4340:	10800017 	ldw	r2,0(r2)
    4344:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    4348:	00001906 	br	43b0 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    434c:	e0bff017 	ldw	r2,-64(fp)
    4350:	10800003 	ldbu	r2,0(r2)
    4354:	10803fcc 	andi	r2,r2,255
    4358:	10c000a0 	cmpeqi	r3,r2,2
    435c:	1800091e 	bne	r3,zero,4384 <OSEventPendMulti+0xe4>
    4360:	10c000e0 	cmpeqi	r3,r2,3
    4364:	1800091e 	bne	r3,zero,438c <OSEventPendMulti+0xec>
    4368:	10800060 	cmpeqi	r2,r2,1
    436c:	1000091e 	bne	r2,zero,4394 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    4370:	e0800217 	ldw	r2,8(fp)
    4374:	00c00044 	movi	r3,1
    4378:	10c00005 	stb	r3,0(r2)
                 return (0);
    437c:	0005883a 	mov	r2,zero
    4380:	00014606 	br	489c <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    4384:	0001883a 	nop
    4388:	00000306 	br	4398 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    438c:	0001883a 	nop
    4390:	00000106 	br	4398 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    4394:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    4398:	e0bfef17 	ldw	r2,-68(fp)
    439c:	10800104 	addi	r2,r2,4
    43a0:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    43a4:	e0bfef17 	ldw	r2,-68(fp)
    43a8:	10800017 	ldw	r2,0(r2)
    43ac:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    43b0:	e0bff017 	ldw	r2,-64(fp)
    43b4:	103fe51e 	bne	r2,zero,434c <__alt_mem_onchip_memory2_0+0xfc00034c>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    43b8:	d0a74903 	ldbu	r2,-25308(gp)
    43bc:	10803fcc 	andi	r2,r2,255
    43c0:	10000526 	beq	r2,zero,43d8 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    43c4:	e0800217 	ldw	r2,8(fp)
    43c8:	00c00084 	movi	r3,2
    43cc:	10c00005 	stb	r3,0(r2)
        return (0);
    43d0:	0005883a 	mov	r2,zero
    43d4:	00013106 	br	489c <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    43d8:	d0a73b03 	ldbu	r2,-25364(gp)
    43dc:	10803fcc 	andi	r2,r2,255
    43e0:	10000526 	beq	r2,zero,43f8 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    43e4:	e0800217 	ldw	r2,8(fp)
    43e8:	00c00344 	movi	r3,13
    43ec:	10c00005 	stb	r3,0(r2)
        return (0);
    43f0:	0005883a 	mov	r2,zero
    43f4:	00012906 	br	489c <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    43f8:	0005303a 	rdctl	r2,status
    43fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4400:	e0fffb17 	ldw	r3,-20(fp)
    4404:	00bfff84 	movi	r2,-2
    4408:	1884703a 	and	r2,r3,r2
    440c:	1001703a 	wrctl	status,r2
  
  return context;
    4410:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    4414:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    4418:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    441c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    4420:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    4424:	e0bffc17 	ldw	r2,-16(fp)
    4428:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    442c:	e0bfef17 	ldw	r2,-68(fp)
    4430:	10800017 	ldw	r2,0(r2)
    4434:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    4438:	00008106 	br	4640 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    443c:	e0bff017 	ldw	r2,-64(fp)
    4440:	10800003 	ldbu	r2,0(r2)
    4444:	10803fcc 	andi	r2,r2,255
    4448:	10c000a0 	cmpeqi	r3,r2,2
    444c:	18003c1e 	bne	r3,zero,4540 <OSEventPendMulti+0x2a0>
    4450:	10c000e0 	cmpeqi	r3,r2,3
    4454:	1800031e 	bne	r3,zero,4464 <OSEventPendMulti+0x1c4>
    4458:	10800060 	cmpeqi	r2,r2,1
    445c:	10001e1e 	bne	r2,zero,44d8 <OSEventPendMulti+0x238>
    4460:	00006606 	br	45fc <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    4464:	e0bff017 	ldw	r2,-64(fp)
    4468:	1080020b 	ldhu	r2,8(r2)
    446c:	10bfffcc 	andi	r2,r2,65535
    4470:	10001526 	beq	r2,zero,44c8 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    4474:	e0bff017 	ldw	r2,-64(fp)
    4478:	1080020b 	ldhu	r2,8(r2)
    447c:	10bfffc4 	addi	r2,r2,-1
    4480:	1007883a 	mov	r3,r2
    4484:	e0bff017 	ldw	r2,-64(fp)
    4488:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    448c:	e0bffd17 	ldw	r2,-12(fp)
    4490:	10c00104 	addi	r3,r2,4
    4494:	e0fffd15 	stw	r3,-12(fp)
    4498:	e0fff017 	ldw	r3,-64(fp)
    449c:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    44a0:	00800044 	movi	r2,1
    44a4:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    44a8:	e0bffe17 	ldw	r2,-8(fp)
    44ac:	10c00104 	addi	r3,r2,4
    44b0:	e0fffe15 	stw	r3,-8(fp)
    44b4:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    44b8:	e0bff18b 	ldhu	r2,-58(fp)
    44bc:	10800044 	addi	r2,r2,1
    44c0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    44c4:	00005806 	br	4628 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    44c8:	e0bff203 	ldbu	r2,-56(fp)
    44cc:	10800054 	ori	r2,r2,1
    44d0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    44d4:	00005406 	br	4628 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    44d8:	e0bff017 	ldw	r2,-64(fp)
    44dc:	10800117 	ldw	r2,4(r2)
    44e0:	10001326 	beq	r2,zero,4530 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    44e4:	e0bffe17 	ldw	r2,-8(fp)
    44e8:	10c00104 	addi	r3,r2,4
    44ec:	e0fffe15 	stw	r3,-8(fp)
    44f0:	e0fff017 	ldw	r3,-64(fp)
    44f4:	18c00117 	ldw	r3,4(r3)
    44f8:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    44fc:	e0bff017 	ldw	r2,-64(fp)
    4500:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    4504:	e0bffd17 	ldw	r2,-12(fp)
    4508:	10c00104 	addi	r3,r2,4
    450c:	e0fffd15 	stw	r3,-12(fp)
    4510:	e0fff017 	ldw	r3,-64(fp)
    4514:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    4518:	00800044 	movi	r2,1
    451c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    4520:	e0bff18b 	ldhu	r2,-58(fp)
    4524:	10800044 	addi	r2,r2,1
    4528:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    452c:	00003e06 	br	4628 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    4530:	e0bff203 	ldbu	r2,-56(fp)
    4534:	10800094 	ori	r2,r2,2
    4538:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    453c:	00003a06 	br	4628 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    4540:	e0bff017 	ldw	r2,-64(fp)
    4544:	10800117 	ldw	r2,4(r2)
    4548:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    454c:	e0bff517 	ldw	r2,-44(fp)
    4550:	1080058b 	ldhu	r2,22(r2)
    4554:	10bfffcc 	andi	r2,r2,65535
    4558:	10002426 	beq	r2,zero,45ec <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    455c:	e0bffe17 	ldw	r2,-8(fp)
    4560:	10c00104 	addi	r3,r2,4
    4564:	e0fffe15 	stw	r3,-8(fp)
    4568:	e0fff517 	ldw	r3,-44(fp)
    456c:	18c00417 	ldw	r3,16(r3)
    4570:	19400104 	addi	r5,r3,4
    4574:	e13ff517 	ldw	r4,-44(fp)
    4578:	21400415 	stw	r5,16(r4)
    457c:	18c00017 	ldw	r3,0(r3)
    4580:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    4584:	e0bff517 	ldw	r2,-44(fp)
    4588:	10c00417 	ldw	r3,16(r2)
    458c:	e0bff517 	ldw	r2,-44(fp)
    4590:	10800217 	ldw	r2,8(r2)
    4594:	1880041e 	bne	r3,r2,45a8 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    4598:	e0bff517 	ldw	r2,-44(fp)
    459c:	10c00117 	ldw	r3,4(r2)
    45a0:	e0bff517 	ldw	r2,-44(fp)
    45a4:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    45a8:	e0bff517 	ldw	r2,-44(fp)
    45ac:	1080058b 	ldhu	r2,22(r2)
    45b0:	10bfffc4 	addi	r2,r2,-1
    45b4:	1007883a 	mov	r3,r2
    45b8:	e0bff517 	ldw	r2,-44(fp)
    45bc:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    45c0:	e0bffd17 	ldw	r2,-12(fp)
    45c4:	10c00104 	addi	r3,r2,4
    45c8:	e0fffd15 	stw	r3,-12(fp)
    45cc:	e0fff017 	ldw	r3,-64(fp)
    45d0:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    45d4:	00800044 	movi	r2,1
    45d8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    45dc:	e0bff18b 	ldhu	r2,-58(fp)
    45e0:	10800044 	addi	r2,r2,1
    45e4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    45e8:	00000f06 	br	4628 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    45ec:	e0bff203 	ldbu	r2,-56(fp)
    45f0:	10800114 	ori	r2,r2,4
    45f4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    45f8:	00000b06 	br	4628 <OSEventPendMulti+0x388>
    45fc:	e0bff317 	ldw	r2,-52(fp)
    4600:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4604:	e0bff417 	ldw	r2,-48(fp)
    4608:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    460c:	e0bffd17 	ldw	r2,-12(fp)
    4610:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    4614:	e0800217 	ldw	r2,8(fp)
    4618:	00c00044 	movi	r3,1
    461c:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    4620:	e0bff18b 	ldhu	r2,-58(fp)
    4624:	00009d06 	br	489c <OSEventPendMulti+0x5fc>
        }
        pevents++;
    4628:	e0bfef17 	ldw	r2,-68(fp)
    462c:	10800104 	addi	r2,r2,4
    4630:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    4634:	e0bfef17 	ldw	r2,-68(fp)
    4638:	10800017 	ldw	r2,0(r2)
    463c:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    4640:	e0bff017 	ldw	r2,-64(fp)
    4644:	103f7d1e 	bne	r2,zero,443c <__alt_mem_onchip_memory2_0+0xfc00043c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    4648:	e0bff103 	ldbu	r2,-60(fp)
    464c:	10800058 	cmpnei	r2,r2,1
    4650:	10000a1e 	bne	r2,zero,467c <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    4654:	e0bffd17 	ldw	r2,-12(fp)
    4658:	10000015 	stw	zero,0(r2)
    465c:	e0bff317 	ldw	r2,-52(fp)
    4660:	e0bff615 	stw	r2,-40(fp)
    4664:	e0bff617 	ldw	r2,-40(fp)
    4668:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    466c:	e0800217 	ldw	r2,8(fp)
    4670:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    4674:	e0bff18b 	ldhu	r2,-58(fp)
    4678:	00008806 	br	489c <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    467c:	d0a74a17 	ldw	r2,-25304(gp)
    4680:	d0e74a17 	ldw	r3,-25304(gp)
    4684:	19000c03 	ldbu	r4,48(r3)
    4688:	e0fff203 	ldbu	r3,-56(fp)
    468c:	20c6b03a 	or	r3,r4,r3
    4690:	1809883a 	mov	r4,r3
    4694:	00ffe004 	movi	r3,-128
    4698:	20c6b03a 	or	r3,r4,r3
    469c:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    46a0:	d0a74a17 	ldw	r2,-25304(gp)
    46a4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    46a8:	d0a74a17 	ldw	r2,-25304(gp)
    46ac:	e0ffff0b 	ldhu	r3,-4(fp)
    46b0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    46b4:	e13ffc17 	ldw	r4,-16(fp)
    46b8:	00051dc0 	call	51dc <OS_EventTaskWaitMulti>
    46bc:	e0bff317 	ldw	r2,-52(fp)
    46c0:	e0bff915 	stw	r2,-28(fp)
    46c4:	e0bff917 	ldw	r2,-28(fp)
    46c8:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    46cc:	00059800 	call	5980 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    46d0:	0005303a 	rdctl	r2,status
    46d4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    46d8:	e0fff717 	ldw	r3,-36(fp)
    46dc:	00bfff84 	movi	r2,-2
    46e0:	1884703a 	and	r2,r3,r2
    46e4:	1001703a 	wrctl	status,r2
  
  return context;
    46e8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
    46ec:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    46f0:	d0a74a17 	ldw	r2,-25304(gp)
    46f4:	10800c43 	ldbu	r2,49(r2)
    46f8:	10803fcc 	andi	r2,r2,255
    46fc:	10000226 	beq	r2,zero,4708 <OSEventPendMulti+0x468>
    4700:	108000a0 	cmpeqi	r2,r2,2
    4704:	10001826 	beq	r2,zero,4768 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    4708:	d0a74a17 	ldw	r2,-25304(gp)
    470c:	10800717 	ldw	r2,28(r2)
    4710:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    4714:	e0bff017 	ldw	r2,-64(fp)
    4718:	10000b26 	beq	r2,zero,4748 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    471c:	e0bffd17 	ldw	r2,-12(fp)
    4720:	10c00104 	addi	r3,r2,4
    4724:	e0fffd15 	stw	r3,-12(fp)
    4728:	e0fff017 	ldw	r3,-64(fp)
    472c:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    4730:	e0bffd17 	ldw	r2,-12(fp)
    4734:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    4738:	e0bff18b 	ldhu	r2,-58(fp)
    473c:	10800044 	addi	r2,r2,1
    4740:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    4744:	00000d06 	br	477c <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    4748:	d0a74a17 	ldw	r2,-25304(gp)
    474c:	00c00044 	movi	r3,1
    4750:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    4754:	d0a74a17 	ldw	r2,-25304(gp)
    4758:	e17ffc17 	ldw	r5,-16(fp)
    475c:	1009883a 	mov	r4,r2
    4760:	00053e40 	call	53e4 <OS_EventTaskRemoveMulti>
             }
			 break;
    4764:	00000506 	br	477c <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    4768:	d0a74a17 	ldw	r2,-25304(gp)
    476c:	e17ffc17 	ldw	r5,-16(fp)
    4770:	1009883a 	mov	r4,r2
    4774:	00053e40 	call	53e4 <OS_EventTaskRemoveMulti>
             break;
    4778:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    477c:	d0a74a17 	ldw	r2,-25304(gp)
    4780:	10800c43 	ldbu	r2,49(r2)
    4784:	10803fcc 	andi	r2,r2,255
    4788:	10000326 	beq	r2,zero,4798 <OSEventPendMulti+0x4f8>
    478c:	108000a0 	cmpeqi	r2,r2,2
    4790:	1000231e 	bne	r2,zero,4820 <OSEventPendMulti+0x580>
    4794:	00002a06 	br	4840 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    4798:	e0bff017 	ldw	r2,-64(fp)
    479c:	10800003 	ldbu	r2,0(r2)
    47a0:	10803fcc 	andi	r2,r2,255
    47a4:	0080100e 	bge	zero,r2,47e8 <OSEventPendMulti+0x548>
    47a8:	10c000d0 	cmplti	r3,r2,3
    47ac:	1800071e 	bne	r3,zero,47cc <OSEventPendMulti+0x52c>
    47b0:	108000e0 	cmpeqi	r2,r2,3
    47b4:	10000c26 	beq	r2,zero,47e8 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    47b8:	e0bffe17 	ldw	r2,-8(fp)
    47bc:	10c00104 	addi	r3,r2,4
    47c0:	e0fffe15 	stw	r3,-8(fp)
    47c4:	10000015 	stw	zero,0(r2)
                      break;
    47c8:	00001206 	br	4814 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    47cc:	e0bffe17 	ldw	r2,-8(fp)
    47d0:	10c00104 	addi	r3,r2,4
    47d4:	e0fffe15 	stw	r3,-8(fp)
    47d8:	d0e74a17 	ldw	r3,-25304(gp)
    47dc:	18c00917 	ldw	r3,36(r3)
    47e0:	10c00015 	stw	r3,0(r2)
                      break;
    47e4:	00000b06 	br	4814 <OSEventPendMulti+0x574>
    47e8:	e0bff317 	ldw	r2,-52(fp)
    47ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    47f0:	e0bff817 	ldw	r2,-32(fp)
    47f4:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    47f8:	e0bffd17 	ldw	r2,-12(fp)
    47fc:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    4800:	e0800217 	ldw	r2,8(fp)
    4804:	00c00044 	movi	r3,1
    4808:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    480c:	e0bff18b 	ldhu	r2,-58(fp)
    4810:	00002206 	br	489c <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    4814:	e0800217 	ldw	r2,8(fp)
    4818:	10000005 	stb	zero,0(r2)
             break;
    481c:	00001006 	br	4860 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    4820:	e0bffe17 	ldw	r2,-8(fp)
    4824:	10c00104 	addi	r3,r2,4
    4828:	e0fffe15 	stw	r3,-8(fp)
    482c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    4830:	e0800217 	ldw	r2,8(fp)
    4834:	00c00384 	movi	r3,14
    4838:	10c00005 	stb	r3,0(r2)
             break;
    483c:	00000806 	br	4860 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    4840:	e0bffe17 	ldw	r2,-8(fp)
    4844:	10c00104 	addi	r3,r2,4
    4848:	e0fffe15 	stw	r3,-8(fp)
    484c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    4850:	e0800217 	ldw	r2,8(fp)
    4854:	00c00284 	movi	r3,10
    4858:	10c00005 	stb	r3,0(r2)
             break;
    485c:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    4860:	d0a74a17 	ldw	r2,-25304(gp)
    4864:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    4868:	d0a74a17 	ldw	r2,-25304(gp)
    486c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    4870:	d0a74a17 	ldw	r2,-25304(gp)
    4874:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    4878:	d0a74a17 	ldw	r2,-25304(gp)
    487c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    4880:	d0a74a17 	ldw	r2,-25304(gp)
    4884:	10000915 	stw	zero,36(r2)
    4888:	e0bff317 	ldw	r2,-52(fp)
    488c:	e0bffa15 	stw	r2,-24(fp)
    4890:	e0bffa17 	ldw	r2,-24(fp)
    4894:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    4898:	e0bff18b 	ldhu	r2,-58(fp)
}
    489c:	e037883a 	mov	sp,fp
    48a0:	dfc00117 	ldw	ra,4(sp)
    48a4:	df000017 	ldw	fp,0(sp)
    48a8:	dec00204 	addi	sp,sp,8
    48ac:	f800283a 	ret

000048b0 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    48b0:	defffe04 	addi	sp,sp,-8
    48b4:	dfc00115 	stw	ra,4(sp)
    48b8:	df000015 	stw	fp,0(sp)
    48bc:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    48c0:	000e0800 	call	e080 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    48c4:	000562c0 	call	562c <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    48c8:	00056740 	call	5674 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    48cc:	00057e00 	call	57e0 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    48d0:	000554c0 	call	554c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    48d4:	00076800 	call	7680 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    48d8:	0007f800 	call	7f80 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    48dc:	00090a80 	call	90a8 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    48e0:	00056e00 	call	56e0 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    48e4:	00057600 	call	5760 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    48e8:	000e0a00 	call	e0a0 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    48ec:	00060540 	call	6054 <OSDebugInit>
#endif
}
    48f0:	0001883a 	nop
    48f4:	e037883a 	mov	sp,fp
    48f8:	dfc00117 	ldw	ra,4(sp)
    48fc:	df000017 	ldw	fp,0(sp)
    4900:	dec00204 	addi	sp,sp,8
    4904:	f800283a 	ret

00004908 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    4908:	deffff04 	addi	sp,sp,-4
    490c:	df000015 	stw	fp,0(sp)
    4910:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
    4914:	d0a73b43 	ldbu	r2,-25363(gp)
    4918:	10803fcc 	andi	r2,r2,255
    491c:	10800058 	cmpnei	r2,r2,1
    4920:	1000071e 	bne	r2,zero,4940 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
    4924:	d0a74903 	ldbu	r2,-25308(gp)
    4928:	10803fcc 	andi	r2,r2,255
    492c:	10803fe0 	cmpeqi	r2,r2,255
    4930:	1000031e 	bne	r2,zero,4940 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    4934:	d0a74903 	ldbu	r2,-25308(gp)
    4938:	10800044 	addi	r2,r2,1
    493c:	d0a74905 	stb	r2,-25308(gp)
        }
    }
}
    4940:	0001883a 	nop
    4944:	e037883a 	mov	sp,fp
    4948:	df000017 	ldw	fp,0(sp)
    494c:	dec00104 	addi	sp,sp,4
    4950:	f800283a 	ret

00004954 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    4954:	defffb04 	addi	sp,sp,-20
    4958:	dfc00415 	stw	ra,16(sp)
    495c:	df000315 	stw	fp,12(sp)
    4960:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    4964:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    4968:	d0a73b43 	ldbu	r2,-25363(gp)
    496c:	10803fcc 	andi	r2,r2,255
    4970:	10800058 	cmpnei	r2,r2,1
    4974:	10002f1e 	bne	r2,zero,4a34 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4978:	0005303a 	rdctl	r2,status
    497c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4980:	e0ffff17 	ldw	r3,-4(fp)
    4984:	00bfff84 	movi	r2,-2
    4988:	1884703a 	and	r2,r3,r2
    498c:	1001703a 	wrctl	status,r2
  
  return context;
    4990:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    4994:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    4998:	d0a74903 	ldbu	r2,-25308(gp)
    499c:	10803fcc 	andi	r2,r2,255
    49a0:	10000326 	beq	r2,zero,49b0 <OSIntExit+0x5c>
            OSIntNesting--;
    49a4:	d0a74903 	ldbu	r2,-25308(gp)
    49a8:	10bfffc4 	addi	r2,r2,-1
    49ac:	d0a74905 	stb	r2,-25308(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    49b0:	d0a74903 	ldbu	r2,-25308(gp)
    49b4:	10803fcc 	andi	r2,r2,255
    49b8:	10001a1e 	bne	r2,zero,4a24 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    49bc:	d0a73b03 	ldbu	r2,-25364(gp)
    49c0:	10803fcc 	andi	r2,r2,255
    49c4:	1000171e 	bne	r2,zero,4a24 <OSIntExit+0xd0>
                OS_SchedNew();
    49c8:	0005a500 	call	5a50 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    49cc:	d0e73d03 	ldbu	r3,-25356(gp)
    49d0:	d0a73d43 	ldbu	r2,-25355(gp)
    49d4:	18c03fcc 	andi	r3,r3,255
    49d8:	10803fcc 	andi	r2,r2,255
    49dc:	18801126 	beq	r3,r2,4a24 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    49e0:	d0a73d03 	ldbu	r2,-25356(gp)
    49e4:	10c03fcc 	andi	r3,r2,255
    49e8:	00800074 	movhi	r2,1
    49ec:	109ed204 	addi	r2,r2,31560
    49f0:	18c7883a 	add	r3,r3,r3
    49f4:	18c7883a 	add	r3,r3,r3
    49f8:	10c5883a 	add	r2,r2,r3
    49fc:	10800017 	ldw	r2,0(r2)
    4a00:	d0a74515 	stw	r2,-25324(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    4a04:	d0a74517 	ldw	r2,-25324(gp)
    4a08:	10c00e17 	ldw	r3,56(r2)
    4a0c:	18c00044 	addi	r3,r3,1
    4a10:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    4a14:	d0a74017 	ldw	r2,-25344(gp)
    4a18:	10800044 	addi	r2,r2,1
    4a1c:	d0a74015 	stw	r2,-25344(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    4a20:	000ddac0 	call	ddac <OSCtxSw>
    4a24:	e0bffd17 	ldw	r2,-12(fp)
    4a28:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4a2c:	e0bffe17 	ldw	r2,-8(fp)
    4a30:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    4a34:	0001883a 	nop
    4a38:	e037883a 	mov	sp,fp
    4a3c:	dfc00117 	ldw	ra,4(sp)
    4a40:	df000017 	ldw	fp,0(sp)
    4a44:	dec00204 	addi	sp,sp,8
    4a48:	f800283a 	ret

00004a4c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    4a4c:	defffc04 	addi	sp,sp,-16
    4a50:	df000315 	stw	fp,12(sp)
    4a54:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4a58:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    4a5c:	d0a73b43 	ldbu	r2,-25363(gp)
    4a60:	10803fcc 	andi	r2,r2,255
    4a64:	10800058 	cmpnei	r2,r2,1
    4a68:	1000161e 	bne	r2,zero,4ac4 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4a6c:	0005303a 	rdctl	r2,status
    4a70:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4a74:	e0ffff17 	ldw	r3,-4(fp)
    4a78:	00bfff84 	movi	r2,-2
    4a7c:	1884703a 	and	r2,r3,r2
    4a80:	1001703a 	wrctl	status,r2
  
  return context;
    4a84:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    4a88:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    4a8c:	d0a74903 	ldbu	r2,-25308(gp)
    4a90:	10803fcc 	andi	r2,r2,255
    4a94:	1000071e 	bne	r2,zero,4ab4 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    4a98:	d0a73b03 	ldbu	r2,-25364(gp)
    4a9c:	10803fcc 	andi	r2,r2,255
    4aa0:	10803fe0 	cmpeqi	r2,r2,255
    4aa4:	1000031e 	bne	r2,zero,4ab4 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    4aa8:	d0a73b03 	ldbu	r2,-25364(gp)
    4aac:	10800044 	addi	r2,r2,1
    4ab0:	d0a73b05 	stb	r2,-25364(gp)
    4ab4:	e0bffd17 	ldw	r2,-12(fp)
    4ab8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4abc:	e0bffe17 	ldw	r2,-8(fp)
    4ac0:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    4ac4:	0001883a 	nop
    4ac8:	e037883a 	mov	sp,fp
    4acc:	df000017 	ldw	fp,0(sp)
    4ad0:	dec00104 	addi	sp,sp,4
    4ad4:	f800283a 	ret

00004ad8 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    4ad8:	defff804 	addi	sp,sp,-32
    4adc:	dfc00715 	stw	ra,28(sp)
    4ae0:	df000615 	stw	fp,24(sp)
    4ae4:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    4ae8:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    4aec:	d0a73b43 	ldbu	r2,-25363(gp)
    4af0:	10803fcc 	andi	r2,r2,255
    4af4:	10800058 	cmpnei	r2,r2,1
    4af8:	1000281e 	bne	r2,zero,4b9c <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4afc:	0005303a 	rdctl	r2,status
    4b00:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4b04:	e0ffff17 	ldw	r3,-4(fp)
    4b08:	00bfff84 	movi	r2,-2
    4b0c:	1884703a 	and	r2,r3,r2
    4b10:	1001703a 	wrctl	status,r2
  
  return context;
    4b14:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    4b18:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    4b1c:	d0a73b03 	ldbu	r2,-25364(gp)
    4b20:	10803fcc 	andi	r2,r2,255
    4b24:	10001926 	beq	r2,zero,4b8c <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    4b28:	d0a73b03 	ldbu	r2,-25364(gp)
    4b2c:	10bfffc4 	addi	r2,r2,-1
    4b30:	d0a73b05 	stb	r2,-25364(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    4b34:	d0a73b03 	ldbu	r2,-25364(gp)
    4b38:	10803fcc 	andi	r2,r2,255
    4b3c:	10000e1e 	bne	r2,zero,4b78 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    4b40:	d0a74903 	ldbu	r2,-25308(gp)
    4b44:	10803fcc 	andi	r2,r2,255
    4b48:	1000061e 	bne	r2,zero,4b64 <OSSchedUnlock+0x8c>
    4b4c:	e0bffa17 	ldw	r2,-24(fp)
    4b50:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4b54:	e0bffb17 	ldw	r2,-20(fp)
    4b58:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    4b5c:	00059800 	call	5980 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    4b60:	00000e06 	br	4b9c <OSSchedUnlock+0xc4>
    4b64:	e0bffa17 	ldw	r2,-24(fp)
    4b68:	e0bffc15 	stw	r2,-16(fp)
    4b6c:	e0bffc17 	ldw	r2,-16(fp)
    4b70:	1001703a 	wrctl	status,r2
    4b74:	00000906 	br	4b9c <OSSchedUnlock+0xc4>
    4b78:	e0bffa17 	ldw	r2,-24(fp)
    4b7c:	e0bffd15 	stw	r2,-12(fp)
    4b80:	e0bffd17 	ldw	r2,-12(fp)
    4b84:	1001703a 	wrctl	status,r2
    4b88:	00000406 	br	4b9c <OSSchedUnlock+0xc4>
    4b8c:	e0bffa17 	ldw	r2,-24(fp)
    4b90:	e0bffe15 	stw	r2,-8(fp)
    4b94:	e0bffe17 	ldw	r2,-8(fp)
    4b98:	1001703a 	wrctl	status,r2
    4b9c:	0001883a 	nop
    4ba0:	e037883a 	mov	sp,fp
    4ba4:	dfc00117 	ldw	ra,4(sp)
    4ba8:	df000017 	ldw	fp,0(sp)
    4bac:	dec00204 	addi	sp,sp,8
    4bb0:	f800283a 	ret

00004bb4 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    4bb4:	defffe04 	addi	sp,sp,-8
    4bb8:	dfc00115 	stw	ra,4(sp)
    4bbc:	df000015 	stw	fp,0(sp)
    4bc0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    4bc4:	d0a73b43 	ldbu	r2,-25363(gp)
    4bc8:	10803fcc 	andi	r2,r2,255
    4bcc:	10000f1e 	bne	r2,zero,4c0c <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    4bd0:	0005a500 	call	5a50 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    4bd4:	d0a73d03 	ldbu	r2,-25356(gp)
    4bd8:	d0a73d45 	stb	r2,-25355(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    4bdc:	d0a73d03 	ldbu	r2,-25356(gp)
    4be0:	10c03fcc 	andi	r3,r2,255
    4be4:	00800074 	movhi	r2,1
    4be8:	109ed204 	addi	r2,r2,31560
    4bec:	18c7883a 	add	r3,r3,r3
    4bf0:	18c7883a 	add	r3,r3,r3
    4bf4:	10c5883a 	add	r2,r2,r3
    4bf8:	10800017 	ldw	r2,0(r2)
    4bfc:	d0a74515 	stw	r2,-25324(gp)
        OSTCBCur      = OSTCBHighRdy;
    4c00:	d0a74517 	ldw	r2,-25324(gp)
    4c04:	d0a74a15 	stw	r2,-25304(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    4c08:	000de380 	call	de38 <OSStartHighRdy>
    }
}
    4c0c:	0001883a 	nop
    4c10:	e037883a 	mov	sp,fp
    4c14:	dfc00117 	ldw	ra,4(sp)
    4c18:	df000017 	ldw	fp,0(sp)
    4c1c:	dec00204 	addi	sp,sp,8
    4c20:	f800283a 	ret

00004c24 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    4c24:	defff904 	addi	sp,sp,-28
    4c28:	dfc00615 	stw	ra,24(sp)
    4c2c:	df000515 	stw	fp,20(sp)
    4c30:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4c34:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    4c38:	01000084 	movi	r4,2
    4c3c:	000b31c0 	call	b31c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4c40:	0005303a 	rdctl	r2,status
    4c44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4c48:	e0fffc17 	ldw	r3,-16(fp)
    4c4c:	00bfff84 	movi	r2,-2
    4c50:	1884703a 	and	r2,r3,r2
    4c54:	1001703a 	wrctl	status,r2
  
  return context;
    4c58:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    4c5c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    4c60:	d0273c15 	stw	zero,-25360(gp)
    4c64:	e0bffb17 	ldw	r2,-20(fp)
    4c68:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4c6c:	e0bffd17 	ldw	r2,-12(fp)
    4c70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    4c74:	01000284 	movi	r4,10
    4c78:	000b31c0 	call	b31c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4c7c:	0005303a 	rdctl	r2,status
    4c80:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4c84:	e0fffe17 	ldw	r3,-8(fp)
    4c88:	00bfff84 	movi	r2,-2
    4c8c:	1884703a 	and	r2,r3,r2
    4c90:	1001703a 	wrctl	status,r2
  
  return context;
    4c94:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    4c98:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    4c9c:	d0a73c17 	ldw	r2,-25360(gp)
    4ca0:	d0a74115 	stw	r2,-25340(gp)
    OSStatRdy    = OS_TRUE;
    4ca4:	00800044 	movi	r2,1
    4ca8:	d0a74d05 	stb	r2,-25292(gp)
    4cac:	e0bffb17 	ldw	r2,-20(fp)
    4cb0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4cb4:	e0bfff17 	ldw	r2,-4(fp)
    4cb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    4cbc:	0001883a 	nop
    4cc0:	e037883a 	mov	sp,fp
    4cc4:	dfc00117 	ldw	ra,4(sp)
    4cc8:	df000017 	ldw	fp,0(sp)
    4ccc:	dec00204 	addi	sp,sp,8
    4cd0:	f800283a 	ret

00004cd4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    4cd4:	defff704 	addi	sp,sp,-36
    4cd8:	dfc00815 	stw	ra,32(sp)
    4cdc:	df000715 	stw	fp,28(sp)
    4ce0:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    4ce4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    4ce8:	000e0600 	call	e060 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4cec:	0005303a 	rdctl	r2,status
    4cf0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4cf4:	e0fffd17 	ldw	r3,-12(fp)
    4cf8:	00bfff84 	movi	r2,-2
    4cfc:	1884703a 	and	r2,r3,r2
    4d00:	1001703a 	wrctl	status,r2
  
  return context;
    4d04:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    4d08:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    4d0c:	d0a74b17 	ldw	r2,-25300(gp)
    4d10:	10800044 	addi	r2,r2,1
    4d14:	d0a74b15 	stw	r2,-25300(gp)
    4d18:	e0bffb17 	ldw	r2,-20(fp)
    4d1c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4d20:	e0bfff17 	ldw	r2,-4(fp)
    4d24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    4d28:	d0a73b43 	ldbu	r2,-25363(gp)
    4d2c:	10803fcc 	andi	r2,r2,255
    4d30:	10800058 	cmpnei	r2,r2,1
    4d34:	10006a1e 	bne	r2,zero,4ee0 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    4d38:	d0a73f03 	ldbu	r2,-25348(gp)
    4d3c:	10803fcc 	andi	r2,r2,255
    4d40:	10c00060 	cmpeqi	r3,r2,1
    4d44:	1800061e 	bne	r3,zero,4d60 <OSTimeTick+0x8c>
    4d48:	10c000a0 	cmpeqi	r3,r2,2
    4d4c:	1800061e 	bne	r3,zero,4d68 <OSTimeTick+0x94>
    4d50:	10000a1e 	bne	r2,zero,4d7c <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    4d54:	00800044 	movi	r2,1
    4d58:	e0bffa05 	stb	r2,-24(fp)
                 break;
    4d5c:	00000b06 	br	4d8c <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    4d60:	e03ffa05 	stb	zero,-24(fp)
                 break;
    4d64:	00000906 	br	4d8c <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    4d68:	00800044 	movi	r2,1
    4d6c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    4d70:	00800044 	movi	r2,1
    4d74:	d0a73f05 	stb	r2,-25348(gp)
                 break;
    4d78:	00000406 	br	4d8c <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    4d7c:	00800044 	movi	r2,1
    4d80:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    4d84:	d0273f05 	stb	zero,-25348(gp)
                 break;
    4d88:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    4d8c:	e0bffa03 	ldbu	r2,-24(fp)
    4d90:	10005226 	beq	r2,zero,4edc <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    4d94:	d0a73e17 	ldw	r2,-25352(gp)
    4d98:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    4d9c:	00004906 	br	4ec4 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4da0:	0005303a 	rdctl	r2,status
    4da4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4da8:	e0fffc17 	ldw	r3,-16(fp)
    4dac:	00bfff84 	movi	r2,-2
    4db0:	1884703a 	and	r2,r3,r2
    4db4:	1001703a 	wrctl	status,r2
  
  return context;
    4db8:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
    4dbc:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    4dc0:	e0bff917 	ldw	r2,-28(fp)
    4dc4:	10800b8b 	ldhu	r2,46(r2)
    4dc8:	10bfffcc 	andi	r2,r2,65535
    4dcc:	10003626 	beq	r2,zero,4ea8 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    4dd0:	e0bff917 	ldw	r2,-28(fp)
    4dd4:	10800b8b 	ldhu	r2,46(r2)
    4dd8:	10bfffc4 	addi	r2,r2,-1
    4ddc:	1007883a 	mov	r3,r2
    4de0:	e0bff917 	ldw	r2,-28(fp)
    4de4:	10c00b8d 	sth	r3,46(r2)
    4de8:	e0bff917 	ldw	r2,-28(fp)
    4dec:	10800b8b 	ldhu	r2,46(r2)
    4df0:	10bfffcc 	andi	r2,r2,65535
    4df4:	10002c1e 	bne	r2,zero,4ea8 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    4df8:	e0bff917 	ldw	r2,-28(fp)
    4dfc:	10800c03 	ldbu	r2,48(r2)
    4e00:	10803fcc 	andi	r2,r2,255
    4e04:	10800dcc 	andi	r2,r2,55
    4e08:	10000b26 	beq	r2,zero,4e38 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    4e0c:	e0bff917 	ldw	r2,-28(fp)
    4e10:	10c00c03 	ldbu	r3,48(r2)
    4e14:	00bff204 	movi	r2,-56
    4e18:	1884703a 	and	r2,r3,r2
    4e1c:	1007883a 	mov	r3,r2
    4e20:	e0bff917 	ldw	r2,-28(fp)
    4e24:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    4e28:	e0bff917 	ldw	r2,-28(fp)
    4e2c:	00c00044 	movi	r3,1
    4e30:	10c00c45 	stb	r3,49(r2)
    4e34:	00000206 	br	4e40 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    4e38:	e0bff917 	ldw	r2,-28(fp)
    4e3c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    4e40:	e0bff917 	ldw	r2,-28(fp)
    4e44:	10800c03 	ldbu	r2,48(r2)
    4e48:	10803fcc 	andi	r2,r2,255
    4e4c:	1080020c 	andi	r2,r2,8
    4e50:	1000151e 	bne	r2,zero,4ea8 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    4e54:	e0bff917 	ldw	r2,-28(fp)
    4e58:	10c00d83 	ldbu	r3,54(r2)
    4e5c:	d0a74703 	ldbu	r2,-25316(gp)
    4e60:	1884b03a 	or	r2,r3,r2
    4e64:	d0a74705 	stb	r2,-25316(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    4e68:	e0bff917 	ldw	r2,-28(fp)
    4e6c:	10800d03 	ldbu	r2,52(r2)
    4e70:	10c03fcc 	andi	r3,r2,255
    4e74:	e0bff917 	ldw	r2,-28(fp)
    4e78:	10800d03 	ldbu	r2,52(r2)
    4e7c:	11003fcc 	andi	r4,r2,255
    4e80:	d0a74744 	addi	r2,gp,-25315
    4e84:	2085883a 	add	r2,r4,r2
    4e88:	11000003 	ldbu	r4,0(r2)
    4e8c:	e0bff917 	ldw	r2,-28(fp)
    4e90:	10800d43 	ldbu	r2,53(r2)
    4e94:	2084b03a 	or	r2,r4,r2
    4e98:	1009883a 	mov	r4,r2
    4e9c:	d0a74744 	addi	r2,gp,-25315
    4ea0:	1885883a 	add	r2,r3,r2
    4ea4:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    4ea8:	e0bff917 	ldw	r2,-28(fp)
    4eac:	10800517 	ldw	r2,20(r2)
    4eb0:	e0bff915 	stw	r2,-28(fp)
    4eb4:	e0bffb17 	ldw	r2,-20(fp)
    4eb8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4ebc:	e0bffe17 	ldw	r2,-8(fp)
    4ec0:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    4ec4:	e0bff917 	ldw	r2,-28(fp)
    4ec8:	10800c83 	ldbu	r2,50(r2)
    4ecc:	10803fcc 	andi	r2,r2,255
    4ed0:	10800518 	cmpnei	r2,r2,20
    4ed4:	103fb21e 	bne	r2,zero,4da0 <__alt_mem_onchip_memory2_0+0xfc000da0>
    4ed8:	00000106 	br	4ee0 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
    4edc:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    4ee0:	e037883a 	mov	sp,fp
    4ee4:	dfc00117 	ldw	ra,4(sp)
    4ee8:	df000017 	ldw	fp,0(sp)
    4eec:	dec00204 	addi	sp,sp,8
    4ef0:	f800283a 	ret

00004ef4 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    4ef4:	deffff04 	addi	sp,sp,-4
    4ef8:	df000015 	stw	fp,0(sp)
    4efc:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    4f00:	00804784 	movi	r2,286
}
    4f04:	e037883a 	mov	sp,fp
    4f08:	df000017 	ldw	fp,0(sp)
    4f0c:	dec00104 	addi	sp,sp,4
    4f10:	f800283a 	ret

00004f14 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    4f14:	deffff04 	addi	sp,sp,-4
    4f18:	df000015 	stw	fp,0(sp)
    4f1c:	d839883a 	mov	fp,sp
}
    4f20:	0001883a 	nop
    4f24:	e037883a 	mov	sp,fp
    4f28:	df000017 	ldw	fp,0(sp)
    4f2c:	dec00104 	addi	sp,sp,4
    4f30:	f800283a 	ret

00004f34 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    4f34:	defff804 	addi	sp,sp,-32
    4f38:	dfc00715 	stw	ra,28(sp)
    4f3c:	df000615 	stw	fp,24(sp)
    4f40:	df000604 	addi	fp,sp,24
    4f44:	e13ffc15 	stw	r4,-16(fp)
    4f48:	e17ffd15 	stw	r5,-12(fp)
    4f4c:	3007883a 	mov	r3,r6
    4f50:	3805883a 	mov	r2,r7
    4f54:	e0fffe05 	stb	r3,-8(fp)
    4f58:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    4f5c:	e0bffc17 	ldw	r2,-16(fp)
    4f60:	10800283 	ldbu	r2,10(r2)
    4f64:	10c03fcc 	andi	r3,r2,255
    4f68:	00800074 	movhi	r2,1
    4f6c:	10bbb904 	addi	r2,r2,-4380
    4f70:	10c5883a 	add	r2,r2,r3
    4f74:	10800003 	ldbu	r2,0(r2)
    4f78:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    4f7c:	e0bffa03 	ldbu	r2,-24(fp)
    4f80:	e0fffc17 	ldw	r3,-16(fp)
    4f84:	1885883a 	add	r2,r3,r2
    4f88:	108002c4 	addi	r2,r2,11
    4f8c:	10800003 	ldbu	r2,0(r2)
    4f90:	10c03fcc 	andi	r3,r2,255
    4f94:	00800074 	movhi	r2,1
    4f98:	10bbb904 	addi	r2,r2,-4380
    4f9c:	10c5883a 	add	r2,r2,r3
    4fa0:	10800003 	ldbu	r2,0(r2)
    4fa4:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    4fa8:	e0bffa03 	ldbu	r2,-24(fp)
    4fac:	100490fa 	slli	r2,r2,3
    4fb0:	1007883a 	mov	r3,r2
    4fb4:	e0bffa43 	ldbu	r2,-23(fp)
    4fb8:	1885883a 	add	r2,r3,r2
    4fbc:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    4fc0:	e0fffa83 	ldbu	r3,-22(fp)
    4fc4:	00800074 	movhi	r2,1
    4fc8:	109ed204 	addi	r2,r2,31560
    4fcc:	18c7883a 	add	r3,r3,r3
    4fd0:	18c7883a 	add	r3,r3,r3
    4fd4:	10c5883a 	add	r2,r2,r3
    4fd8:	10800017 	ldw	r2,0(r2)
    4fdc:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    4fe0:	e0bffb17 	ldw	r2,-20(fp)
    4fe4:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    4fe8:	e0bffb17 	ldw	r2,-20(fp)
    4fec:	e0fffd17 	ldw	r3,-12(fp)
    4ff0:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    4ff4:	e0bffb17 	ldw	r2,-20(fp)
    4ff8:	10800c03 	ldbu	r2,48(r2)
    4ffc:	1007883a 	mov	r3,r2
    5000:	e0bffe03 	ldbu	r2,-8(fp)
    5004:	0084303a 	nor	r2,zero,r2
    5008:	1884703a 	and	r2,r3,r2
    500c:	1007883a 	mov	r3,r2
    5010:	e0bffb17 	ldw	r2,-20(fp)
    5014:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    5018:	e0bffb17 	ldw	r2,-20(fp)
    501c:	e0ffff03 	ldbu	r3,-4(fp)
    5020:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    5024:	e0bffb17 	ldw	r2,-20(fp)
    5028:	10800c03 	ldbu	r2,48(r2)
    502c:	10803fcc 	andi	r2,r2,255
    5030:	1080020c 	andi	r2,r2,8
    5034:	1000111e 	bne	r2,zero,507c <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    5038:	e0bffb17 	ldw	r2,-20(fp)
    503c:	10c00d83 	ldbu	r3,54(r2)
    5040:	d0a74703 	ldbu	r2,-25316(gp)
    5044:	1884b03a 	or	r2,r3,r2
    5048:	d0a74705 	stb	r2,-25316(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    504c:	e0fffa03 	ldbu	r3,-24(fp)
    5050:	e13ffa03 	ldbu	r4,-24(fp)
    5054:	d0a74744 	addi	r2,gp,-25315
    5058:	2085883a 	add	r2,r4,r2
    505c:	11000003 	ldbu	r4,0(r2)
    5060:	e0bffb17 	ldw	r2,-20(fp)
    5064:	10800d43 	ldbu	r2,53(r2)
    5068:	2084b03a 	or	r2,r4,r2
    506c:	1009883a 	mov	r4,r2
    5070:	d0a74744 	addi	r2,gp,-25315
    5074:	1885883a 	add	r2,r3,r2
    5078:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    507c:	e17ffc17 	ldw	r5,-16(fp)
    5080:	e13ffb17 	ldw	r4,-20(fp)
    5084:	000532c0 	call	532c <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    5088:	e0bffb17 	ldw	r2,-20(fp)
    508c:	10800817 	ldw	r2,32(r2)
    5090:	10000826 	beq	r2,zero,50b4 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    5094:	e0bffb17 	ldw	r2,-20(fp)
    5098:	10800817 	ldw	r2,32(r2)
    509c:	100b883a 	mov	r5,r2
    50a0:	e13ffb17 	ldw	r4,-20(fp)
    50a4:	00053e40 	call	53e4 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    50a8:	e0bffb17 	ldw	r2,-20(fp)
    50ac:	e0fffc17 	ldw	r3,-16(fp)
    50b0:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    50b4:	e0bffa83 	ldbu	r2,-22(fp)
}
    50b8:	e037883a 	mov	sp,fp
    50bc:	dfc00117 	ldw	ra,4(sp)
    50c0:	df000017 	ldw	fp,0(sp)
    50c4:	dec00204 	addi	sp,sp,8
    50c8:	f800283a 	ret

000050cc <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    50cc:	defffd04 	addi	sp,sp,-12
    50d0:	df000215 	stw	fp,8(sp)
    50d4:	df000204 	addi	fp,sp,8
    50d8:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    50dc:	d0a74a17 	ldw	r2,-25304(gp)
    50e0:	e0ffff17 	ldw	r3,-4(fp)
    50e4:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    50e8:	d0a74a17 	ldw	r2,-25304(gp)
    50ec:	10800d03 	ldbu	r2,52(r2)
    50f0:	10803fcc 	andi	r2,r2,255
    50f4:	d0e74a17 	ldw	r3,-25304(gp)
    50f8:	18c00d03 	ldbu	r3,52(r3)
    50fc:	18c03fcc 	andi	r3,r3,255
    5100:	e13fff17 	ldw	r4,-4(fp)
    5104:	20c7883a 	add	r3,r4,r3
    5108:	18c002c4 	addi	r3,r3,11
    510c:	19000003 	ldbu	r4,0(r3)
    5110:	d0e74a17 	ldw	r3,-25304(gp)
    5114:	18c00d43 	ldbu	r3,53(r3)
    5118:	20c6b03a 	or	r3,r4,r3
    511c:	1809883a 	mov	r4,r3
    5120:	e0ffff17 	ldw	r3,-4(fp)
    5124:	1885883a 	add	r2,r3,r2
    5128:	108002c4 	addi	r2,r2,11
    512c:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    5130:	e0bfff17 	ldw	r2,-4(fp)
    5134:	10c00283 	ldbu	r3,10(r2)
    5138:	d0a74a17 	ldw	r2,-25304(gp)
    513c:	10800d83 	ldbu	r2,54(r2)
    5140:	1884b03a 	or	r2,r3,r2
    5144:	1007883a 	mov	r3,r2
    5148:	e0bfff17 	ldw	r2,-4(fp)
    514c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    5150:	d0a74a17 	ldw	r2,-25304(gp)
    5154:	10800d03 	ldbu	r2,52(r2)
    5158:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    515c:	e0fffe03 	ldbu	r3,-8(fp)
    5160:	e13ffe03 	ldbu	r4,-8(fp)
    5164:	d0a74744 	addi	r2,gp,-25315
    5168:	2085883a 	add	r2,r4,r2
    516c:	10800003 	ldbu	r2,0(r2)
    5170:	1009883a 	mov	r4,r2
    5174:	d0a74a17 	ldw	r2,-25304(gp)
    5178:	10800d43 	ldbu	r2,53(r2)
    517c:	0084303a 	nor	r2,zero,r2
    5180:	2084703a 	and	r2,r4,r2
    5184:	1009883a 	mov	r4,r2
    5188:	d0a74744 	addi	r2,gp,-25315
    518c:	1885883a 	add	r2,r3,r2
    5190:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    5194:	e0fffe03 	ldbu	r3,-8(fp)
    5198:	d0a74744 	addi	r2,gp,-25315
    519c:	1885883a 	add	r2,r3,r2
    51a0:	10800003 	ldbu	r2,0(r2)
    51a4:	10803fcc 	andi	r2,r2,255
    51a8:	1000071e 	bne	r2,zero,51c8 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    51ac:	d0a74a17 	ldw	r2,-25304(gp)
    51b0:	10800d83 	ldbu	r2,54(r2)
    51b4:	0084303a 	nor	r2,zero,r2
    51b8:	1007883a 	mov	r3,r2
    51bc:	d0a74703 	ldbu	r2,-25316(gp)
    51c0:	1884703a 	and	r2,r3,r2
    51c4:	d0a74705 	stb	r2,-25316(gp)
    }
}
    51c8:	0001883a 	nop
    51cc:	e037883a 	mov	sp,fp
    51d0:	df000017 	ldw	fp,0(sp)
    51d4:	dec00104 	addi	sp,sp,4
    51d8:	f800283a 	ret

000051dc <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    51dc:	defffb04 	addi	sp,sp,-20
    51e0:	df000415 	stw	fp,16(sp)
    51e4:	df000404 	addi	fp,sp,16
    51e8:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    51ec:	d0a74a17 	ldw	r2,-25304(gp)
    51f0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    51f4:	d0a74a17 	ldw	r2,-25304(gp)
    51f8:	e0ffff17 	ldw	r3,-4(fp)
    51fc:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    5200:	e0bfff17 	ldw	r2,-4(fp)
    5204:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    5208:	e0bffc17 	ldw	r2,-16(fp)
    520c:	10800017 	ldw	r2,0(r2)
    5210:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    5214:	00002006 	br	5298 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    5218:	d0a74a17 	ldw	r2,-25304(gp)
    521c:	10800d03 	ldbu	r2,52(r2)
    5220:	10803fcc 	andi	r2,r2,255
    5224:	d0e74a17 	ldw	r3,-25304(gp)
    5228:	18c00d03 	ldbu	r3,52(r3)
    522c:	18c03fcc 	andi	r3,r3,255
    5230:	e13ffd17 	ldw	r4,-12(fp)
    5234:	20c7883a 	add	r3,r4,r3
    5238:	18c002c4 	addi	r3,r3,11
    523c:	19000003 	ldbu	r4,0(r3)
    5240:	d0e74a17 	ldw	r3,-25304(gp)
    5244:	18c00d43 	ldbu	r3,53(r3)
    5248:	20c6b03a 	or	r3,r4,r3
    524c:	1809883a 	mov	r4,r3
    5250:	e0fffd17 	ldw	r3,-12(fp)
    5254:	1885883a 	add	r2,r3,r2
    5258:	108002c4 	addi	r2,r2,11
    525c:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    5260:	e0bffd17 	ldw	r2,-12(fp)
    5264:	10c00283 	ldbu	r3,10(r2)
    5268:	d0a74a17 	ldw	r2,-25304(gp)
    526c:	10800d83 	ldbu	r2,54(r2)
    5270:	1884b03a 	or	r2,r3,r2
    5274:	1007883a 	mov	r3,r2
    5278:	e0bffd17 	ldw	r2,-12(fp)
    527c:	10c00285 	stb	r3,10(r2)
        pevents++;
    5280:	e0bffc17 	ldw	r2,-16(fp)
    5284:	10800104 	addi	r2,r2,4
    5288:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    528c:	e0bffc17 	ldw	r2,-16(fp)
    5290:	10800017 	ldw	r2,0(r2)
    5294:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    5298:	e0bffd17 	ldw	r2,-12(fp)
    529c:	103fde1e 	bne	r2,zero,5218 <__alt_mem_onchip_memory2_0+0xfc001218>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    52a0:	d0a74a17 	ldw	r2,-25304(gp)
    52a4:	10800d03 	ldbu	r2,52(r2)
    52a8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    52ac:	e0fffe03 	ldbu	r3,-8(fp)
    52b0:	e13ffe03 	ldbu	r4,-8(fp)
    52b4:	d0a74744 	addi	r2,gp,-25315
    52b8:	2085883a 	add	r2,r4,r2
    52bc:	10800003 	ldbu	r2,0(r2)
    52c0:	1009883a 	mov	r4,r2
    52c4:	d0a74a17 	ldw	r2,-25304(gp)
    52c8:	10800d43 	ldbu	r2,53(r2)
    52cc:	0084303a 	nor	r2,zero,r2
    52d0:	2084703a 	and	r2,r4,r2
    52d4:	1009883a 	mov	r4,r2
    52d8:	d0a74744 	addi	r2,gp,-25315
    52dc:	1885883a 	add	r2,r3,r2
    52e0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    52e4:	e0fffe03 	ldbu	r3,-8(fp)
    52e8:	d0a74744 	addi	r2,gp,-25315
    52ec:	1885883a 	add	r2,r3,r2
    52f0:	10800003 	ldbu	r2,0(r2)
    52f4:	10803fcc 	andi	r2,r2,255
    52f8:	1000071e 	bne	r2,zero,5318 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    52fc:	d0a74a17 	ldw	r2,-25304(gp)
    5300:	10800d83 	ldbu	r2,54(r2)
    5304:	0084303a 	nor	r2,zero,r2
    5308:	1007883a 	mov	r3,r2
    530c:	d0a74703 	ldbu	r2,-25316(gp)
    5310:	1884703a 	and	r2,r3,r2
    5314:	d0a74705 	stb	r2,-25316(gp)
    }
}
    5318:	0001883a 	nop
    531c:	e037883a 	mov	sp,fp
    5320:	df000017 	ldw	fp,0(sp)
    5324:	dec00104 	addi	sp,sp,4
    5328:	f800283a 	ret

0000532c <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    532c:	defffc04 	addi	sp,sp,-16
    5330:	df000315 	stw	fp,12(sp)
    5334:	df000304 	addi	fp,sp,12
    5338:	e13ffe15 	stw	r4,-8(fp)
    533c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    5340:	e0bffe17 	ldw	r2,-8(fp)
    5344:	10800d03 	ldbu	r2,52(r2)
    5348:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    534c:	e0bffd03 	ldbu	r2,-12(fp)
    5350:	e0fffd03 	ldbu	r3,-12(fp)
    5354:	e13fff17 	ldw	r4,-4(fp)
    5358:	20c7883a 	add	r3,r4,r3
    535c:	18c002c4 	addi	r3,r3,11
    5360:	18c00003 	ldbu	r3,0(r3)
    5364:	1809883a 	mov	r4,r3
    5368:	e0fffe17 	ldw	r3,-8(fp)
    536c:	18c00d43 	ldbu	r3,53(r3)
    5370:	00c6303a 	nor	r3,zero,r3
    5374:	20c6703a 	and	r3,r4,r3
    5378:	1809883a 	mov	r4,r3
    537c:	e0ffff17 	ldw	r3,-4(fp)
    5380:	1885883a 	add	r2,r3,r2
    5384:	108002c4 	addi	r2,r2,11
    5388:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
    538c:	e0bffd03 	ldbu	r2,-12(fp)
    5390:	e0ffff17 	ldw	r3,-4(fp)
    5394:	1885883a 	add	r2,r3,r2
    5398:	108002c4 	addi	r2,r2,11
    539c:	10800003 	ldbu	r2,0(r2)
    53a0:	10803fcc 	andi	r2,r2,255
    53a4:	10000a1e 	bne	r2,zero,53d0 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    53a8:	e0bfff17 	ldw	r2,-4(fp)
    53ac:	10800283 	ldbu	r2,10(r2)
    53b0:	1007883a 	mov	r3,r2
    53b4:	e0bffe17 	ldw	r2,-8(fp)
    53b8:	10800d83 	ldbu	r2,54(r2)
    53bc:	0084303a 	nor	r2,zero,r2
    53c0:	1884703a 	and	r2,r3,r2
    53c4:	1007883a 	mov	r3,r2
    53c8:	e0bfff17 	ldw	r2,-4(fp)
    53cc:	10c00285 	stb	r3,10(r2)
    }
}
    53d0:	0001883a 	nop
    53d4:	e037883a 	mov	sp,fp
    53d8:	df000017 	ldw	fp,0(sp)
    53dc:	dec00104 	addi	sp,sp,4
    53e0:	f800283a 	ret

000053e4 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    53e4:	defffa04 	addi	sp,sp,-24
    53e8:	df000515 	stw	fp,20(sp)
    53ec:	df000504 	addi	fp,sp,20
    53f0:	e13ffe15 	stw	r4,-8(fp)
    53f4:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    53f8:	e0bffe17 	ldw	r2,-8(fp)
    53fc:	10800d03 	ldbu	r2,52(r2)
    5400:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    5404:	e0bffe17 	ldw	r2,-8(fp)
    5408:	10800d83 	ldbu	r2,54(r2)
    540c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    5410:	e0bffe17 	ldw	r2,-8(fp)
    5414:	10800d43 	ldbu	r2,53(r2)
    5418:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    541c:	e0bfff17 	ldw	r2,-4(fp)
    5420:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    5424:	e0bffb17 	ldw	r2,-20(fp)
    5428:	10800017 	ldw	r2,0(r2)
    542c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    5430:	00002506 	br	54c8 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    5434:	e0bffd03 	ldbu	r2,-12(fp)
    5438:	e0fffd03 	ldbu	r3,-12(fp)
    543c:	e13ffc17 	ldw	r4,-16(fp)
    5440:	20c7883a 	add	r3,r4,r3
    5444:	18c002c4 	addi	r3,r3,11
    5448:	18c00003 	ldbu	r3,0(r3)
    544c:	1809883a 	mov	r4,r3
    5450:	e0fffd83 	ldbu	r3,-10(fp)
    5454:	00c6303a 	nor	r3,zero,r3
    5458:	20c6703a 	and	r3,r4,r3
    545c:	1809883a 	mov	r4,r3
    5460:	e0fffc17 	ldw	r3,-16(fp)
    5464:	1885883a 	add	r2,r3,r2
    5468:	108002c4 	addi	r2,r2,11
    546c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
    5470:	e0bffd03 	ldbu	r2,-12(fp)
    5474:	e0fffc17 	ldw	r3,-16(fp)
    5478:	1885883a 	add	r2,r3,r2
    547c:	108002c4 	addi	r2,r2,11
    5480:	10800003 	ldbu	r2,0(r2)
    5484:	10803fcc 	andi	r2,r2,255
    5488:	1000091e 	bne	r2,zero,54b0 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    548c:	e0bffc17 	ldw	r2,-16(fp)
    5490:	10800283 	ldbu	r2,10(r2)
    5494:	1007883a 	mov	r3,r2
    5498:	e0bffd43 	ldbu	r2,-11(fp)
    549c:	0084303a 	nor	r2,zero,r2
    54a0:	1884703a 	and	r2,r3,r2
    54a4:	1007883a 	mov	r3,r2
    54a8:	e0bffc17 	ldw	r2,-16(fp)
    54ac:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    54b0:	e0bffb17 	ldw	r2,-20(fp)
    54b4:	10800104 	addi	r2,r2,4
    54b8:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    54bc:	e0bffb17 	ldw	r2,-20(fp)
    54c0:	10800017 	ldw	r2,0(r2)
    54c4:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    54c8:	e0bffc17 	ldw	r2,-16(fp)
    54cc:	103fd91e 	bne	r2,zero,5434 <__alt_mem_onchip_memory2_0+0xfc001434>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    54d0:	0001883a 	nop
    54d4:	e037883a 	mov	sp,fp
    54d8:	df000017 	ldw	fp,0(sp)
    54dc:	dec00104 	addi	sp,sp,4
    54e0:	f800283a 	ret

000054e4 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    54e4:	defffc04 	addi	sp,sp,-16
    54e8:	df000315 	stw	fp,12(sp)
    54ec:	df000304 	addi	fp,sp,12
    54f0:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    54f4:	e0bfff17 	ldw	r2,-4(fp)
    54f8:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    54fc:	e0bfff17 	ldw	r2,-4(fp)
    5500:	108002c4 	addi	r2,r2,11
    5504:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    5508:	e03ffe05 	stb	zero,-8(fp)
    550c:	00000706 	br	552c <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    5510:	e0bffd17 	ldw	r2,-12(fp)
    5514:	10c00044 	addi	r3,r2,1
    5518:	e0fffd15 	stw	r3,-12(fp)
    551c:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    5520:	e0bffe03 	ldbu	r2,-8(fp)
    5524:	10800044 	addi	r2,r2,1
    5528:	e0bffe05 	stb	r2,-8(fp)
    552c:	e0bffe03 	ldbu	r2,-8(fp)
    5530:	108000f0 	cmpltui	r2,r2,3
    5534:	103ff61e 	bne	r2,zero,5510 <__alt_mem_onchip_memory2_0+0xfc001510>
        *ptbl++ = 0;
    }
}
    5538:	0001883a 	nop
    553c:	e037883a 	mov	sp,fp
    5540:	df000017 	ldw	fp,0(sp)
    5544:	dec00104 	addi	sp,sp,4
    5548:	f800283a 	ret

0000554c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    554c:	defffb04 	addi	sp,sp,-20
    5550:	dfc00415 	stw	ra,16(sp)
    5554:	df000315 	stw	fp,12(sp)
    5558:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    555c:	0142d004 	movi	r5,2880
    5560:	01000074 	movhi	r4,1
    5564:	211abe04 	addi	r4,r4,27384
    5568:	00058c40 	call	58c4 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    556c:	00800074 	movhi	r2,1
    5570:	109abe04 	addi	r2,r2,27384
    5574:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    5578:	00800074 	movhi	r2,1
    557c:	109aca04 	addi	r2,r2,27432
    5580:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    5584:	e03ffd0d 	sth	zero,-12(fp)
    5588:	00001306 	br	55d8 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    558c:	e0bffe17 	ldw	r2,-8(fp)
    5590:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    5594:	e0bffe17 	ldw	r2,-8(fp)
    5598:	e0ffff17 	ldw	r3,-4(fp)
    559c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    55a0:	e0bffe17 	ldw	r2,-8(fp)
    55a4:	00c00fc4 	movi	r3,63
    55a8:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    55ac:	e0bffe17 	ldw	r2,-8(fp)
    55b0:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    55b4:	e0bffe17 	ldw	r2,-8(fp)
    55b8:	10800c04 	addi	r2,r2,48
    55bc:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    55c0:	e0bfff17 	ldw	r2,-4(fp)
    55c4:	10800c04 	addi	r2,r2,48
    55c8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    55cc:	e0bffd0b 	ldhu	r2,-12(fp)
    55d0:	10800044 	addi	r2,r2,1
    55d4:	e0bffd0d 	sth	r2,-12(fp)
    55d8:	e0bffd0b 	ldhu	r2,-12(fp)
    55dc:	10800ef0 	cmpltui	r2,r2,59
    55e0:	103fea1e 	bne	r2,zero,558c <__alt_mem_onchip_memory2_0+0xfc00158c>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    55e4:	e0bffe17 	ldw	r2,-8(fp)
    55e8:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    55ec:	e0bffe17 	ldw	r2,-8(fp)
    55f0:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    55f4:	e0bffe17 	ldw	r2,-8(fp)
    55f8:	00c00fc4 	movi	r3,63
    55fc:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    5600:	e0bffe17 	ldw	r2,-8(fp)
    5604:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    5608:	00800074 	movhi	r2,1
    560c:	109abe04 	addi	r2,r2,27384
    5610:	d0a74815 	stw	r2,-25312(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    5614:	0001883a 	nop
    5618:	e037883a 	mov	sp,fp
    561c:	dfc00117 	ldw	ra,4(sp)
    5620:	df000017 	ldw	fp,0(sp)
    5624:	dec00204 	addi	sp,sp,8
    5628:	f800283a 	ret

0000562c <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    562c:	deffff04 	addi	sp,sp,-4
    5630:	df000015 	stw	fp,0(sp)
    5634:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    5638:	d0274b15 	stw	zero,-25300(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    563c:	d0274905 	stb	zero,-25308(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    5640:	d0273b05 	stb	zero,-25364(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    5644:	d0274345 	stb	zero,-25331(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    5648:	d0273b45 	stb	zero,-25363(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    564c:	d0274015 	stw	zero,-25344(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    5650:	d0273c15 	stw	zero,-25360(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    5654:	d0274e15 	stw	zero,-25288(gp)
    OSIdleCtrMax  = 0L;
    5658:	d0274115 	stw	zero,-25340(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    565c:	d0274d05 	stb	zero,-25292(gp)
#endif
}
    5660:	0001883a 	nop
    5664:	e037883a 	mov	sp,fp
    5668:	df000017 	ldw	fp,0(sp)
    566c:	dec00104 	addi	sp,sp,4
    5670:	f800283a 	ret

00005674 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    5674:	defffd04 	addi	sp,sp,-12
    5678:	df000215 	stw	fp,8(sp)
    567c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    5680:	d0274705 	stb	zero,-25316(gp)
    prdytbl       = &OSRdyTbl[0];
    5684:	d0a74744 	addi	r2,gp,-25315
    5688:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    568c:	e03ffe05 	stb	zero,-8(fp)
    5690:	00000706 	br	56b0 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    5694:	e0bfff17 	ldw	r2,-4(fp)
    5698:	10c00044 	addi	r3,r2,1
    569c:	e0ffff15 	stw	r3,-4(fp)
    56a0:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    56a4:	e0bffe03 	ldbu	r2,-8(fp)
    56a8:	10800044 	addi	r2,r2,1
    56ac:	e0bffe05 	stb	r2,-8(fp)
    56b0:	e0bffe03 	ldbu	r2,-8(fp)
    56b4:	108000f0 	cmpltui	r2,r2,3
    56b8:	103ff61e 	bne	r2,zero,5694 <__alt_mem_onchip_memory2_0+0xfc001694>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    56bc:	d0273d45 	stb	zero,-25355(gp)
    OSPrioHighRdy = 0;
    56c0:	d0273d05 	stb	zero,-25356(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    56c4:	d0274515 	stw	zero,-25324(gp)
    OSTCBCur      = (OS_TCB *)0;
    56c8:	d0274a15 	stw	zero,-25304(gp)
}
    56cc:	0001883a 	nop
    56d0:	e037883a 	mov	sp,fp
    56d4:	df000017 	ldw	fp,0(sp)
    56d8:	dec00104 	addi	sp,sp,4
    56dc:	f800283a 	ret

000056e0 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    56e0:	defff804 	addi	sp,sp,-32
    56e4:	dfc00715 	stw	ra,28(sp)
    56e8:	df000615 	stw	fp,24(sp)
    56ec:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    56f0:	008000c4 	movi	r2,3
    56f4:	d8800415 	stw	r2,16(sp)
    56f8:	d8000315 	stw	zero,12(sp)
    56fc:	00808004 	movi	r2,512
    5700:	d8800215 	stw	r2,8(sp)
    5704:	00800074 	movhi	r2,1
    5708:	1098be04 	addi	r2,r2,25336
    570c:	d8800115 	stw	r2,4(sp)
    5710:	00bfffd4 	movui	r2,65535
    5714:	d8800015 	stw	r2,0(sp)
    5718:	01c00504 	movi	r7,20
    571c:	01800074 	movhi	r6,1
    5720:	319abd04 	addi	r6,r6,27380
    5724:	000b883a 	mov	r5,zero
    5728:	01000034 	movhi	r4,0
    572c:	2116e304 	addi	r4,r4,23436
    5730:	000a24c0 	call	a24c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    5734:	e1bfff04 	addi	r6,fp,-4
    5738:	01400074 	movhi	r5,1
    573c:	297bf904 	addi	r5,r5,-4124
    5740:	01000504 	movi	r4,20
    5744:	000aa5c0 	call	aa5c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    5748:	0001883a 	nop
    574c:	e037883a 	mov	sp,fp
    5750:	dfc00117 	ldw	ra,4(sp)
    5754:	df000017 	ldw	fp,0(sp)
    5758:	dec00204 	addi	sp,sp,8
    575c:	f800283a 	ret

00005760 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    5760:	defff804 	addi	sp,sp,-32
    5764:	dfc00715 	stw	ra,28(sp)
    5768:	df000615 	stw	fp,24(sp)
    576c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    5770:	008000c4 	movi	r2,3
    5774:	d8800415 	stw	r2,16(sp)
    5778:	d8000315 	stw	zero,12(sp)
    577c:	00808004 	movi	r2,512
    5780:	d8800215 	stw	r2,8(sp)
    5784:	00800074 	movhi	r2,1
    5788:	10964604 	addi	r2,r2,22808
    578c:	d8800115 	stw	r2,4(sp)
    5790:	00bfff94 	movui	r2,65534
    5794:	d8800015 	stw	r2,0(sp)
    5798:	01c004c4 	movi	r7,19
    579c:	01800074 	movhi	r6,1
    57a0:	31984504 	addi	r6,r6,24852
    57a4:	000b883a 	mov	r5,zero
    57a8:	01000034 	movhi	r4,0
    57ac:	2116fa04 	addi	r4,r4,23528
    57b0:	000a24c0 	call	a24c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    57b4:	e1bfff04 	addi	r6,fp,-4
    57b8:	01400074 	movhi	r5,1
    57bc:	297bfd04 	addi	r5,r5,-4108
    57c0:	010004c4 	movi	r4,19
    57c4:	000aa5c0 	call	aa5c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    57c8:	0001883a 	nop
    57cc:	e037883a 	mov	sp,fp
    57d0:	dfc00117 	ldw	ra,4(sp)
    57d4:	df000017 	ldw	fp,0(sp)
    57d8:	dec00204 	addi	sp,sp,8
    57dc:	f800283a 	ret

000057e0 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    57e0:	defffb04 	addi	sp,sp,-20
    57e4:	dfc00415 	stw	ra,16(sp)
    57e8:	df000315 	stw	fp,12(sp)
    57ec:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    57f0:	01414404 	movi	r5,1296
    57f4:	01000074 	movhi	r4,1
    57f8:	211d8e04 	addi	r4,r4,30264
    57fc:	00058c40 	call	58c4 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    5800:	01401504 	movi	r5,84
    5804:	01000074 	movhi	r4,1
    5808:	211ed204 	addi	r4,r4,31560
    580c:	00058c40 	call	58c4 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    5810:	00800074 	movhi	r2,1
    5814:	109d8e04 	addi	r2,r2,30264
    5818:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    581c:	00800074 	movhi	r2,1
    5820:	109da904 	addi	r2,r2,30372
    5824:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    5828:	e03ffd05 	stb	zero,-12(fp)
    582c:	00001106 	br	5874 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    5830:	e0bffe17 	ldw	r2,-8(fp)
    5834:	e0ffff17 	ldw	r3,-4(fp)
    5838:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    583c:	e0bffe17 	ldw	r2,-8(fp)
    5840:	00c00fc4 	movi	r3,63
    5844:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    5848:	e0bffe17 	ldw	r2,-8(fp)
    584c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    5850:	e0bffe17 	ldw	r2,-8(fp)
    5854:	10801b04 	addi	r2,r2,108
    5858:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    585c:	e0bfff17 	ldw	r2,-4(fp)
    5860:	10801b04 	addi	r2,r2,108
    5864:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    5868:	e0bffd03 	ldbu	r2,-12(fp)
    586c:	10800044 	addi	r2,r2,1
    5870:	e0bffd05 	stb	r2,-12(fp)
    5874:	e0bffd03 	ldbu	r2,-12(fp)
    5878:	108002f0 	cmpltui	r2,r2,11
    587c:	103fec1e 	bne	r2,zero,5830 <__alt_mem_onchip_memory2_0+0xfc001830>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    5880:	e0bffe17 	ldw	r2,-8(fp)
    5884:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    5888:	e0bffe17 	ldw	r2,-8(fp)
    588c:	00c00fc4 	movi	r3,63
    5890:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    5894:	e0bffe17 	ldw	r2,-8(fp)
    5898:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    589c:	d0273e15 	stw	zero,-25352(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    58a0:	00800074 	movhi	r2,1
    58a4:	109d8e04 	addi	r2,r2,30264
    58a8:	d0a74215 	stw	r2,-25336(gp)
}
    58ac:	0001883a 	nop
    58b0:	e037883a 	mov	sp,fp
    58b4:	dfc00117 	ldw	ra,4(sp)
    58b8:	df000017 	ldw	fp,0(sp)
    58bc:	dec00204 	addi	sp,sp,8
    58c0:	f800283a 	ret

000058c4 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    58c4:	defffd04 	addi	sp,sp,-12
    58c8:	df000215 	stw	fp,8(sp)
    58cc:	df000204 	addi	fp,sp,8
    58d0:	e13ffe15 	stw	r4,-8(fp)
    58d4:	2805883a 	mov	r2,r5
    58d8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    58dc:	00000706 	br	58fc <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    58e0:	e0bffe17 	ldw	r2,-8(fp)
    58e4:	10c00044 	addi	r3,r2,1
    58e8:	e0fffe15 	stw	r3,-8(fp)
    58ec:	10000005 	stb	zero,0(r2)
        size--;
    58f0:	e0bfff0b 	ldhu	r2,-4(fp)
    58f4:	10bfffc4 	addi	r2,r2,-1
    58f8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    58fc:	e0bfff0b 	ldhu	r2,-4(fp)
    5900:	103ff71e 	bne	r2,zero,58e0 <__alt_mem_onchip_memory2_0+0xfc0018e0>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    5904:	0001883a 	nop
    5908:	e037883a 	mov	sp,fp
    590c:	df000017 	ldw	fp,0(sp)
    5910:	dec00104 	addi	sp,sp,4
    5914:	f800283a 	ret

00005918 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    5918:	defffc04 	addi	sp,sp,-16
    591c:	df000315 	stw	fp,12(sp)
    5920:	df000304 	addi	fp,sp,12
    5924:	e13ffd15 	stw	r4,-12(fp)
    5928:	e17ffe15 	stw	r5,-8(fp)
    592c:	3005883a 	mov	r2,r6
    5930:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    5934:	00000b06 	br	5964 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    5938:	e0bffd17 	ldw	r2,-12(fp)
    593c:	10c00044 	addi	r3,r2,1
    5940:	e0fffd15 	stw	r3,-12(fp)
    5944:	e0fffe17 	ldw	r3,-8(fp)
    5948:	19000044 	addi	r4,r3,1
    594c:	e13ffe15 	stw	r4,-8(fp)
    5950:	18c00003 	ldbu	r3,0(r3)
    5954:	10c00005 	stb	r3,0(r2)
        size--;
    5958:	e0bfff0b 	ldhu	r2,-4(fp)
    595c:	10bfffc4 	addi	r2,r2,-1
    5960:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    5964:	e0bfff0b 	ldhu	r2,-4(fp)
    5968:	103ff31e 	bne	r2,zero,5938 <__alt_mem_onchip_memory2_0+0xfc001938>
        *pdest++ = *psrc++;
        size--;
    }
}
    596c:	0001883a 	nop
    5970:	e037883a 	mov	sp,fp
    5974:	df000017 	ldw	fp,0(sp)
    5978:	dec00104 	addi	sp,sp,4
    597c:	f800283a 	ret

00005980 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    5980:	defffb04 	addi	sp,sp,-20
    5984:	dfc00415 	stw	ra,16(sp)
    5988:	df000315 	stw	fp,12(sp)
    598c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    5990:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5994:	0005303a 	rdctl	r2,status
    5998:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    599c:	e0ffff17 	ldw	r3,-4(fp)
    59a0:	00bfff84 	movi	r2,-2
    59a4:	1884703a 	and	r2,r3,r2
    59a8:	1001703a 	wrctl	status,r2
  
  return context;
    59ac:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
    59b0:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    59b4:	d0a74903 	ldbu	r2,-25308(gp)
    59b8:	10803fcc 	andi	r2,r2,255
    59bc:	10001a1e 	bne	r2,zero,5a28 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    59c0:	d0a73b03 	ldbu	r2,-25364(gp)
    59c4:	10803fcc 	andi	r2,r2,255
    59c8:	1000171e 	bne	r2,zero,5a28 <OS_Sched+0xa8>
            OS_SchedNew();
    59cc:	0005a500 	call	5a50 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    59d0:	d0e73d03 	ldbu	r3,-25356(gp)
    59d4:	d0a73d43 	ldbu	r2,-25355(gp)
    59d8:	18c03fcc 	andi	r3,r3,255
    59dc:	10803fcc 	andi	r2,r2,255
    59e0:	18801126 	beq	r3,r2,5a28 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    59e4:	d0a73d03 	ldbu	r2,-25356(gp)
    59e8:	10c03fcc 	andi	r3,r2,255
    59ec:	00800074 	movhi	r2,1
    59f0:	109ed204 	addi	r2,r2,31560
    59f4:	18c7883a 	add	r3,r3,r3
    59f8:	18c7883a 	add	r3,r3,r3
    59fc:	10c5883a 	add	r2,r2,r3
    5a00:	10800017 	ldw	r2,0(r2)
    5a04:	d0a74515 	stw	r2,-25324(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    5a08:	d0a74517 	ldw	r2,-25324(gp)
    5a0c:	10c00e17 	ldw	r3,56(r2)
    5a10:	18c00044 	addi	r3,r3,1
    5a14:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    5a18:	d0a74017 	ldw	r2,-25344(gp)
    5a1c:	10800044 	addi	r2,r2,1
    5a20:	d0a74015 	stw	r2,-25344(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    5a24:	000ddac0 	call	ddac <OSCtxSw>
    5a28:	e0bffd17 	ldw	r2,-12(fp)
    5a2c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5a30:	e0bffe17 	ldw	r2,-8(fp)
    5a34:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    5a38:	0001883a 	nop
    5a3c:	e037883a 	mov	sp,fp
    5a40:	dfc00117 	ldw	ra,4(sp)
    5a44:	df000017 	ldw	fp,0(sp)
    5a48:	dec00204 	addi	sp,sp,8
    5a4c:	f800283a 	ret

00005a50 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    5a50:	defffe04 	addi	sp,sp,-8
    5a54:	df000115 	stw	fp,4(sp)
    5a58:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    5a5c:	d0a74703 	ldbu	r2,-25316(gp)
    5a60:	10c03fcc 	andi	r3,r2,255
    5a64:	00800074 	movhi	r2,1
    5a68:	10bbb904 	addi	r2,r2,-4380
    5a6c:	10c5883a 	add	r2,r2,r3
    5a70:	10800003 	ldbu	r2,0(r2)
    5a74:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    5a78:	e0bfff03 	ldbu	r2,-4(fp)
    5a7c:	100490fa 	slli	r2,r2,3
    5a80:	1009883a 	mov	r4,r2
    5a84:	e0ffff03 	ldbu	r3,-4(fp)
    5a88:	d0a74744 	addi	r2,gp,-25315
    5a8c:	1885883a 	add	r2,r3,r2
    5a90:	10800003 	ldbu	r2,0(r2)
    5a94:	10c03fcc 	andi	r3,r2,255
    5a98:	00800074 	movhi	r2,1
    5a9c:	10bbb904 	addi	r2,r2,-4380
    5aa0:	10c5883a 	add	r2,r2,r3
    5aa4:	10800003 	ldbu	r2,0(r2)
    5aa8:	2085883a 	add	r2,r4,r2
    5aac:	d0a73d05 	stb	r2,-25356(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    5ab0:	0001883a 	nop
    5ab4:	e037883a 	mov	sp,fp
    5ab8:	df000017 	ldw	fp,0(sp)
    5abc:	dec00104 	addi	sp,sp,4
    5ac0:	f800283a 	ret

00005ac4 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    5ac4:	defffc04 	addi	sp,sp,-16
    5ac8:	df000315 	stw	fp,12(sp)
    5acc:	df000304 	addi	fp,sp,12
    5ad0:	e13ffe15 	stw	r4,-8(fp)
    5ad4:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    5ad8:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    5adc:	00000b06 	br	5b0c <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    5ae0:	e0bffe17 	ldw	r2,-8(fp)
    5ae4:	10c00044 	addi	r3,r2,1
    5ae8:	e0fffe15 	stw	r3,-8(fp)
    5aec:	e0ffff17 	ldw	r3,-4(fp)
    5af0:	19000044 	addi	r4,r3,1
    5af4:	e13fff15 	stw	r4,-4(fp)
    5af8:	18c00003 	ldbu	r3,0(r3)
    5afc:	10c00005 	stb	r3,0(r2)
        len++;
    5b00:	e0bffd03 	ldbu	r2,-12(fp)
    5b04:	10800044 	addi	r2,r2,1
    5b08:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    5b0c:	e0bfff17 	ldw	r2,-4(fp)
    5b10:	10800003 	ldbu	r2,0(r2)
    5b14:	10803fcc 	andi	r2,r2,255
    5b18:	103ff11e 	bne	r2,zero,5ae0 <__alt_mem_onchip_memory2_0+0xfc001ae0>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    5b1c:	e0bffe17 	ldw	r2,-8(fp)
    5b20:	10000005 	stb	zero,0(r2)
    return (len);
    5b24:	e0bffd03 	ldbu	r2,-12(fp)
}
    5b28:	e037883a 	mov	sp,fp
    5b2c:	df000017 	ldw	fp,0(sp)
    5b30:	dec00104 	addi	sp,sp,4
    5b34:	f800283a 	ret

00005b38 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    5b38:	defffd04 	addi	sp,sp,-12
    5b3c:	df000215 	stw	fp,8(sp)
    5b40:	df000204 	addi	fp,sp,8
    5b44:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    5b48:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    5b4c:	00000606 	br	5b68 <OS_StrLen+0x30>
        psrc++;
    5b50:	e0bfff17 	ldw	r2,-4(fp)
    5b54:	10800044 	addi	r2,r2,1
    5b58:	e0bfff15 	stw	r2,-4(fp)
        len++;
    5b5c:	e0bffe03 	ldbu	r2,-8(fp)
    5b60:	10800044 	addi	r2,r2,1
    5b64:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    5b68:	e0bfff17 	ldw	r2,-4(fp)
    5b6c:	10800003 	ldbu	r2,0(r2)
    5b70:	10803fcc 	andi	r2,r2,255
    5b74:	103ff61e 	bne	r2,zero,5b50 <__alt_mem_onchip_memory2_0+0xfc001b50>
        psrc++;
        len++;
    }
    return (len);
    5b78:	e0bffe03 	ldbu	r2,-8(fp)
}
    5b7c:	e037883a 	mov	sp,fp
    5b80:	df000017 	ldw	fp,0(sp)
    5b84:	dec00104 	addi	sp,sp,4
    5b88:	f800283a 	ret

00005b8c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    5b8c:	defffa04 	addi	sp,sp,-24
    5b90:	dfc00515 	stw	ra,20(sp)
    5b94:	df000415 	stw	fp,16(sp)
    5b98:	df000404 	addi	fp,sp,16
    5b9c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5ba0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5ba4:	0005303a 	rdctl	r2,status
    5ba8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5bac:	e0fffd17 	ldw	r3,-12(fp)
    5bb0:	00bfff84 	movi	r2,-2
    5bb4:	1884703a 	and	r2,r3,r2
    5bb8:	1001703a 	wrctl	status,r2
  
  return context;
    5bbc:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    5bc0:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    5bc4:	d0a73c17 	ldw	r2,-25360(gp)
    5bc8:	10800044 	addi	r2,r2,1
    5bcc:	d0a73c15 	stw	r2,-25360(gp)
    5bd0:	e0bffc17 	ldw	r2,-16(fp)
    5bd4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5bd8:	e0bffe17 	ldw	r2,-8(fp)
    5bdc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    5be0:	000e0c00 	call	e0c0 <OSTaskIdleHook>
    }
    5be4:	003fef06 	br	5ba4 <__alt_mem_onchip_memory2_0+0xfc001ba4>

00005be8 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    5be8:	defffa04 	addi	sp,sp,-24
    5bec:	dfc00515 	stw	ra,20(sp)
    5bf0:	df000415 	stw	fp,16(sp)
    5bf4:	df000404 	addi	fp,sp,16
    5bf8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5bfc:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    5c00:	00000206 	br	5c0c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    5c04:	01000504 	movi	r4,20
    5c08:	000b31c0 	call	b31c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    5c0c:	d0a74d03 	ldbu	r2,-25292(gp)
    5c10:	10803fcc 	andi	r2,r2,255
    5c14:	103ffb26 	beq	r2,zero,5c04 <__alt_mem_onchip_memory2_0+0xfc001c04>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    5c18:	d0a74117 	ldw	r2,-25340(gp)
    5c1c:	01401904 	movi	r5,100
    5c20:	1009883a 	mov	r4,r2
    5c24:	00006ac0 	call	6ac <__udivsi3>
    5c28:	d0a74115 	stw	r2,-25340(gp)
    if (OSIdleCtrMax == 0L) {
    5c2c:	d0a74117 	ldw	r2,-25340(gp)
    5c30:	1000031e 	bne	r2,zero,5c40 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
    5c34:	d0274305 	stb	zero,-25332(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    5c38:	01003fc4 	movi	r4,255
    5c3c:	000afa40 	call	afa4 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5c40:	0005303a 	rdctl	r2,status
    5c44:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5c48:	e0fffd17 	ldw	r3,-12(fp)
    5c4c:	00bfff84 	movi	r2,-2
    5c50:	1884703a 	and	r2,r3,r2
    5c54:	1001703a 	wrctl	status,r2
  
  return context;
    5c58:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    5c5c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    5c60:	d0a73c17 	ldw	r2,-25360(gp)
    5c64:	d0a74e15 	stw	r2,-25288(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    5c68:	d0273c15 	stw	zero,-25360(gp)
    5c6c:	e0bffc17 	ldw	r2,-16(fp)
    5c70:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5c74:	e0bffe17 	ldw	r2,-8(fp)
    5c78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    5c7c:	d0a74e17 	ldw	r2,-25288(gp)
    5c80:	d0e74117 	ldw	r3,-25340(gp)
    5c84:	180b883a 	mov	r5,r3
    5c88:	1009883a 	mov	r4,r2
    5c8c:	00006ac0 	call	6ac <__udivsi3>
    5c90:	1007883a 	mov	r3,r2
    5c94:	00801904 	movi	r2,100
    5c98:	10c5c83a 	sub	r2,r2,r3
    5c9c:	d0a74305 	stb	r2,-25332(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    5ca0:	000e0400 	call	e040 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    5ca4:	0005cb40 	call	5cb4 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    5ca8:	01000284 	movi	r4,10
    5cac:	000b31c0 	call	b31c <OSTimeDly>
    }
    5cb0:	003fe306 	br	5c40 <__alt_mem_onchip_memory2_0+0xfc001c40>

00005cb4 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    5cb4:	defffa04 	addi	sp,sp,-24
    5cb8:	dfc00515 	stw	ra,20(sp)
    5cbc:	df000415 	stw	fp,16(sp)
    5cc0:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    5cc4:	e03ffc05 	stb	zero,-16(fp)
    5cc8:	00002406 	br	5d5c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    5ccc:	e0bffc03 	ldbu	r2,-16(fp)
    5cd0:	e0fffe04 	addi	r3,fp,-8
    5cd4:	180b883a 	mov	r5,r3
    5cd8:	1009883a 	mov	r4,r2
    5cdc:	000ade40 	call	ade4 <OSTaskStkChk>
    5ce0:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    5ce4:	e0bffc43 	ldbu	r2,-15(fp)
    5ce8:	1000191e 	bne	r2,zero,5d50 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    5cec:	e0fffc03 	ldbu	r3,-16(fp)
    5cf0:	00800074 	movhi	r2,1
    5cf4:	109ed204 	addi	r2,r2,31560
    5cf8:	18c7883a 	add	r3,r3,r3
    5cfc:	18c7883a 	add	r3,r3,r3
    5d00:	10c5883a 	add	r2,r2,r3
    5d04:	10800017 	ldw	r2,0(r2)
    5d08:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    5d0c:	e0bffd17 	ldw	r2,-12(fp)
    5d10:	10000f26 	beq	r2,zero,5d50 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    5d14:	e0bffd17 	ldw	r2,-12(fp)
    5d18:	10800060 	cmpeqi	r2,r2,1
    5d1c:	10000c1e 	bne	r2,zero,5d50 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    5d20:	e0bffd17 	ldw	r2,-12(fp)
    5d24:	10c00217 	ldw	r3,8(r2)
    5d28:	e0bffd17 	ldw	r2,-12(fp)
    5d2c:	10800317 	ldw	r2,12(r2)
    5d30:	1085883a 	add	r2,r2,r2
    5d34:	1085883a 	add	r2,r2,r2
    5d38:	1887883a 	add	r3,r3,r2
    5d3c:	e0bffd17 	ldw	r2,-12(fp)
    5d40:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    5d44:	e0ffff17 	ldw	r3,-4(fp)
    5d48:	e0bffd17 	ldw	r2,-12(fp)
    5d4c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    5d50:	e0bffc03 	ldbu	r2,-16(fp)
    5d54:	10800044 	addi	r2,r2,1
    5d58:	e0bffc05 	stb	r2,-16(fp)
    5d5c:	e0bffc03 	ldbu	r2,-16(fp)
    5d60:	10800570 	cmpltui	r2,r2,21
    5d64:	103fd91e 	bne	r2,zero,5ccc <__alt_mem_onchip_memory2_0+0xfc001ccc>
#endif
                }
            }
        }
    }
}
    5d68:	0001883a 	nop
    5d6c:	e037883a 	mov	sp,fp
    5d70:	dfc00117 	ldw	ra,4(sp)
    5d74:	df000017 	ldw	fp,0(sp)
    5d78:	dec00204 	addi	sp,sp,8
    5d7c:	f800283a 	ret

00005d80 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    5d80:	defff204 	addi	sp,sp,-56
    5d84:	dfc00d15 	stw	ra,52(sp)
    5d88:	df000c15 	stw	fp,48(sp)
    5d8c:	df000c04 	addi	fp,sp,48
    5d90:	e17ffc15 	stw	r5,-16(fp)
    5d94:	e1bffd15 	stw	r6,-12(fp)
    5d98:	3807883a 	mov	r3,r7
    5d9c:	e0800417 	ldw	r2,16(fp)
    5da0:	e13ffb05 	stb	r4,-20(fp)
    5da4:	e0fffe0d 	sth	r3,-8(fp)
    5da8:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    5dac:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5db0:	0005303a 	rdctl	r2,status
    5db4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5db8:	e0fffa17 	ldw	r3,-24(fp)
    5dbc:	00bfff84 	movi	r2,-2
    5dc0:	1884703a 	and	r2,r3,r2
    5dc4:	1001703a 	wrctl	status,r2
  
  return context;
    5dc8:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
    5dcc:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    5dd0:	d0a74217 	ldw	r2,-25336(gp)
    5dd4:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
    5dd8:	e0bff617 	ldw	r2,-40(fp)
    5ddc:	10009326 	beq	r2,zero,602c <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    5de0:	e0bff617 	ldw	r2,-40(fp)
    5de4:	10800517 	ldw	r2,20(r2)
    5de8:	d0a74215 	stw	r2,-25336(gp)
    5dec:	e0bff417 	ldw	r2,-48(fp)
    5df0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5df4:	e0bff817 	ldw	r2,-32(fp)
    5df8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    5dfc:	e0bff617 	ldw	r2,-40(fp)
    5e00:	e0fffc17 	ldw	r3,-16(fp)
    5e04:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    5e08:	e0bff617 	ldw	r2,-40(fp)
    5e0c:	e0fffb03 	ldbu	r3,-20(fp)
    5e10:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    5e14:	e0bff617 	ldw	r2,-40(fp)
    5e18:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    5e1c:	e0bff617 	ldw	r2,-40(fp)
    5e20:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    5e24:	e0bff617 	ldw	r2,-40(fp)
    5e28:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    5e2c:	e0bff617 	ldw	r2,-40(fp)
    5e30:	e0c00317 	ldw	r3,12(fp)
    5e34:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    5e38:	e0bff617 	ldw	r2,-40(fp)
    5e3c:	e0c00217 	ldw	r3,8(fp)
    5e40:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    5e44:	e0bff617 	ldw	r2,-40(fp)
    5e48:	e0fffd17 	ldw	r3,-12(fp)
    5e4c:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    5e50:	e0bff617 	ldw	r2,-40(fp)
    5e54:	e0ffff0b 	ldhu	r3,-4(fp)
    5e58:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    5e5c:	e0bff617 	ldw	r2,-40(fp)
    5e60:	e0fffe0b 	ldhu	r3,-8(fp)
    5e64:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    5e68:	e0bff617 	ldw	r2,-40(fp)
    5e6c:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    5e70:	e0bffb03 	ldbu	r2,-20(fp)
    5e74:	1004d0fa 	srli	r2,r2,3
    5e78:	1007883a 	mov	r3,r2
    5e7c:	e0bff617 	ldw	r2,-40(fp)
    5e80:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    5e84:	e0bffb03 	ldbu	r2,-20(fp)
    5e88:	108001cc 	andi	r2,r2,7
    5e8c:	1007883a 	mov	r3,r2
    5e90:	e0bff617 	ldw	r2,-40(fp)
    5e94:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    5e98:	e0bff617 	ldw	r2,-40(fp)
    5e9c:	10800d03 	ldbu	r2,52(r2)
    5ea0:	10803fcc 	andi	r2,r2,255
    5ea4:	00c00044 	movi	r3,1
    5ea8:	1884983a 	sll	r2,r3,r2
    5eac:	1007883a 	mov	r3,r2
    5eb0:	e0bff617 	ldw	r2,-40(fp)
    5eb4:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    5eb8:	e0bff617 	ldw	r2,-40(fp)
    5ebc:	10800cc3 	ldbu	r2,51(r2)
    5ec0:	10803fcc 	andi	r2,r2,255
    5ec4:	00c00044 	movi	r3,1
    5ec8:	1884983a 	sll	r2,r3,r2
    5ecc:	1007883a 	mov	r3,r2
    5ed0:	e0bff617 	ldw	r2,-40(fp)
    5ed4:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    5ed8:	e0bff617 	ldw	r2,-40(fp)
    5edc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    5ee0:	e0bff617 	ldw	r2,-40(fp)
    5ee4:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    5ee8:	e0bff617 	ldw	r2,-40(fp)
    5eec:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    5ef0:	e0bff617 	ldw	r2,-40(fp)
    5ef4:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    5ef8:	e0bff617 	ldw	r2,-40(fp)
    5efc:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    5f00:	e0bff617 	ldw	r2,-40(fp)
    5f04:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    5f08:	e0bff617 	ldw	r2,-40(fp)
    5f0c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    5f10:	e0bff617 	ldw	r2,-40(fp)
    5f14:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    5f18:	e0bff617 	ldw	r2,-40(fp)
    5f1c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    5f20:	e0bff617 	ldw	r2,-40(fp)
    5f24:	00c00fc4 	movi	r3,63
    5f28:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    5f2c:	e0bff617 	ldw	r2,-40(fp)
    5f30:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    5f34:	e13ff617 	ldw	r4,-40(fp)
    5f38:	000e0e00 	call	e0e0 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    5f3c:	e13ff617 	ldw	r4,-40(fp)
    5f40:	000dfd80 	call	dfd8 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5f44:	0005303a 	rdctl	r2,status
    5f48:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5f4c:	e0fff517 	ldw	r3,-44(fp)
    5f50:	00bfff84 	movi	r2,-2
    5f54:	1884703a 	and	r2,r3,r2
    5f58:	1001703a 	wrctl	status,r2
  
  return context;
    5f5c:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
    5f60:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    5f64:	e0fffb03 	ldbu	r3,-20(fp)
    5f68:	00800074 	movhi	r2,1
    5f6c:	109ed204 	addi	r2,r2,31560
    5f70:	18c7883a 	add	r3,r3,r3
    5f74:	18c7883a 	add	r3,r3,r3
    5f78:	10c5883a 	add	r2,r2,r3
    5f7c:	e0fff617 	ldw	r3,-40(fp)
    5f80:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    5f84:	d0e73e17 	ldw	r3,-25352(gp)
    5f88:	e0bff617 	ldw	r2,-40(fp)
    5f8c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    5f90:	e0bff617 	ldw	r2,-40(fp)
    5f94:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    5f98:	d0a73e17 	ldw	r2,-25352(gp)
    5f9c:	10000326 	beq	r2,zero,5fac <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
    5fa0:	d0a73e17 	ldw	r2,-25352(gp)
    5fa4:	e0fff617 	ldw	r3,-40(fp)
    5fa8:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    5fac:	e0bff617 	ldw	r2,-40(fp)
    5fb0:	d0a73e15 	stw	r2,-25352(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    5fb4:	e0bff617 	ldw	r2,-40(fp)
    5fb8:	10c00d83 	ldbu	r3,54(r2)
    5fbc:	d0a74703 	ldbu	r2,-25316(gp)
    5fc0:	1884b03a 	or	r2,r3,r2
    5fc4:	d0a74705 	stb	r2,-25316(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    5fc8:	e0bff617 	ldw	r2,-40(fp)
    5fcc:	10800d03 	ldbu	r2,52(r2)
    5fd0:	10c03fcc 	andi	r3,r2,255
    5fd4:	e0bff617 	ldw	r2,-40(fp)
    5fd8:	10800d03 	ldbu	r2,52(r2)
    5fdc:	11003fcc 	andi	r4,r2,255
    5fe0:	d0a74744 	addi	r2,gp,-25315
    5fe4:	2085883a 	add	r2,r4,r2
    5fe8:	11000003 	ldbu	r4,0(r2)
    5fec:	e0bff617 	ldw	r2,-40(fp)
    5ff0:	10800d43 	ldbu	r2,53(r2)
    5ff4:	2084b03a 	or	r2,r4,r2
    5ff8:	1009883a 	mov	r4,r2
    5ffc:	d0a74744 	addi	r2,gp,-25315
    6000:	1885883a 	add	r2,r3,r2
    6004:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    6008:	d0a74343 	ldbu	r2,-25331(gp)
    600c:	10800044 	addi	r2,r2,1
    6010:	d0a74345 	stb	r2,-25331(gp)
    6014:	e0bff417 	ldw	r2,-48(fp)
    6018:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    601c:	e0bff717 	ldw	r2,-36(fp)
    6020:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    6024:	0005883a 	mov	r2,zero
    6028:	00000506 	br	6040 <OS_TCBInit+0x2c0>
    602c:	e0bff417 	ldw	r2,-48(fp)
    6030:	e0bff915 	stw	r2,-28(fp)
    6034:	e0bff917 	ldw	r2,-28(fp)
    6038:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    603c:	00801084 	movi	r2,66
}
    6040:	e037883a 	mov	sp,fp
    6044:	dfc00117 	ldw	ra,4(sp)
    6048:	df000017 	ldw	fp,0(sp)
    604c:	dec00204 	addi	sp,sp,8
    6050:	f800283a 	ret

00006054 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    6054:	defffe04 	addi	sp,sp,-8
    6058:	df000115 	stw	fp,4(sp)
    605c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    6060:	d0a01404 	addi	r2,gp,-32688
    6064:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    6068:	d0a01504 	addi	r2,gp,-32684
    606c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    6070:	d0a01684 	addi	r2,gp,-32678
    6074:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    6078:	d0a01704 	addi	r2,gp,-32676
    607c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    6080:	d0a01604 	addi	r2,gp,-32680
    6084:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    6088:	d0a01784 	addi	r2,gp,-32674
    608c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    6090:	d0a01804 	addi	r2,gp,-32672
    6094:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    6098:	d0a01884 	addi	r2,gp,-32670
    609c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    60a0:	d0a01904 	addi	r2,gp,-32668
    60a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    60a8:	d0a01984 	addi	r2,gp,-32666
    60ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    60b0:	d0a01a04 	addi	r2,gp,-32664
    60b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    60b8:	d0a01a84 	addi	r2,gp,-32662
    60bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    60c0:	d0a01b04 	addi	r2,gp,-32660
    60c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    60c8:	d0a01b84 	addi	r2,gp,-32658
    60cc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    60d0:	d0a01c04 	addi	r2,gp,-32656
    60d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    60d8:	d0a01c84 	addi	r2,gp,-32654
    60dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    60e0:	d0a01d04 	addi	r2,gp,-32652
    60e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    60e8:	d0a01d84 	addi	r2,gp,-32650
    60ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    60f0:	d0a01e04 	addi	r2,gp,-32648
    60f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    60f8:	d0a01e84 	addi	r2,gp,-32646
    60fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    6100:	d0a01f04 	addi	r2,gp,-32644
    6104:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    6108:	d0a01f84 	addi	r2,gp,-32642
    610c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    6110:	d0a02004 	addi	r2,gp,-32640
    6114:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    6118:	d0a02084 	addi	r2,gp,-32638
    611c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    6120:	d0a02104 	addi	r2,gp,-32636
    6124:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    6128:	d0a02184 	addi	r2,gp,-32634
    612c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    6130:	d0a02204 	addi	r2,gp,-32632
    6134:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    6138:	d0a02284 	addi	r2,gp,-32630
    613c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    6140:	d0a02304 	addi	r2,gp,-32628
    6144:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    6148:	d0a02384 	addi	r2,gp,-32626
    614c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    6150:	d0a02404 	addi	r2,gp,-32624
    6154:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    6158:	d0a02484 	addi	r2,gp,-32622
    615c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    6160:	d0a02504 	addi	r2,gp,-32620
    6164:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    6168:	d0a02584 	addi	r2,gp,-32618
    616c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    6170:	d0a02604 	addi	r2,gp,-32616
    6174:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    6178:	d0a02684 	addi	r2,gp,-32614
    617c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    6180:	d0a02704 	addi	r2,gp,-32612
    6184:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    6188:	d0a02784 	addi	r2,gp,-32610
    618c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    6190:	d0a02804 	addi	r2,gp,-32608
    6194:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    6198:	d0a02884 	addi	r2,gp,-32606
    619c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    61a0:	d0a02904 	addi	r2,gp,-32604
    61a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    61a8:	d0a02984 	addi	r2,gp,-32602
    61ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    61b0:	d0a02a04 	addi	r2,gp,-32600
    61b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    61b8:	d0a02a84 	addi	r2,gp,-32598
    61bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    61c0:	d0a02b04 	addi	r2,gp,-32596
    61c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    61c8:	d0a03004 	addi	r2,gp,-32576
    61cc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    61d0:	0001883a 	nop
    61d4:	e037883a 	mov	sp,fp
    61d8:	df000017 	ldw	fp,0(sp)
    61dc:	dec00104 	addi	sp,sp,4
    61e0:	f800283a 	ret

000061e4 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    61e4:	defff204 	addi	sp,sp,-56
    61e8:	df000d15 	stw	fp,52(sp)
    61ec:	df000d04 	addi	fp,sp,52
    61f0:	e13ffc15 	stw	r4,-16(fp)
    61f4:	2807883a 	mov	r3,r5
    61f8:	3005883a 	mov	r2,r6
    61fc:	e1ffff15 	stw	r7,-4(fp)
    6200:	e0fffd0d 	sth	r3,-12(fp)
    6204:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    6208:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    620c:	e0bfff17 	ldw	r2,-4(fp)
    6210:	1000021e 	bne	r2,zero,621c <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
    6214:	0005883a 	mov	r2,zero
    6218:	0000b006 	br	64dc <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    621c:	e0bffc17 	ldw	r2,-16(fp)
    6220:	1000051e 	bne	r2,zero,6238 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6224:	e0bfff17 	ldw	r2,-4(fp)
    6228:	00c01b84 	movi	r3,110
    622c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6230:	0005883a 	mov	r2,zero
    6234:	0000a906 	br	64dc <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    6238:	e0bffc17 	ldw	r2,-16(fp)
    623c:	10800003 	ldbu	r2,0(r2)
    6240:	10803fcc 	andi	r2,r2,255
    6244:	10800160 	cmpeqi	r2,r2,5
    6248:	1000051e 	bne	r2,zero,6260 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    624c:	e0bfff17 	ldw	r2,-4(fp)
    6250:	00c00044 	movi	r3,1
    6254:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6258:	0005883a 	mov	r2,zero
    625c:	00009f06 	br	64dc <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    6260:	e0fffe03 	ldbu	r3,-8(fp)
    6264:	00bfe004 	movi	r2,-128
    6268:	1884703a 	and	r2,r3,r2
    626c:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    6270:	e0bff503 	ldbu	r2,-44(fp)
    6274:	10000626 	beq	r2,zero,6290 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
    6278:	e0bffe03 	ldbu	r2,-8(fp)
    627c:	10801fcc 	andi	r2,r2,127
    6280:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    6284:	00800044 	movi	r2,1
    6288:	e0bff385 	stb	r2,-50(fp)
    628c:	00000106 	br	6294 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
    6290:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    6294:	e0bfff17 	ldw	r2,-4(fp)
    6298:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    629c:	0005303a 	rdctl	r2,status
    62a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    62a4:	e0fffb17 	ldw	r3,-20(fp)
    62a8:	00bfff84 	movi	r2,-2
    62ac:	1884703a 	and	r2,r3,r2
    62b0:	1001703a 	wrctl	status,r2
  
  return context;
    62b4:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    62b8:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
    62bc:	e0bffe03 	ldbu	r2,-8(fp)
    62c0:	10c00060 	cmpeqi	r3,r2,1
    62c4:	18005f1e 	bne	r3,zero,6444 <OSFlagAccept+0x260>
    62c8:	10c00088 	cmpgei	r3,r2,2
    62cc:	1800021e 	bne	r3,zero,62d8 <OSFlagAccept+0xf4>
    62d0:	10003f26 	beq	r2,zero,63d0 <OSFlagAccept+0x1ec>
    62d4:	00007706 	br	64b4 <OSFlagAccept+0x2d0>
    62d8:	10c000a0 	cmpeqi	r3,r2,2
    62dc:	1800031e 	bne	r3,zero,62ec <OSFlagAccept+0x108>
    62e0:	108000e0 	cmpeqi	r2,r2,3
    62e4:	10001e1e 	bne	r2,zero,6360 <OSFlagAccept+0x17c>
    62e8:	00007206 	br	64b4 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    62ec:	e0bffc17 	ldw	r2,-16(fp)
    62f0:	10c0020b 	ldhu	r3,8(r2)
    62f4:	e0bffd0b 	ldhu	r2,-12(fp)
    62f8:	1884703a 	and	r2,r3,r2
    62fc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    6300:	e0fff30b 	ldhu	r3,-52(fp)
    6304:	e0bffd0b 	ldhu	r2,-12(fp)
    6308:	18800d1e 	bne	r3,r2,6340 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    630c:	e0bff383 	ldbu	r2,-50(fp)
    6310:	10800058 	cmpnei	r2,r2,1
    6314:	10000d1e 	bne	r2,zero,634c <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    6318:	e0bffc17 	ldw	r2,-16(fp)
    631c:	1080020b 	ldhu	r2,8(r2)
    6320:	1007883a 	mov	r3,r2
    6324:	e0bff30b 	ldhu	r2,-52(fp)
    6328:	0084303a 	nor	r2,zero,r2
    632c:	1884703a 	and	r2,r3,r2
    6330:	1007883a 	mov	r3,r2
    6334:	e0bffc17 	ldw	r2,-16(fp)
    6338:	10c0020d 	sth	r3,8(r2)
    633c:	00000306 	br	634c <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    6340:	e0bfff17 	ldw	r2,-4(fp)
    6344:	00c01c04 	movi	r3,112
    6348:	10c00005 	stb	r3,0(r2)
    634c:	e0bff417 	ldw	r2,-48(fp)
    6350:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6354:	e0bff617 	ldw	r2,-40(fp)
    6358:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    635c:	00005e06 	br	64d8 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    6360:	e0bffc17 	ldw	r2,-16(fp)
    6364:	10c0020b 	ldhu	r3,8(r2)
    6368:	e0bffd0b 	ldhu	r2,-12(fp)
    636c:	1884703a 	and	r2,r3,r2
    6370:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    6374:	e0bff30b 	ldhu	r2,-52(fp)
    6378:	10000d26 	beq	r2,zero,63b0 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    637c:	e0bff383 	ldbu	r2,-50(fp)
    6380:	10800058 	cmpnei	r2,r2,1
    6384:	10000d1e 	bne	r2,zero,63bc <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    6388:	e0bffc17 	ldw	r2,-16(fp)
    638c:	1080020b 	ldhu	r2,8(r2)
    6390:	1007883a 	mov	r3,r2
    6394:	e0bff30b 	ldhu	r2,-52(fp)
    6398:	0084303a 	nor	r2,zero,r2
    639c:	1884703a 	and	r2,r3,r2
    63a0:	1007883a 	mov	r3,r2
    63a4:	e0bffc17 	ldw	r2,-16(fp)
    63a8:	10c0020d 	sth	r3,8(r2)
    63ac:	00000306 	br	63bc <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    63b0:	e0bfff17 	ldw	r2,-4(fp)
    63b4:	00c01c04 	movi	r3,112
    63b8:	10c00005 	stb	r3,0(r2)
    63bc:	e0bff417 	ldw	r2,-48(fp)
    63c0:	e0bff715 	stw	r2,-36(fp)
    63c4:	e0bff717 	ldw	r2,-36(fp)
    63c8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    63cc:	00004206 	br	64d8 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    63d0:	e0bffc17 	ldw	r2,-16(fp)
    63d4:	1080020b 	ldhu	r2,8(r2)
    63d8:	0084303a 	nor	r2,zero,r2
    63dc:	1007883a 	mov	r3,r2
    63e0:	e0bffd0b 	ldhu	r2,-12(fp)
    63e4:	1884703a 	and	r2,r3,r2
    63e8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    63ec:	e0fff30b 	ldhu	r3,-52(fp)
    63f0:	e0bffd0b 	ldhu	r2,-12(fp)
    63f4:	18800b1e 	bne	r3,r2,6424 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    63f8:	e0bff383 	ldbu	r2,-50(fp)
    63fc:	10800058 	cmpnei	r2,r2,1
    6400:	10000b1e 	bne	r2,zero,6430 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    6404:	e0bffc17 	ldw	r2,-16(fp)
    6408:	10c0020b 	ldhu	r3,8(r2)
    640c:	e0bff30b 	ldhu	r2,-52(fp)
    6410:	1884b03a 	or	r2,r3,r2
    6414:	1007883a 	mov	r3,r2
    6418:	e0bffc17 	ldw	r2,-16(fp)
    641c:	10c0020d 	sth	r3,8(r2)
    6420:	00000306 	br	6430 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    6424:	e0bfff17 	ldw	r2,-4(fp)
    6428:	00c01c04 	movi	r3,112
    642c:	10c00005 	stb	r3,0(r2)
    6430:	e0bff417 	ldw	r2,-48(fp)
    6434:	e0bff815 	stw	r2,-32(fp)
    6438:	e0bff817 	ldw	r2,-32(fp)
    643c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    6440:	00002506 	br	64d8 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    6444:	e0bffc17 	ldw	r2,-16(fp)
    6448:	1080020b 	ldhu	r2,8(r2)
    644c:	0084303a 	nor	r2,zero,r2
    6450:	1007883a 	mov	r3,r2
    6454:	e0bffd0b 	ldhu	r2,-12(fp)
    6458:	1884703a 	and	r2,r3,r2
    645c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    6460:	e0bff30b 	ldhu	r2,-52(fp)
    6464:	10000b26 	beq	r2,zero,6494 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6468:	e0bff383 	ldbu	r2,-50(fp)
    646c:	10800058 	cmpnei	r2,r2,1
    6470:	10000b1e 	bne	r2,zero,64a0 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    6474:	e0bffc17 	ldw	r2,-16(fp)
    6478:	10c0020b 	ldhu	r3,8(r2)
    647c:	e0bff30b 	ldhu	r2,-52(fp)
    6480:	1884b03a 	or	r2,r3,r2
    6484:	1007883a 	mov	r3,r2
    6488:	e0bffc17 	ldw	r2,-16(fp)
    648c:	10c0020d 	sth	r3,8(r2)
    6490:	00000306 	br	64a0 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    6494:	e0bfff17 	ldw	r2,-4(fp)
    6498:	00c01c04 	movi	r3,112
    649c:	10c00005 	stb	r3,0(r2)
    64a0:	e0bff417 	ldw	r2,-48(fp)
    64a4:	e0bff915 	stw	r2,-28(fp)
    64a8:	e0bff917 	ldw	r2,-28(fp)
    64ac:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    64b0:	00000906 	br	64d8 <OSFlagAccept+0x2f4>
    64b4:	e0bff417 	ldw	r2,-48(fp)
    64b8:	e0bffa15 	stw	r2,-24(fp)
    64bc:	e0bffa17 	ldw	r2,-24(fp)
    64c0:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    64c4:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    64c8:	e0bfff17 	ldw	r2,-4(fp)
    64cc:	00c01bc4 	movi	r3,111
    64d0:	10c00005 	stb	r3,0(r2)
             break;
    64d4:	0001883a 	nop
    }
    return (flags_rdy);
    64d8:	e0bff30b 	ldhu	r2,-52(fp)
}
    64dc:	e037883a 	mov	sp,fp
    64e0:	df000017 	ldw	fp,0(sp)
    64e4:	dec00104 	addi	sp,sp,4
    64e8:	f800283a 	ret

000064ec <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    64ec:	defff804 	addi	sp,sp,-32
    64f0:	df000715 	stw	fp,28(sp)
    64f4:	df000704 	addi	fp,sp,28
    64f8:	2005883a 	mov	r2,r4
    64fc:	e17fff15 	stw	r5,-4(fp)
    6500:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    6504:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    6508:	e0bfff17 	ldw	r2,-4(fp)
    650c:	1000021e 	bne	r2,zero,6518 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    6510:	0005883a 	mov	r2,zero
    6514:	00003306 	br	65e4 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    6518:	d0a74903 	ldbu	r2,-25308(gp)
    651c:	10803fcc 	andi	r2,r2,255
    6520:	10000526 	beq	r2,zero,6538 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    6524:	e0bfff17 	ldw	r2,-4(fp)
    6528:	00c00404 	movi	r3,16
    652c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
    6530:	0005883a 	mov	r2,zero
    6534:	00002b06 	br	65e4 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6538:	0005303a 	rdctl	r2,status
    653c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6540:	e0fffd17 	ldw	r3,-12(fp)
    6544:	00bfff84 	movi	r2,-2
    6548:	1884703a 	and	r2,r3,r2
    654c:	1001703a 	wrctl	status,r2
  
  return context;
    6550:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    6554:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    6558:	d0a74c17 	ldw	r2,-25296(gp)
    655c:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    6560:	e0bffb17 	ldw	r2,-20(fp)
    6564:	10001726 	beq	r2,zero,65c4 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    6568:	d0a74c17 	ldw	r2,-25296(gp)
    656c:	10800117 	ldw	r2,4(r2)
    6570:	d0a74c15 	stw	r2,-25296(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    6574:	e0bffb17 	ldw	r2,-20(fp)
    6578:	00c00144 	movi	r3,5
    657c:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    6580:	e0bffb17 	ldw	r2,-20(fp)
    6584:	e0fffe0b 	ldhu	r3,-8(fp)
    6588:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    658c:	e0bffb17 	ldw	r2,-20(fp)
    6590:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    6594:	e0bffb17 	ldw	r2,-20(fp)
    6598:	00c00fc4 	movi	r3,63
    659c:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    65a0:	e0bffb17 	ldw	r2,-20(fp)
    65a4:	100002c5 	stb	zero,11(r2)
    65a8:	e0bff917 	ldw	r2,-28(fp)
    65ac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    65b0:	e0bffa17 	ldw	r2,-24(fp)
    65b4:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    65b8:	e0bfff17 	ldw	r2,-4(fp)
    65bc:	10000005 	stb	zero,0(r2)
    65c0:	00000706 	br	65e0 <OSFlagCreate+0xf4>
    65c4:	e0bff917 	ldw	r2,-28(fp)
    65c8:	e0bffc15 	stw	r2,-16(fp)
    65cc:	e0bffc17 	ldw	r2,-16(fp)
    65d0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    65d4:	e0bfff17 	ldw	r2,-4(fp)
    65d8:	00c01c84 	movi	r3,114
    65dc:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    65e0:	e0bffb17 	ldw	r2,-20(fp)
}
    65e4:	e037883a 	mov	sp,fp
    65e8:	df000017 	ldw	fp,0(sp)
    65ec:	dec00104 	addi	sp,sp,4
    65f0:	f800283a 	ret

000065f4 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
    65f4:	defff204 	addi	sp,sp,-56
    65f8:	dfc00d15 	stw	ra,52(sp)
    65fc:	df000c15 	stw	fp,48(sp)
    6600:	df000c04 	addi	fp,sp,48
    6604:	e13ffd15 	stw	r4,-12(fp)
    6608:	2805883a 	mov	r2,r5
    660c:	e1bfff15 	stw	r6,-4(fp)
    6610:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    6614:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    6618:	e0bfff17 	ldw	r2,-4(fp)
    661c:	1000021e 	bne	r2,zero,6628 <OSFlagDel+0x34>
        return (pgrp);
    6620:	e0bffd17 	ldw	r2,-12(fp)
    6624:	00008006 	br	6828 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    6628:	e0bffd17 	ldw	r2,-12(fp)
    662c:	1000051e 	bne	r2,zero,6644 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6630:	e0bfff17 	ldw	r2,-4(fp)
    6634:	00c01b84 	movi	r3,110
    6638:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    663c:	e0bffd17 	ldw	r2,-12(fp)
    6640:	00007906 	br	6828 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    6644:	d0a74903 	ldbu	r2,-25308(gp)
    6648:	10803fcc 	andi	r2,r2,255
    664c:	10000526 	beq	r2,zero,6664 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    6650:	e0bfff17 	ldw	r2,-4(fp)
    6654:	00c003c4 	movi	r3,15
    6658:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    665c:	e0bffd17 	ldw	r2,-12(fp)
    6660:	00007106 	br	6828 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    6664:	e0bffd17 	ldw	r2,-12(fp)
    6668:	10800003 	ldbu	r2,0(r2)
    666c:	10803fcc 	andi	r2,r2,255
    6670:	10800160 	cmpeqi	r2,r2,5
    6674:	1000051e 	bne	r2,zero,668c <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
    6678:	e0bfff17 	ldw	r2,-4(fp)
    667c:	00c00044 	movi	r3,1
    6680:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    6684:	e0bffd17 	ldw	r2,-12(fp)
    6688:	00006706 	br	6828 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    668c:	0005303a 	rdctl	r2,status
    6690:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6694:	e0fffc17 	ldw	r3,-16(fp)
    6698:	00bfff84 	movi	r2,-2
    669c:	1884703a 	and	r2,r3,r2
    66a0:	1001703a 	wrctl	status,r2
  
  return context;
    66a4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    66a8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    66ac:	e0bffd17 	ldw	r2,-12(fp)
    66b0:	10800117 	ldw	r2,4(r2)
    66b4:	10000326 	beq	r2,zero,66c4 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    66b8:	00800044 	movi	r2,1
    66bc:	e0bff405 	stb	r2,-48(fp)
    66c0:	00000106 	br	66c8 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    66c4:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    66c8:	e0bffe03 	ldbu	r2,-8(fp)
    66cc:	10000326 	beq	r2,zero,66dc <OSFlagDel+0xe8>
    66d0:	10800060 	cmpeqi	r2,r2,1
    66d4:	1000231e 	bne	r2,zero,6764 <OSFlagDel+0x170>
    66d8:	00004806 	br	67fc <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    66dc:	e0bff403 	ldbu	r2,-48(fp)
    66e0:	1000161e 	bne	r2,zero,673c <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
    66e4:	e0bffd17 	ldw	r2,-12(fp)
    66e8:	00c00fc4 	movi	r3,63
    66ec:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    66f0:	e0bffd17 	ldw	r2,-12(fp)
    66f4:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    66f8:	e0bffd17 	ldw	r2,-12(fp)
    66fc:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    6700:	d0e74c17 	ldw	r3,-25296(gp)
    6704:	e0bffd17 	ldw	r2,-12(fp)
    6708:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    670c:	e0bffd17 	ldw	r2,-12(fp)
    6710:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
    6714:	e0bffd17 	ldw	r2,-12(fp)
    6718:	d0a74c15 	stw	r2,-25296(gp)
    671c:	e0bff717 	ldw	r2,-36(fp)
    6720:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6724:	e0bff817 	ldw	r2,-32(fp)
    6728:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
    672c:	e0bfff17 	ldw	r2,-4(fp)
    6730:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    6734:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
    6738:	00003a06 	br	6824 <OSFlagDel+0x230>
    673c:	e0bff717 	ldw	r2,-36(fp)
    6740:	e0bff915 	stw	r2,-28(fp)
    6744:	e0bff917 	ldw	r2,-28(fp)
    6748:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
    674c:	e0bfff17 	ldw	r2,-4(fp)
    6750:	00c01244 	movi	r3,73
    6754:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
    6758:	e0bffd17 	ldw	r2,-12(fp)
    675c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    6760:	00003006 	br	6824 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    6764:	e0bffd17 	ldw	r2,-12(fp)
    6768:	10800117 	ldw	r2,4(r2)
    676c:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    6770:	00000606 	br	678c <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
    6774:	000b883a 	mov	r5,zero
    6778:	e13ff517 	ldw	r4,-44(fp)
    677c:	00077600 	call	7760 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    6780:	e0bff517 	ldw	r2,-44(fp)
    6784:	10800017 	ldw	r2,0(r2)
    6788:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    678c:	e0bff517 	ldw	r2,-44(fp)
    6790:	103ff81e 	bne	r2,zero,6774 <__alt_mem_onchip_memory2_0+0xfc002774>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
    6794:	e0bffd17 	ldw	r2,-12(fp)
    6798:	00c00fc4 	movi	r3,63
    679c:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    67a0:	e0bffd17 	ldw	r2,-12(fp)
    67a4:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    67a8:	e0bffd17 	ldw	r2,-12(fp)
    67ac:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    67b0:	d0e74c17 	ldw	r3,-25296(gp)
    67b4:	e0bffd17 	ldw	r2,-12(fp)
    67b8:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    67bc:	e0bffd17 	ldw	r2,-12(fp)
    67c0:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
    67c4:	e0bffd17 	ldw	r2,-12(fp)
    67c8:	d0a74c15 	stw	r2,-25296(gp)
    67cc:	e0bff717 	ldw	r2,-36(fp)
    67d0:	e0bffa15 	stw	r2,-24(fp)
    67d4:	e0bffa17 	ldw	r2,-24(fp)
    67d8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    67dc:	e0bff403 	ldbu	r2,-48(fp)
    67e0:	10800058 	cmpnei	r2,r2,1
    67e4:	1000011e 	bne	r2,zero,67ec <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    67e8:	00059800 	call	5980 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    67ec:	e0bfff17 	ldw	r2,-4(fp)
    67f0:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    67f4:	e03ff615 	stw	zero,-40(fp)
             break;
    67f8:	00000a06 	br	6824 <OSFlagDel+0x230>
    67fc:	e0bff717 	ldw	r2,-36(fp)
    6800:	e0bffb15 	stw	r2,-20(fp)
    6804:	e0bffb17 	ldw	r2,-20(fp)
    6808:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
    680c:	e0bfff17 	ldw	r2,-4(fp)
    6810:	00c001c4 	movi	r3,7
    6814:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
    6818:	e0bffd17 	ldw	r2,-12(fp)
    681c:	e0bff615 	stw	r2,-40(fp)
             break;
    6820:	0001883a 	nop
    }
    return (pgrp_return);
    6824:	e0bff617 	ldw	r2,-40(fp)
}
    6828:	e037883a 	mov	sp,fp
    682c:	dfc00117 	ldw	ra,4(sp)
    6830:	df000017 	ldw	fp,0(sp)
    6834:	dec00204 	addi	sp,sp,8
    6838:	f800283a 	ret

0000683c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    683c:	defff604 	addi	sp,sp,-40
    6840:	dfc00915 	stw	ra,36(sp)
    6844:	df000815 	stw	fp,32(sp)
    6848:	df000804 	addi	fp,sp,32
    684c:	e13ffd15 	stw	r4,-12(fp)
    6850:	e17ffe15 	stw	r5,-8(fp)
    6854:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6858:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    685c:	e0bfff17 	ldw	r2,-4(fp)
    6860:	1000021e 	bne	r2,zero,686c <OSFlagNameGet+0x30>
        return (0);
    6864:	0005883a 	mov	r2,zero
    6868:	00003906 	br	6950 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    686c:	e0bffd17 	ldw	r2,-12(fp)
    6870:	1000051e 	bne	r2,zero,6888 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6874:	e0bfff17 	ldw	r2,-4(fp)
    6878:	00c01b84 	movi	r3,110
    687c:	10c00005 	stb	r3,0(r2)
        return (0);
    6880:	0005883a 	mov	r2,zero
    6884:	00003206 	br	6950 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    6888:	e0bffe17 	ldw	r2,-8(fp)
    688c:	1000051e 	bne	r2,zero,68a4 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    6890:	e0bfff17 	ldw	r2,-4(fp)
    6894:	00c00304 	movi	r3,12
    6898:	10c00005 	stb	r3,0(r2)
        return (0);
    689c:	0005883a 	mov	r2,zero
    68a0:	00002b06 	br	6950 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    68a4:	d0a74903 	ldbu	r2,-25308(gp)
    68a8:	10803fcc 	andi	r2,r2,255
    68ac:	10000526 	beq	r2,zero,68c4 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
    68b0:	e0bfff17 	ldw	r2,-4(fp)
    68b4:	00c00444 	movi	r3,17
    68b8:	10c00005 	stb	r3,0(r2)
        return (0);
    68bc:	0005883a 	mov	r2,zero
    68c0:	00002306 	br	6950 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    68c4:	0005303a 	rdctl	r2,status
    68c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    68cc:	e0fffc17 	ldw	r3,-16(fp)
    68d0:	00bfff84 	movi	r2,-2
    68d4:	1884703a 	and	r2,r3,r2
    68d8:	1001703a 	wrctl	status,r2
  
  return context;
    68dc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    68e0:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    68e4:	e0bffd17 	ldw	r2,-12(fp)
    68e8:	10800003 	ldbu	r2,0(r2)
    68ec:	10803fcc 	andi	r2,r2,255
    68f0:	10800160 	cmpeqi	r2,r2,5
    68f4:	1000091e 	bne	r2,zero,691c <OSFlagNameGet+0xe0>
    68f8:	e0bff817 	ldw	r2,-32(fp)
    68fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6900:	e0bff917 	ldw	r2,-28(fp)
    6904:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    6908:	e0bfff17 	ldw	r2,-4(fp)
    690c:	00c00044 	movi	r3,1
    6910:	10c00005 	stb	r3,0(r2)
        return (0);
    6914:	0005883a 	mov	r2,zero
    6918:	00000d06 	br	6950 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    691c:	e0bffd17 	ldw	r2,-12(fp)
    6920:	10800284 	addi	r2,r2,10
    6924:	100b883a 	mov	r5,r2
    6928:	e13ffe17 	ldw	r4,-8(fp)
    692c:	0005ac40 	call	5ac4 <OS_StrCopy>
    6930:	e0bffb05 	stb	r2,-20(fp)
    6934:	e0bff817 	ldw	r2,-32(fp)
    6938:	e0bffa15 	stw	r2,-24(fp)
    693c:	e0bffa17 	ldw	r2,-24(fp)
    6940:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    6944:	e0bfff17 	ldw	r2,-4(fp)
    6948:	10000005 	stb	zero,0(r2)
    return (len);
    694c:	e0bffb03 	ldbu	r2,-20(fp)
}
    6950:	e037883a 	mov	sp,fp
    6954:	dfc00117 	ldw	ra,4(sp)
    6958:	df000017 	ldw	fp,0(sp)
    695c:	dec00204 	addi	sp,sp,8
    6960:	f800283a 	ret

00006964 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    6964:	defff504 	addi	sp,sp,-44
    6968:	dfc00a15 	stw	ra,40(sp)
    696c:	df000915 	stw	fp,36(sp)
    6970:	df000904 	addi	fp,sp,36
    6974:	e13ffd15 	stw	r4,-12(fp)
    6978:	e17ffe15 	stw	r5,-8(fp)
    697c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6980:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    6984:	e0bfff17 	ldw	r2,-4(fp)
    6988:	10004326 	beq	r2,zero,6a98 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    698c:	e0bffd17 	ldw	r2,-12(fp)
    6990:	1000041e 	bne	r2,zero,69a4 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6994:	e0bfff17 	ldw	r2,-4(fp)
    6998:	00c01b84 	movi	r3,110
    699c:	10c00005 	stb	r3,0(r2)
        return;
    69a0:	00003e06 	br	6a9c <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    69a4:	e0bffe17 	ldw	r2,-8(fp)
    69a8:	1000041e 	bne	r2,zero,69bc <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    69ac:	e0bfff17 	ldw	r2,-4(fp)
    69b0:	00c00304 	movi	r3,12
    69b4:	10c00005 	stb	r3,0(r2)
        return;
    69b8:	00003806 	br	6a9c <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    69bc:	d0a74903 	ldbu	r2,-25308(gp)
    69c0:	10803fcc 	andi	r2,r2,255
    69c4:	10000426 	beq	r2,zero,69d8 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    69c8:	e0bfff17 	ldw	r2,-4(fp)
    69cc:	00c00484 	movi	r3,18
    69d0:	10c00005 	stb	r3,0(r2)
        return;
    69d4:	00003106 	br	6a9c <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    69d8:	0005303a 	rdctl	r2,status
    69dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    69e0:	e0fffc17 	ldw	r3,-16(fp)
    69e4:	00bfff84 	movi	r2,-2
    69e8:	1884703a 	and	r2,r3,r2
    69ec:	1001703a 	wrctl	status,r2
  
  return context;
    69f0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    69f4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    69f8:	e0bffd17 	ldw	r2,-12(fp)
    69fc:	10800003 	ldbu	r2,0(r2)
    6a00:	10803fcc 	andi	r2,r2,255
    6a04:	10800160 	cmpeqi	r2,r2,5
    6a08:	1000081e 	bne	r2,zero,6a2c <OSFlagNameSet+0xc8>
    6a0c:	e0bff717 	ldw	r2,-36(fp)
    6a10:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6a14:	e0bff817 	ldw	r2,-32(fp)
    6a18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    6a1c:	e0bfff17 	ldw	r2,-4(fp)
    6a20:	00c00044 	movi	r3,1
    6a24:	10c00005 	stb	r3,0(r2)
        return;
    6a28:	00001c06 	br	6a9c <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    6a2c:	e13ffe17 	ldw	r4,-8(fp)
    6a30:	0005b380 	call	5b38 <OS_StrLen>
    6a34:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
    6a38:	e0bffa03 	ldbu	r2,-24(fp)
    6a3c:	10800830 	cmpltui	r2,r2,32
    6a40:	1000081e 	bne	r2,zero,6a64 <OSFlagNameSet+0x100>
    6a44:	e0bff717 	ldw	r2,-36(fp)
    6a48:	e0bff915 	stw	r2,-28(fp)
    6a4c:	e0bff917 	ldw	r2,-28(fp)
    6a50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
    6a54:	e0bfff17 	ldw	r2,-4(fp)
    6a58:	00c01cc4 	movi	r3,115
    6a5c:	10c00005 	stb	r3,0(r2)
        return;
    6a60:	00000e06 	br	6a9c <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    6a64:	e0bffd17 	ldw	r2,-12(fp)
    6a68:	10800284 	addi	r2,r2,10
    6a6c:	e17ffe17 	ldw	r5,-8(fp)
    6a70:	1009883a 	mov	r4,r2
    6a74:	0005ac40 	call	5ac4 <OS_StrCopy>
    6a78:	e0bff717 	ldw	r2,-36(fp)
    6a7c:	e0bffb15 	stw	r2,-20(fp)
    6a80:	e0bffb17 	ldw	r2,-20(fp)
    6a84:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    6a88:	e0bfff17 	ldw	r2,-4(fp)
    6a8c:	10000005 	stb	zero,0(r2)
    return;
    6a90:	0001883a 	nop
    6a94:	00000106 	br	6a9c <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    6a98:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
    6a9c:	e037883a 	mov	sp,fp
    6aa0:	dfc00117 	ldw	ra,4(sp)
    6aa4:	df000017 	ldw	fp,0(sp)
    6aa8:	dec00204 	addi	sp,sp,8
    6aac:	f800283a 	ret

00006ab0 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
    6ab0:	deffe104 	addi	sp,sp,-124
    6ab4:	dfc01e15 	stw	ra,120(sp)
    6ab8:	df001d15 	stw	fp,116(sp)
    6abc:	df001d04 	addi	fp,sp,116
    6ac0:	e13ffc15 	stw	r4,-16(fp)
    6ac4:	2809883a 	mov	r4,r5
    6ac8:	3007883a 	mov	r3,r6
    6acc:	3805883a 	mov	r2,r7
    6ad0:	e13ffd0d 	sth	r4,-12(fp)
    6ad4:	e0fffe05 	stb	r3,-8(fp)
    6ad8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    6adc:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    6ae0:	e0800217 	ldw	r2,8(fp)
    6ae4:	1000021e 	bne	r2,zero,6af0 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
    6ae8:	0005883a 	mov	r2,zero
    6aec:	00015906 	br	7054 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    6af0:	e0bffc17 	ldw	r2,-16(fp)
    6af4:	1000051e 	bne	r2,zero,6b0c <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6af8:	e0800217 	ldw	r2,8(fp)
    6afc:	00c01b84 	movi	r3,110
    6b00:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6b04:	0005883a 	mov	r2,zero
    6b08:	00015206 	br	7054 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    6b0c:	d0a74903 	ldbu	r2,-25308(gp)
    6b10:	10803fcc 	andi	r2,r2,255
    6b14:	10000526 	beq	r2,zero,6b2c <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    6b18:	e0800217 	ldw	r2,8(fp)
    6b1c:	00c00084 	movi	r3,2
    6b20:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6b24:	0005883a 	mov	r2,zero
    6b28:	00014a06 	br	7054 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    6b2c:	d0a73b03 	ldbu	r2,-25364(gp)
    6b30:	10803fcc 	andi	r2,r2,255
    6b34:	10000526 	beq	r2,zero,6b4c <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    6b38:	e0800217 	ldw	r2,8(fp)
    6b3c:	00c00344 	movi	r3,13
    6b40:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6b44:	0005883a 	mov	r2,zero
    6b48:	00014206 	br	7054 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    6b4c:	e0bffc17 	ldw	r2,-16(fp)
    6b50:	10800003 	ldbu	r2,0(r2)
    6b54:	10803fcc 	andi	r2,r2,255
    6b58:	10800160 	cmpeqi	r2,r2,5
    6b5c:	1000051e 	bne	r2,zero,6b74 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
    6b60:	e0800217 	ldw	r2,8(fp)
    6b64:	00c00044 	movi	r3,1
    6b68:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6b6c:	0005883a 	mov	r2,zero
    6b70:	00013806 	br	7054 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    6b74:	e0fffe03 	ldbu	r3,-8(fp)
    6b78:	00bfe004 	movi	r2,-128
    6b7c:	1884703a 	and	r2,r3,r2
    6b80:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
    6b84:	e0bfe603 	ldbu	r2,-104(fp)
    6b88:	10000626 	beq	r2,zero,6ba4 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
    6b8c:	e0bffe03 	ldbu	r2,-8(fp)
    6b90:	10801fcc 	andi	r2,r2,127
    6b94:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    6b98:	00800044 	movi	r2,1
    6b9c:	e0bfe405 	stb	r2,-112(fp)
    6ba0:	00000106 	br	6ba8 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
    6ba4:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6ba8:	0005303a 	rdctl	r2,status
    6bac:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6bb0:	e0fff617 	ldw	r3,-40(fp)
    6bb4:	00bfff84 	movi	r2,-2
    6bb8:	1884703a 	and	r2,r3,r2
    6bbc:	1001703a 	wrctl	status,r2
  
  return context;
    6bc0:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    6bc4:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
    6bc8:	e0bffe03 	ldbu	r2,-8(fp)
    6bcc:	10c00060 	cmpeqi	r3,r2,1
    6bd0:	1800921e 	bne	r3,zero,6e1c <OSFlagPend+0x36c>
    6bd4:	10c00088 	cmpgei	r3,r2,2
    6bd8:	1800021e 	bne	r3,zero,6be4 <OSFlagPend+0x134>
    6bdc:	10006126 	beq	r2,zero,6d64 <OSFlagPend+0x2b4>
    6be0:	0000bb06 	br	6ed0 <OSFlagPend+0x420>
    6be4:	10c000a0 	cmpeqi	r3,r2,2
    6be8:	1800031e 	bne	r3,zero,6bf8 <OSFlagPend+0x148>
    6bec:	108000e0 	cmpeqi	r2,r2,3
    6bf0:	10002f1e 	bne	r2,zero,6cb0 <OSFlagPend+0x200>
    6bf4:	0000b606 	br	6ed0 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
    6bf8:	e0bffc17 	ldw	r2,-16(fp)
    6bfc:	10c0020b 	ldhu	r3,8(r2)
    6c00:	e0bffd0b 	ldhu	r2,-12(fp)
    6c04:	1884703a 	and	r2,r3,r2
    6c08:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    6c0c:	e0ffe80b 	ldhu	r3,-96(fp)
    6c10:	e0bffd0b 	ldhu	r2,-12(fp)
    6c14:	1880171e 	bne	r3,r2,6c74 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6c18:	e0bfe403 	ldbu	r2,-112(fp)
    6c1c:	10800058 	cmpnei	r2,r2,1
    6c20:	1000091e 	bne	r2,zero,6c48 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    6c24:	e0bffc17 	ldw	r2,-16(fp)
    6c28:	1080020b 	ldhu	r2,8(r2)
    6c2c:	1007883a 	mov	r3,r2
    6c30:	e0bfe80b 	ldhu	r2,-96(fp)
    6c34:	0084303a 	nor	r2,zero,r2
    6c38:	1884703a 	and	r2,r3,r2
    6c3c:	1007883a 	mov	r3,r2
    6c40:	e0bffc17 	ldw	r2,-16(fp)
    6c44:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    6c48:	d0a74a17 	ldw	r2,-25304(gp)
    6c4c:	e0ffe80b 	ldhu	r3,-96(fp)
    6c50:	10c00b0d 	sth	r3,44(r2)
    6c54:	e0bfe517 	ldw	r2,-108(fp)
    6c58:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6c5c:	e0bfe717 	ldw	r2,-100(fp)
    6c60:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    6c64:	e0800217 	ldw	r2,8(fp)
    6c68:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    6c6c:	e0bfe80b 	ldhu	r2,-96(fp)
    6c70:	0000f806 	br	7054 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    6c74:	e13ffd0b 	ldhu	r4,-12(fp)
    6c78:	e17ffe03 	ldbu	r5,-8(fp)
    6c7c:	e0bfff0b 	ldhu	r2,-4(fp)
    6c80:	e0fff704 	addi	r3,fp,-36
    6c84:	d8800015 	stw	r2,0(sp)
    6c88:	280f883a 	mov	r7,r5
    6c8c:	200d883a 	mov	r6,r4
    6c90:	180b883a 	mov	r5,r3
    6c94:	e13ffc17 	ldw	r4,-16(fp)
    6c98:	00075200 	call	7520 <OS_FlagBlock>
    6c9c:	e0bfe517 	ldw	r2,-108(fp)
    6ca0:	e0bfe915 	stw	r2,-92(fp)
    6ca4:	e0bfe917 	ldw	r2,-92(fp)
    6ca8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    6cac:	00009206 	br	6ef8 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
    6cb0:	e0bffc17 	ldw	r2,-16(fp)
    6cb4:	10c0020b 	ldhu	r3,8(r2)
    6cb8:	e0bffd0b 	ldhu	r2,-12(fp)
    6cbc:	1884703a 	and	r2,r3,r2
    6cc0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    6cc4:	e0bfe80b 	ldhu	r2,-96(fp)
    6cc8:	10001726 	beq	r2,zero,6d28 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6ccc:	e0bfe403 	ldbu	r2,-112(fp)
    6cd0:	10800058 	cmpnei	r2,r2,1
    6cd4:	1000091e 	bne	r2,zero,6cfc <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    6cd8:	e0bffc17 	ldw	r2,-16(fp)
    6cdc:	1080020b 	ldhu	r2,8(r2)
    6ce0:	1007883a 	mov	r3,r2
    6ce4:	e0bfe80b 	ldhu	r2,-96(fp)
    6ce8:	0084303a 	nor	r2,zero,r2
    6cec:	1884703a 	and	r2,r3,r2
    6cf0:	1007883a 	mov	r3,r2
    6cf4:	e0bffc17 	ldw	r2,-16(fp)
    6cf8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    6cfc:	d0a74a17 	ldw	r2,-25304(gp)
    6d00:	e0ffe80b 	ldhu	r3,-96(fp)
    6d04:	10c00b0d 	sth	r3,44(r2)
    6d08:	e0bfe517 	ldw	r2,-108(fp)
    6d0c:	e0bfea15 	stw	r2,-88(fp)
    6d10:	e0bfea17 	ldw	r2,-88(fp)
    6d14:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    6d18:	e0800217 	ldw	r2,8(fp)
    6d1c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    6d20:	e0bfe80b 	ldhu	r2,-96(fp)
    6d24:	0000cb06 	br	7054 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    6d28:	e13ffd0b 	ldhu	r4,-12(fp)
    6d2c:	e17ffe03 	ldbu	r5,-8(fp)
    6d30:	e0bfff0b 	ldhu	r2,-4(fp)
    6d34:	e0fff704 	addi	r3,fp,-36
    6d38:	d8800015 	stw	r2,0(sp)
    6d3c:	280f883a 	mov	r7,r5
    6d40:	200d883a 	mov	r6,r4
    6d44:	180b883a 	mov	r5,r3
    6d48:	e13ffc17 	ldw	r4,-16(fp)
    6d4c:	00075200 	call	7520 <OS_FlagBlock>
    6d50:	e0bfe517 	ldw	r2,-108(fp)
    6d54:	e0bfeb15 	stw	r2,-84(fp)
    6d58:	e0bfeb17 	ldw	r2,-84(fp)
    6d5c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    6d60:	00006506 	br	6ef8 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    6d64:	e0bffc17 	ldw	r2,-16(fp)
    6d68:	1080020b 	ldhu	r2,8(r2)
    6d6c:	0084303a 	nor	r2,zero,r2
    6d70:	1007883a 	mov	r3,r2
    6d74:	e0bffd0b 	ldhu	r2,-12(fp)
    6d78:	1884703a 	and	r2,r3,r2
    6d7c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    6d80:	e0ffe80b 	ldhu	r3,-96(fp)
    6d84:	e0bffd0b 	ldhu	r2,-12(fp)
    6d88:	1880151e 	bne	r3,r2,6de0 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6d8c:	e0bfe403 	ldbu	r2,-112(fp)
    6d90:	10800058 	cmpnei	r2,r2,1
    6d94:	1000071e 	bne	r2,zero,6db4 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    6d98:	e0bffc17 	ldw	r2,-16(fp)
    6d9c:	10c0020b 	ldhu	r3,8(r2)
    6da0:	e0bfe80b 	ldhu	r2,-96(fp)
    6da4:	1884b03a 	or	r2,r3,r2
    6da8:	1007883a 	mov	r3,r2
    6dac:	e0bffc17 	ldw	r2,-16(fp)
    6db0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    6db4:	d0a74a17 	ldw	r2,-25304(gp)
    6db8:	e0ffe80b 	ldhu	r3,-96(fp)
    6dbc:	10c00b0d 	sth	r3,44(r2)
    6dc0:	e0bfe517 	ldw	r2,-108(fp)
    6dc4:	e0bfec15 	stw	r2,-80(fp)
    6dc8:	e0bfec17 	ldw	r2,-80(fp)
    6dcc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    6dd0:	e0800217 	ldw	r2,8(fp)
    6dd4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    6dd8:	e0bfe80b 	ldhu	r2,-96(fp)
    6ddc:	00009d06 	br	7054 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    6de0:	e13ffd0b 	ldhu	r4,-12(fp)
    6de4:	e17ffe03 	ldbu	r5,-8(fp)
    6de8:	e0bfff0b 	ldhu	r2,-4(fp)
    6dec:	e0fff704 	addi	r3,fp,-36
    6df0:	d8800015 	stw	r2,0(sp)
    6df4:	280f883a 	mov	r7,r5
    6df8:	200d883a 	mov	r6,r4
    6dfc:	180b883a 	mov	r5,r3
    6e00:	e13ffc17 	ldw	r4,-16(fp)
    6e04:	00075200 	call	7520 <OS_FlagBlock>
    6e08:	e0bfe517 	ldw	r2,-108(fp)
    6e0c:	e0bfed15 	stw	r2,-76(fp)
    6e10:	e0bfed17 	ldw	r2,-76(fp)
    6e14:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    6e18:	00003706 	br	6ef8 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    6e1c:	e0bffc17 	ldw	r2,-16(fp)
    6e20:	1080020b 	ldhu	r2,8(r2)
    6e24:	0084303a 	nor	r2,zero,r2
    6e28:	1007883a 	mov	r3,r2
    6e2c:	e0bffd0b 	ldhu	r2,-12(fp)
    6e30:	1884703a 	and	r2,r3,r2
    6e34:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    6e38:	e0bfe80b 	ldhu	r2,-96(fp)
    6e3c:	10001526 	beq	r2,zero,6e94 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6e40:	e0bfe403 	ldbu	r2,-112(fp)
    6e44:	10800058 	cmpnei	r2,r2,1
    6e48:	1000071e 	bne	r2,zero,6e68 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    6e4c:	e0bffc17 	ldw	r2,-16(fp)
    6e50:	10c0020b 	ldhu	r3,8(r2)
    6e54:	e0bfe80b 	ldhu	r2,-96(fp)
    6e58:	1884b03a 	or	r2,r3,r2
    6e5c:	1007883a 	mov	r3,r2
    6e60:	e0bffc17 	ldw	r2,-16(fp)
    6e64:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    6e68:	d0a74a17 	ldw	r2,-25304(gp)
    6e6c:	e0ffe80b 	ldhu	r3,-96(fp)
    6e70:	10c00b0d 	sth	r3,44(r2)
    6e74:	e0bfe517 	ldw	r2,-108(fp)
    6e78:	e0bfee15 	stw	r2,-72(fp)
    6e7c:	e0bfee17 	ldw	r2,-72(fp)
    6e80:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    6e84:	e0800217 	ldw	r2,8(fp)
    6e88:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    6e8c:	e0bfe80b 	ldhu	r2,-96(fp)
    6e90:	00007006 	br	7054 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    6e94:	e13ffd0b 	ldhu	r4,-12(fp)
    6e98:	e17ffe03 	ldbu	r5,-8(fp)
    6e9c:	e0bfff0b 	ldhu	r2,-4(fp)
    6ea0:	e0fff704 	addi	r3,fp,-36
    6ea4:	d8800015 	stw	r2,0(sp)
    6ea8:	280f883a 	mov	r7,r5
    6eac:	200d883a 	mov	r6,r4
    6eb0:	180b883a 	mov	r5,r3
    6eb4:	e13ffc17 	ldw	r4,-16(fp)
    6eb8:	00075200 	call	7520 <OS_FlagBlock>
    6ebc:	e0bfe517 	ldw	r2,-108(fp)
    6ec0:	e0bfef15 	stw	r2,-68(fp)
    6ec4:	e0bfef17 	ldw	r2,-68(fp)
    6ec8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    6ecc:	00000a06 	br	6ef8 <OSFlagPend+0x448>
    6ed0:	e0bfe517 	ldw	r2,-108(fp)
    6ed4:	e0bff015 	stw	r2,-64(fp)
    6ed8:	e0bff017 	ldw	r2,-64(fp)
    6edc:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    6ee0:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
    6ee4:	e0800217 	ldw	r2,8(fp)
    6ee8:	00c01bc4 	movi	r3,111
    6eec:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
    6ef0:	e0bfe80b 	ldhu	r2,-96(fp)
    6ef4:	00005706 	br	7054 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
    6ef8:	00059800 	call	5980 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6efc:	0005303a 	rdctl	r2,status
    6f00:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6f04:	e0fff117 	ldw	r3,-60(fp)
    6f08:	00bfff84 	movi	r2,-2
    6f0c:	1884703a 	and	r2,r3,r2
    6f10:	1001703a 	wrctl	status,r2
  
  return context;
    6f14:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
    6f18:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
    6f1c:	d0a74a17 	ldw	r2,-25304(gp)
    6f20:	10800c43 	ldbu	r2,49(r2)
    6f24:	10803fcc 	andi	r2,r2,255
    6f28:	10001c26 	beq	r2,zero,6f9c <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
    6f2c:	d0a74a17 	ldw	r2,-25304(gp)
    6f30:	10800c43 	ldbu	r2,49(r2)
    6f34:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    6f38:	d0a74a17 	ldw	r2,-25304(gp)
    6f3c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
    6f40:	e0bff704 	addi	r2,fp,-36
    6f44:	1009883a 	mov	r4,r2
    6f48:	00078540 	call	7854 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
    6f4c:	d0a74a17 	ldw	r2,-25304(gp)
    6f50:	10000c05 	stb	zero,48(r2)
    6f54:	e0bfe517 	ldw	r2,-108(fp)
    6f58:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6f5c:	e0bff217 	ldw	r2,-56(fp)
    6f60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
    6f64:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
    6f68:	e0bff303 	ldbu	r2,-52(fp)
    6f6c:	108000a0 	cmpeqi	r2,r2,2
    6f70:	10000426 	beq	r2,zero,6f84 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
    6f74:	e0800217 	ldw	r2,8(fp)
    6f78:	00c00384 	movi	r3,14
    6f7c:	10c00005 	stb	r3,0(r2)
                 break;
    6f80:	00000406 	br	6f94 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
    6f84:	e0800217 	ldw	r2,8(fp)
    6f88:	00c00284 	movi	r3,10
    6f8c:	10c00005 	stb	r3,0(r2)
                 break;
    6f90:	0001883a 	nop
        }
        return (flags_rdy);
    6f94:	e0bfe80b 	ldhu	r2,-96(fp)
    6f98:	00002e06 	br	7054 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
    6f9c:	d0a74a17 	ldw	r2,-25304(gp)
    6fa0:	10800b0b 	ldhu	r2,44(r2)
    6fa4:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
    6fa8:	e0bfe403 	ldbu	r2,-112(fp)
    6fac:	10800058 	cmpnei	r2,r2,1
    6fb0:	1000211e 	bne	r2,zero,7038 <OSFlagPend+0x588>
        switch (wait_type) {
    6fb4:	e0bffe03 	ldbu	r2,-8(fp)
    6fb8:	10001616 	blt	r2,zero,7014 <OSFlagPend+0x564>
    6fbc:	10c00090 	cmplti	r3,r2,2
    6fc0:	18000c1e 	bne	r3,zero,6ff4 <OSFlagPend+0x544>
    6fc4:	10800108 	cmpgei	r2,r2,4
    6fc8:	1000121e 	bne	r2,zero,7014 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
    6fcc:	e0bffc17 	ldw	r2,-16(fp)
    6fd0:	1080020b 	ldhu	r2,8(r2)
    6fd4:	1007883a 	mov	r3,r2
    6fd8:	e0bfe80b 	ldhu	r2,-96(fp)
    6fdc:	0084303a 	nor	r2,zero,r2
    6fe0:	1884703a 	and	r2,r3,r2
    6fe4:	1007883a 	mov	r3,r2
    6fe8:	e0bffc17 	ldw	r2,-16(fp)
    6fec:	10c0020d 	sth	r3,8(r2)
                 break;
    6ff0:	00001106 	br	7038 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
    6ff4:	e0bffc17 	ldw	r2,-16(fp)
    6ff8:	10c0020b 	ldhu	r3,8(r2)
    6ffc:	e0bfe80b 	ldhu	r2,-96(fp)
    7000:	1884b03a 	or	r2,r3,r2
    7004:	1007883a 	mov	r3,r2
    7008:	e0bffc17 	ldw	r2,-16(fp)
    700c:	10c0020d 	sth	r3,8(r2)
                 break;
    7010:	00000906 	br	7038 <OSFlagPend+0x588>
    7014:	e0bfe517 	ldw	r2,-108(fp)
    7018:	e0bff415 	stw	r2,-48(fp)
    701c:	e0bff417 	ldw	r2,-48(fp)
    7020:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    7024:	e0800217 	ldw	r2,8(fp)
    7028:	00c01bc4 	movi	r3,111
    702c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    7030:	0005883a 	mov	r2,zero
    7034:	00000706 	br	7054 <OSFlagPend+0x5a4>
    7038:	e0bfe517 	ldw	r2,-108(fp)
    703c:	e0bff515 	stw	r2,-44(fp)
    7040:	e0bff517 	ldw	r2,-44(fp)
    7044:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    7048:	e0800217 	ldw	r2,8(fp)
    704c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
    7050:	e0bfe80b 	ldhu	r2,-96(fp)
}
    7054:	e037883a 	mov	sp,fp
    7058:	dfc00117 	ldw	ra,4(sp)
    705c:	df000017 	ldw	fp,0(sp)
    7060:	dec00204 	addi	sp,sp,8
    7064:	f800283a 	ret

00007068 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
    7068:	defffb04 	addi	sp,sp,-20
    706c:	df000415 	stw	fp,16(sp)
    7070:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    7074:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7078:	0005303a 	rdctl	r2,status
    707c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7080:	e0fffe17 	ldw	r3,-8(fp)
    7084:	00bfff84 	movi	r2,-2
    7088:	1884703a 	and	r2,r3,r2
    708c:	1001703a 	wrctl	status,r2
  
  return context;
    7090:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    7094:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
    7098:	d0a74a17 	ldw	r2,-25304(gp)
    709c:	10800b0b 	ldhu	r2,44(r2)
    70a0:	e0bffd0d 	sth	r2,-12(fp)
    70a4:	e0bffc17 	ldw	r2,-16(fp)
    70a8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    70ac:	e0bfff17 	ldw	r2,-4(fp)
    70b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
    70b4:	e0bffd0b 	ldhu	r2,-12(fp)
}
    70b8:	e037883a 	mov	sp,fp
    70bc:	df000017 	ldw	fp,0(sp)
    70c0:	dec00104 	addi	sp,sp,4
    70c4:	f800283a 	ret

000070c8 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
    70c8:	deffef04 	addi	sp,sp,-68
    70cc:	dfc01015 	stw	ra,64(sp)
    70d0:	df000f15 	stw	fp,60(sp)
    70d4:	df000f04 	addi	fp,sp,60
    70d8:	e13ffc15 	stw	r4,-16(fp)
    70dc:	2807883a 	mov	r3,r5
    70e0:	3005883a 	mov	r2,r6
    70e4:	e1ffff15 	stw	r7,-4(fp)
    70e8:	e0fffd0d 	sth	r3,-12(fp)
    70ec:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
    70f0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    70f4:	e0bfff17 	ldw	r2,-4(fp)
    70f8:	1000021e 	bne	r2,zero,7104 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
    70fc:	0005883a 	mov	r2,zero
    7100:	0000d106 	br	7448 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
    7104:	e0bffc17 	ldw	r2,-16(fp)
    7108:	1000051e 	bne	r2,zero,7120 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    710c:	e0bfff17 	ldw	r2,-4(fp)
    7110:	00c01b84 	movi	r3,110
    7114:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7118:	0005883a 	mov	r2,zero
    711c:	0000ca06 	br	7448 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
    7120:	e0bffc17 	ldw	r2,-16(fp)
    7124:	10800003 	ldbu	r2,0(r2)
    7128:	10803fcc 	andi	r2,r2,255
    712c:	10800160 	cmpeqi	r2,r2,5
    7130:	1000051e 	bne	r2,zero,7148 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
    7134:	e0bfff17 	ldw	r2,-4(fp)
    7138:	00c00044 	movi	r3,1
    713c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7140:	0005883a 	mov	r2,zero
    7144:	0000c006 	br	7448 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7148:	0005303a 	rdctl	r2,status
    714c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7150:	e0fffb17 	ldw	r3,-20(fp)
    7154:	00bfff84 	movi	r2,-2
    7158:	1884703a 	and	r2,r3,r2
    715c:	1001703a 	wrctl	status,r2
  
  return context;
    7160:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    7164:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
    7168:	e0bffe03 	ldbu	r2,-8(fp)
    716c:	10000326 	beq	r2,zero,717c <OSFlagPost+0xb4>
    7170:	10800060 	cmpeqi	r2,r2,1
    7174:	10000b1e 	bne	r2,zero,71a4 <OSFlagPost+0xdc>
    7178:	00001206 	br	71c4 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
    717c:	e0bffc17 	ldw	r2,-16(fp)
    7180:	1080020b 	ldhu	r2,8(r2)
    7184:	1007883a 	mov	r3,r2
    7188:	e0bffd0b 	ldhu	r2,-12(fp)
    718c:	0084303a 	nor	r2,zero,r2
    7190:	1884703a 	and	r2,r3,r2
    7194:	1007883a 	mov	r3,r2
    7198:	e0bffc17 	ldw	r2,-16(fp)
    719c:	10c0020d 	sth	r3,8(r2)
             break;
    71a0:	00001106 	br	71e8 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
    71a4:	e0bffc17 	ldw	r2,-16(fp)
    71a8:	10c0020b 	ldhu	r3,8(r2)
    71ac:	e0bffd0b 	ldhu	r2,-12(fp)
    71b0:	1884b03a 	or	r2,r3,r2
    71b4:	1007883a 	mov	r3,r2
    71b8:	e0bffc17 	ldw	r2,-16(fp)
    71bc:	10c0020d 	sth	r3,8(r2)
             break;
    71c0:	00000906 	br	71e8 <OSFlagPost+0x120>
    71c4:	e0bff317 	ldw	r2,-52(fp)
    71c8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    71cc:	e0bff417 	ldw	r2,-48(fp)
    71d0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
    71d4:	e0bfff17 	ldw	r2,-4(fp)
    71d8:	00c01c44 	movi	r3,113
    71dc:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
    71e0:	0005883a 	mov	r2,zero
    71e4:	00009806 	br	7448 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    71e8:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    71ec:	e0bffc17 	ldw	r2,-16(fp)
    71f0:	10800117 	ldw	r2,4(r2)
    71f4:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    71f8:	00007706 	br	73d8 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
    71fc:	e0bff117 	ldw	r2,-60(fp)
    7200:	10800483 	ldbu	r2,18(r2)
    7204:	10803fcc 	andi	r2,r2,255
    7208:	10c00060 	cmpeqi	r3,r2,1
    720c:	18004a1e 	bne	r3,zero,7338 <OSFlagPost+0x270>
    7210:	10c00088 	cmpgei	r3,r2,2
    7214:	1800021e 	bne	r3,zero,7220 <OSFlagPost+0x158>
    7218:	10002f26 	beq	r2,zero,72d8 <OSFlagPost+0x210>
    721c:	00005b06 	br	738c <OSFlagPost+0x2c4>
    7220:	10c000a0 	cmpeqi	r3,r2,2
    7224:	1800031e 	bne	r3,zero,7234 <OSFlagPost+0x16c>
    7228:	108000e0 	cmpeqi	r2,r2,3
    722c:	1000171e 	bne	r2,zero,728c <OSFlagPost+0x1c4>
    7230:	00005606 	br	738c <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    7234:	e0bffc17 	ldw	r2,-16(fp)
    7238:	10c0020b 	ldhu	r3,8(r2)
    723c:	e0bff117 	ldw	r2,-60(fp)
    7240:	1080040b 	ldhu	r2,16(r2)
    7244:	1884703a 	and	r2,r3,r2
    7248:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    724c:	e0bff117 	ldw	r2,-60(fp)
    7250:	1080040b 	ldhu	r2,16(r2)
    7254:	10ffffcc 	andi	r3,r2,65535
    7258:	e0bff60b 	ldhu	r2,-40(fp)
    725c:	1880541e 	bne	r3,r2,73b0 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    7260:	e0bff60b 	ldhu	r2,-40(fp)
    7264:	100b883a 	mov	r5,r2
    7268:	e13ff117 	ldw	r4,-60(fp)
    726c:	00077600 	call	7760 <OS_FlagTaskRdy>
    7270:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    7274:	e0bff683 	ldbu	r2,-38(fp)
    7278:	10800058 	cmpnei	r2,r2,1
    727c:	10004c1e 	bne	r2,zero,73b0 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    7280:	00800044 	movi	r2,1
    7284:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    7288:	00004906 	br	73b0 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    728c:	e0bffc17 	ldw	r2,-16(fp)
    7290:	10c0020b 	ldhu	r3,8(r2)
    7294:	e0bff117 	ldw	r2,-60(fp)
    7298:	1080040b 	ldhu	r2,16(r2)
    729c:	1884703a 	and	r2,r3,r2
    72a0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    72a4:	e0bff60b 	ldhu	r2,-40(fp)
    72a8:	10004326 	beq	r2,zero,73b8 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    72ac:	e0bff60b 	ldhu	r2,-40(fp)
    72b0:	100b883a 	mov	r5,r2
    72b4:	e13ff117 	ldw	r4,-60(fp)
    72b8:	00077600 	call	7760 <OS_FlagTaskRdy>
    72bc:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    72c0:	e0bff683 	ldbu	r2,-38(fp)
    72c4:	10800058 	cmpnei	r2,r2,1
    72c8:	10003b1e 	bne	r2,zero,73b8 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    72cc:	00800044 	movi	r2,1
    72d0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    72d4:	00003806 	br	73b8 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    72d8:	e0bffc17 	ldw	r2,-16(fp)
    72dc:	1080020b 	ldhu	r2,8(r2)
    72e0:	0084303a 	nor	r2,zero,r2
    72e4:	1007883a 	mov	r3,r2
    72e8:	e0bff117 	ldw	r2,-60(fp)
    72ec:	1080040b 	ldhu	r2,16(r2)
    72f0:	1884703a 	and	r2,r3,r2
    72f4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    72f8:	e0bff117 	ldw	r2,-60(fp)
    72fc:	1080040b 	ldhu	r2,16(r2)
    7300:	10ffffcc 	andi	r3,r2,65535
    7304:	e0bff60b 	ldhu	r2,-40(fp)
    7308:	18802d1e 	bne	r3,r2,73c0 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    730c:	e0bff60b 	ldhu	r2,-40(fp)
    7310:	100b883a 	mov	r5,r2
    7314:	e13ff117 	ldw	r4,-60(fp)
    7318:	00077600 	call	7760 <OS_FlagTaskRdy>
    731c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    7320:	e0bff683 	ldbu	r2,-38(fp)
    7324:	10800058 	cmpnei	r2,r2,1
    7328:	1000251e 	bne	r2,zero,73c0 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    732c:	00800044 	movi	r2,1
    7330:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    7334:	00002206 	br	73c0 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    7338:	e0bffc17 	ldw	r2,-16(fp)
    733c:	1080020b 	ldhu	r2,8(r2)
    7340:	0084303a 	nor	r2,zero,r2
    7344:	1007883a 	mov	r3,r2
    7348:	e0bff117 	ldw	r2,-60(fp)
    734c:	1080040b 	ldhu	r2,16(r2)
    7350:	1884703a 	and	r2,r3,r2
    7354:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    7358:	e0bff60b 	ldhu	r2,-40(fp)
    735c:	10001a26 	beq	r2,zero,73c8 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    7360:	e0bff60b 	ldhu	r2,-40(fp)
    7364:	100b883a 	mov	r5,r2
    7368:	e13ff117 	ldw	r4,-60(fp)
    736c:	00077600 	call	7760 <OS_FlagTaskRdy>
    7370:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    7374:	e0bff683 	ldbu	r2,-38(fp)
    7378:	10800058 	cmpnei	r2,r2,1
    737c:	1000121e 	bne	r2,zero,73c8 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    7380:	00800044 	movi	r2,1
    7384:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    7388:	00000f06 	br	73c8 <OSFlagPost+0x300>
    738c:	e0bff317 	ldw	r2,-52(fp)
    7390:	e0bff515 	stw	r2,-44(fp)
    7394:	e0bff517 	ldw	r2,-44(fp)
    7398:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    739c:	e0bfff17 	ldw	r2,-4(fp)
    73a0:	00c01bc4 	movi	r3,111
    73a4:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    73a8:	0005883a 	mov	r2,zero
    73ac:	00002606 	br	7448 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    73b0:	0001883a 	nop
    73b4:	00000506 	br	73cc <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    73b8:	0001883a 	nop
    73bc:	00000306 	br	73cc <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    73c0:	0001883a 	nop
    73c4:	00000106 	br	73cc <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    73c8:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    73cc:	e0bff117 	ldw	r2,-60(fp)
    73d0:	10800017 	ldw	r2,0(r2)
    73d4:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    73d8:	e0bff117 	ldw	r2,-60(fp)
    73dc:	103f871e 	bne	r2,zero,71fc <__alt_mem_onchip_memory2_0+0xfc0031fc>
    73e0:	e0bff317 	ldw	r2,-52(fp)
    73e4:	e0bff715 	stw	r2,-36(fp)
    73e8:	e0bff717 	ldw	r2,-36(fp)
    73ec:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
    73f0:	e0bff203 	ldbu	r2,-56(fp)
    73f4:	10800058 	cmpnei	r2,r2,1
    73f8:	1000011e 	bne	r2,zero,7400 <OSFlagPost+0x338>
        OS_Sched();
    73fc:	00059800 	call	5980 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7400:	0005303a 	rdctl	r2,status
    7404:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7408:	e0fffa17 	ldw	r3,-24(fp)
    740c:	00bfff84 	movi	r2,-2
    7410:	1884703a 	and	r2,r3,r2
    7414:	1001703a 	wrctl	status,r2
  
  return context;
    7418:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    741c:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
    7420:	e0bffc17 	ldw	r2,-16(fp)
    7424:	1080020b 	ldhu	r2,8(r2)
    7428:	e0bff90d 	sth	r2,-28(fp)
    742c:	e0bff317 	ldw	r2,-52(fp)
    7430:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7434:	e0bff817 	ldw	r2,-32(fp)
    7438:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
    743c:	e0bfff17 	ldw	r2,-4(fp)
    7440:	10000005 	stb	zero,0(r2)
    return (flags_cur);
    7444:	e0bff90b 	ldhu	r2,-28(fp)
}
    7448:	e037883a 	mov	sp,fp
    744c:	dfc00117 	ldw	ra,4(sp)
    7450:	df000017 	ldw	fp,0(sp)
    7454:	dec00204 	addi	sp,sp,8
    7458:	f800283a 	ret

0000745c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
    745c:	defff904 	addi	sp,sp,-28
    7460:	df000615 	stw	fp,24(sp)
    7464:	df000604 	addi	fp,sp,24
    7468:	e13ffe15 	stw	r4,-8(fp)
    746c:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
    7470:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
    7474:	e0bfff17 	ldw	r2,-4(fp)
    7478:	1000021e 	bne	r2,zero,7484 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
    747c:	0005883a 	mov	r2,zero
    7480:	00002306 	br	7510 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
    7484:	e0bffe17 	ldw	r2,-8(fp)
    7488:	1000051e 	bne	r2,zero,74a0 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    748c:	e0bfff17 	ldw	r2,-4(fp)
    7490:	00c01b84 	movi	r3,110
    7494:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7498:	0005883a 	mov	r2,zero
    749c:	00001c06 	br	7510 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
    74a0:	e0bffe17 	ldw	r2,-8(fp)
    74a4:	10800003 	ldbu	r2,0(r2)
    74a8:	10803fcc 	andi	r2,r2,255
    74ac:	10800160 	cmpeqi	r2,r2,5
    74b0:	1000051e 	bne	r2,zero,74c8 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    74b4:	e0bfff17 	ldw	r2,-4(fp)
    74b8:	00c00044 	movi	r3,1
    74bc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    74c0:	0005883a 	mov	r2,zero
    74c4:	00001206 	br	7510 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    74c8:	0005303a 	rdctl	r2,status
    74cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    74d0:	e0fffc17 	ldw	r3,-16(fp)
    74d4:	00bfff84 	movi	r2,-2
    74d8:	1884703a 	and	r2,r3,r2
    74dc:	1001703a 	wrctl	status,r2
  
  return context;
    74e0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    74e4:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
    74e8:	e0bffe17 	ldw	r2,-8(fp)
    74ec:	1080020b 	ldhu	r2,8(r2)
    74f0:	e0bffb0d 	sth	r2,-20(fp)
    74f4:	e0bffa17 	ldw	r2,-24(fp)
    74f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    74fc:	e0bffd17 	ldw	r2,-12(fp)
    7500:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7504:	e0bfff17 	ldw	r2,-4(fp)
    7508:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
    750c:	e0bffb0b 	ldhu	r2,-20(fp)
}
    7510:	e037883a 	mov	sp,fp
    7514:	df000017 	ldw	fp,0(sp)
    7518:	dec00104 	addi	sp,sp,4
    751c:	f800283a 	ret

00007520 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
    7520:	defff804 	addi	sp,sp,-32
    7524:	df000715 	stw	fp,28(sp)
    7528:	df000704 	addi	fp,sp,28
    752c:	e13ffb15 	stw	r4,-20(fp)
    7530:	e17ffc15 	stw	r5,-16(fp)
    7534:	3009883a 	mov	r4,r6
    7538:	3807883a 	mov	r3,r7
    753c:	e0800117 	ldw	r2,4(fp)
    7540:	e13ffd0d 	sth	r4,-12(fp)
    7544:	e0fffe05 	stb	r3,-8(fp)
    7548:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    754c:	d0a74a17 	ldw	r2,-25304(gp)
    7550:	d0e74a17 	ldw	r3,-25304(gp)
    7554:	18c00c03 	ldbu	r3,48(r3)
    7558:	18c00814 	ori	r3,r3,32
    755c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    7560:	d0a74a17 	ldw	r2,-25304(gp)
    7564:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    7568:	d0a74a17 	ldw	r2,-25304(gp)
    756c:	e0ffff0b 	ldhu	r3,-4(fp)
    7570:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
    7574:	d0a74a17 	ldw	r2,-25304(gp)
    7578:	e0fffc17 	ldw	r3,-16(fp)
    757c:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    7580:	e0bffc17 	ldw	r2,-16(fp)
    7584:	e0fffd0b 	ldhu	r3,-12(fp)
    7588:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    758c:	e0bffc17 	ldw	r2,-16(fp)
    7590:	e0fffe03 	ldbu	r3,-8(fp)
    7594:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    7598:	d0e74a17 	ldw	r3,-25304(gp)
    759c:	e0bffc17 	ldw	r2,-16(fp)
    75a0:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    75a4:	e0bffb17 	ldw	r2,-20(fp)
    75a8:	10c00117 	ldw	r3,4(r2)
    75ac:	e0bffc17 	ldw	r2,-16(fp)
    75b0:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
    75b4:	e0bffc17 	ldw	r2,-16(fp)
    75b8:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    75bc:	e0bffc17 	ldw	r2,-16(fp)
    75c0:	e0fffb17 	ldw	r3,-20(fp)
    75c4:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    75c8:	e0bffb17 	ldw	r2,-20(fp)
    75cc:	10800117 	ldw	r2,4(r2)
    75d0:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    75d4:	e0bff917 	ldw	r2,-28(fp)
    75d8:	10000326 	beq	r2,zero,75e8 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    75dc:	e0bff917 	ldw	r2,-28(fp)
    75e0:	e0fffc17 	ldw	r3,-16(fp)
    75e4:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    75e8:	e0bffb17 	ldw	r2,-20(fp)
    75ec:	e0fffc17 	ldw	r3,-16(fp)
    75f0:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    75f4:	d0a74a17 	ldw	r2,-25304(gp)
    75f8:	10800d03 	ldbu	r2,52(r2)
    75fc:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    7600:	e0fffa03 	ldbu	r3,-24(fp)
    7604:	e13ffa03 	ldbu	r4,-24(fp)
    7608:	d0a74744 	addi	r2,gp,-25315
    760c:	2085883a 	add	r2,r4,r2
    7610:	10800003 	ldbu	r2,0(r2)
    7614:	1009883a 	mov	r4,r2
    7618:	d0a74a17 	ldw	r2,-25304(gp)
    761c:	10800d43 	ldbu	r2,53(r2)
    7620:	0084303a 	nor	r2,zero,r2
    7624:	2084703a 	and	r2,r4,r2
    7628:	1009883a 	mov	r4,r2
    762c:	d0a74744 	addi	r2,gp,-25315
    7630:	1885883a 	add	r2,r3,r2
    7634:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
    7638:	e0fffa03 	ldbu	r3,-24(fp)
    763c:	d0a74744 	addi	r2,gp,-25315
    7640:	1885883a 	add	r2,r3,r2
    7644:	10800003 	ldbu	r2,0(r2)
    7648:	10803fcc 	andi	r2,r2,255
    764c:	1000071e 	bne	r2,zero,766c <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    7650:	d0a74a17 	ldw	r2,-25304(gp)
    7654:	10800d83 	ldbu	r2,54(r2)
    7658:	0084303a 	nor	r2,zero,r2
    765c:	1007883a 	mov	r3,r2
    7660:	d0a74703 	ldbu	r2,-25316(gp)
    7664:	1884703a 	and	r2,r3,r2
    7668:	d0a74705 	stb	r2,-25316(gp)
    }
}
    766c:	0001883a 	nop
    7670:	e037883a 	mov	sp,fp
    7674:	df000017 	ldw	fp,0(sp)
    7678:	dec00104 	addi	sp,sp,4
    767c:	f800283a 	ret

00007680 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
    7680:	defffb04 	addi	sp,sp,-20
    7684:	dfc00415 	stw	ra,16(sp)
    7688:	df000315 	stw	fp,12(sp)
    768c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    7690:	0140dc04 	movi	r5,880
    7694:	01000074 	movhi	r4,1
    7698:	21125e04 	addi	r4,r4,18808
    769c:	00058c40 	call	58c4 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
    76a0:	00800074 	movhi	r2,1
    76a4:	10925e04 	addi	r2,r2,18808
    76a8:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
    76ac:	00800074 	movhi	r2,1
    76b0:	10926904 	addi	r2,r2,18852
    76b4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    76b8:	e03ffd0d 	sth	zero,-12(fp)
    76bc:	00001306 	br	770c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    76c0:	e0bffe17 	ldw	r2,-8(fp)
    76c4:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
    76c8:	e0bffe17 	ldw	r2,-8(fp)
    76cc:	e0ffff17 	ldw	r3,-4(fp)
    76d0:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
    76d4:	e0bffe17 	ldw	r2,-8(fp)
    76d8:	00c00fc4 	movi	r3,63
    76dc:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    76e0:	e0bffe17 	ldw	r2,-8(fp)
    76e4:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
    76e8:	e0bffe17 	ldw	r2,-8(fp)
    76ec:	10800b04 	addi	r2,r2,44
    76f0:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
    76f4:	e0bfff17 	ldw	r2,-4(fp)
    76f8:	10800b04 	addi	r2,r2,44
    76fc:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    7700:	e0bffd0b 	ldhu	r2,-12(fp)
    7704:	10800044 	addi	r2,r2,1
    7708:	e0bffd0d 	sth	r2,-12(fp)
    770c:	e0bffd0b 	ldhu	r2,-12(fp)
    7710:	108004f0 	cmpltui	r2,r2,19
    7714:	103fea1e 	bne	r2,zero,76c0 <__alt_mem_onchip_memory2_0+0xfc0036c0>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    7718:	e0bffe17 	ldw	r2,-8(fp)
    771c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
    7720:	e0bffe17 	ldw	r2,-8(fp)
    7724:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    7728:	e0bffe17 	ldw	r2,-8(fp)
    772c:	00c00fc4 	movi	r3,63
    7730:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    7734:	e0bffe17 	ldw	r2,-8(fp)
    7738:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
    773c:	00800074 	movhi	r2,1
    7740:	10925e04 	addi	r2,r2,18808
    7744:	d0a74c15 	stw	r2,-25296(gp)
#endif
}
    7748:	0001883a 	nop
    774c:	e037883a 	mov	sp,fp
    7750:	dfc00117 	ldw	ra,4(sp)
    7754:	df000017 	ldw	fp,0(sp)
    7758:	dec00204 	addi	sp,sp,8
    775c:	f800283a 	ret

00007760 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
    7760:	defffa04 	addi	sp,sp,-24
    7764:	dfc00515 	stw	ra,20(sp)
    7768:	df000415 	stw	fp,16(sp)
    776c:	df000404 	addi	fp,sp,16
    7770:	e13ffe15 	stw	r4,-8(fp)
    7774:	2805883a 	mov	r2,r5
    7778:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    777c:	e0bffe17 	ldw	r2,-8(fp)
    7780:	10800217 	ldw	r2,8(r2)
    7784:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
    7788:	e0bffd17 	ldw	r2,-12(fp)
    778c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    7790:	e0bffd17 	ldw	r2,-12(fp)
    7794:	e0ffff0b 	ldhu	r3,-4(fp)
    7798:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    779c:	e0bffd17 	ldw	r2,-12(fp)
    77a0:	10c00c03 	ldbu	r3,48(r2)
    77a4:	00bff7c4 	movi	r2,-33
    77a8:	1884703a 	and	r2,r3,r2
    77ac:	1007883a 	mov	r3,r2
    77b0:	e0bffd17 	ldw	r2,-12(fp)
    77b4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    77b8:	e0bffd17 	ldw	r2,-12(fp)
    77bc:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
    77c0:	e0bffd17 	ldw	r2,-12(fp)
    77c4:	10800c03 	ldbu	r2,48(r2)
    77c8:	10803fcc 	andi	r2,r2,255
    77cc:	1000181e 	bne	r2,zero,7830 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
    77d0:	e0bffd17 	ldw	r2,-12(fp)
    77d4:	10c00d83 	ldbu	r3,54(r2)
    77d8:	d0a74703 	ldbu	r2,-25316(gp)
    77dc:	1884b03a 	or	r2,r3,r2
    77e0:	d0a74705 	stb	r2,-25316(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    77e4:	e0bffd17 	ldw	r2,-12(fp)
    77e8:	10800d03 	ldbu	r2,52(r2)
    77ec:	10c03fcc 	andi	r3,r2,255
    77f0:	e0bffd17 	ldw	r2,-12(fp)
    77f4:	10800d03 	ldbu	r2,52(r2)
    77f8:	11003fcc 	andi	r4,r2,255
    77fc:	d0a74744 	addi	r2,gp,-25315
    7800:	2085883a 	add	r2,r4,r2
    7804:	11000003 	ldbu	r4,0(r2)
    7808:	e0bffd17 	ldw	r2,-12(fp)
    780c:	10800d43 	ldbu	r2,53(r2)
    7810:	2084b03a 	or	r2,r4,r2
    7814:	1009883a 	mov	r4,r2
    7818:	d0a74744 	addi	r2,gp,-25315
    781c:	1885883a 	add	r2,r3,r2
    7820:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
    7824:	00800044 	movi	r2,1
    7828:	e0bffc05 	stb	r2,-16(fp)
    782c:	00000106 	br	7834 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
    7830:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
    7834:	e13ffe17 	ldw	r4,-8(fp)
    7838:	00078540 	call	7854 <OS_FlagUnlink>
    return (sched);
    783c:	e0bffc03 	ldbu	r2,-16(fp)
}
    7840:	e037883a 	mov	sp,fp
    7844:	dfc00117 	ldw	ra,4(sp)
    7848:	df000017 	ldw	fp,0(sp)
    784c:	dec00204 	addi	sp,sp,8
    7850:	f800283a 	ret

00007854 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
    7854:	defffa04 	addi	sp,sp,-24
    7858:	df000515 	stw	fp,20(sp)
    785c:	df000504 	addi	fp,sp,20
    7860:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    7864:	e0bfff17 	ldw	r2,-4(fp)
    7868:	10800117 	ldw	r2,4(r2)
    786c:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    7870:	e0bfff17 	ldw	r2,-4(fp)
    7874:	10800017 	ldw	r2,0(r2)
    7878:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    787c:	e0bffb17 	ldw	r2,-20(fp)
    7880:	10000b1e 	bne	r2,zero,78b0 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
    7884:	e0bfff17 	ldw	r2,-4(fp)
    7888:	10800317 	ldw	r2,12(r2)
    788c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    7890:	e0bffd17 	ldw	r2,-12(fp)
    7894:	e0fffc17 	ldw	r3,-16(fp)
    7898:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
    789c:	e0bffc17 	ldw	r2,-16(fp)
    78a0:	10000b26 	beq	r2,zero,78d0 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    78a4:	e0bffc17 	ldw	r2,-16(fp)
    78a8:	10000115 	stw	zero,4(r2)
    78ac:	00000806 	br	78d0 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    78b0:	e0bffb17 	ldw	r2,-20(fp)
    78b4:	e0fffc17 	ldw	r3,-16(fp)
    78b8:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    78bc:	e0bffc17 	ldw	r2,-16(fp)
    78c0:	10000326 	beq	r2,zero,78d0 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    78c4:	e0bffc17 	ldw	r2,-16(fp)
    78c8:	e0fffb17 	ldw	r3,-20(fp)
    78cc:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    78d0:	e0bfff17 	ldw	r2,-4(fp)
    78d4:	10800217 	ldw	r2,8(r2)
    78d8:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
    78dc:	e0bffe17 	ldw	r2,-8(fp)
    78e0:	10000a15 	stw	zero,40(r2)
#endif
}
    78e4:	0001883a 	nop
    78e8:	e037883a 	mov	sp,fp
    78ec:	df000017 	ldw	fp,0(sp)
    78f0:	dec00104 	addi	sp,sp,4
    78f4:	f800283a 	ret

000078f8 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
    78f8:	defff404 	addi	sp,sp,-48
    78fc:	df000b15 	stw	fp,44(sp)
    7900:	df000b04 	addi	fp,sp,44
    7904:	e13ffc15 	stw	r4,-16(fp)
    7908:	e17ffd15 	stw	r5,-12(fp)
    790c:	e1bffe15 	stw	r6,-8(fp)
    7910:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    7914:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    7918:	e0bfff17 	ldw	r2,-4(fp)
    791c:	1000021e 	bne	r2,zero,7928 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
    7920:	0005883a 	mov	r2,zero
    7924:	00006506 	br	7abc <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
    7928:	e0bffc17 	ldw	r2,-16(fp)
    792c:	1000051e 	bne	r2,zero,7944 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    7930:	e0bfff17 	ldw	r2,-4(fp)
    7934:	00c01884 	movi	r3,98
    7938:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    793c:	0005883a 	mov	r2,zero
    7940:	00005e06 	br	7abc <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
    7944:	e0bffc17 	ldw	r2,-16(fp)
    7948:	108000cc 	andi	r2,r2,3
    794c:	10000526 	beq	r2,zero,7964 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    7950:	e0bfff17 	ldw	r2,-4(fp)
    7954:	00c01884 	movi	r3,98
    7958:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    795c:	0005883a 	mov	r2,zero
    7960:	00005606 	br	7abc <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
    7964:	e0bffd17 	ldw	r2,-12(fp)
    7968:	108000a8 	cmpgeui	r2,r2,2
    796c:	1000051e 	bne	r2,zero,7984 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
    7970:	e0bfff17 	ldw	r2,-4(fp)
    7974:	00c016c4 	movi	r3,91
    7978:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    797c:	0005883a 	mov	r2,zero
    7980:	00004e06 	br	7abc <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
    7984:	e0bffe17 	ldw	r2,-8(fp)
    7988:	10800128 	cmpgeui	r2,r2,4
    798c:	1000051e 	bne	r2,zero,79a4 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
    7990:	e0bfff17 	ldw	r2,-4(fp)
    7994:	00c01704 	movi	r3,92
    7998:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    799c:	0005883a 	mov	r2,zero
    79a0:	00004606 	br	7abc <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    79a4:	0005303a 	rdctl	r2,status
    79a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    79ac:	e0fffb17 	ldw	r3,-20(fp)
    79b0:	00bfff84 	movi	r2,-2
    79b4:	1884703a 	and	r2,r3,r2
    79b8:	1001703a 	wrctl	status,r2
  
  return context;
    79bc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    79c0:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
    79c4:	d0a74417 	ldw	r2,-25328(gp)
    79c8:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
    79cc:	d0a74417 	ldw	r2,-25328(gp)
    79d0:	10000326 	beq	r2,zero,79e0 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
    79d4:	d0a74417 	ldw	r2,-25328(gp)
    79d8:	10800117 	ldw	r2,4(r2)
    79dc:	d0a74415 	stw	r2,-25328(gp)
    79e0:	e0bff817 	ldw	r2,-32(fp)
    79e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    79e8:	e0bff917 	ldw	r2,-28(fp)
    79ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
    79f0:	e0bffa17 	ldw	r2,-24(fp)
    79f4:	1000051e 	bne	r2,zero,7a0c <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
    79f8:	e0bfff17 	ldw	r2,-4(fp)
    79fc:	00c01684 	movi	r3,90
    7a00:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    7a04:	0005883a 	mov	r2,zero
    7a08:	00002c06 	br	7abc <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    7a0c:	e0bffc17 	ldw	r2,-16(fp)
    7a10:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
    7a14:	e0fffc17 	ldw	r3,-16(fp)
    7a18:	e0bffe17 	ldw	r2,-8(fp)
    7a1c:	1885883a 	add	r2,r3,r2
    7a20:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
    7a24:	e03ff715 	stw	zero,-36(fp)
    7a28:	00000c06 	br	7a5c <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
    7a2c:	e0bff617 	ldw	r2,-40(fp)
    7a30:	e0fff517 	ldw	r3,-44(fp)
    7a34:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
    7a38:	e0bff517 	ldw	r2,-44(fp)
    7a3c:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    7a40:	e0fff517 	ldw	r3,-44(fp)
    7a44:	e0bffe17 	ldw	r2,-8(fp)
    7a48:	1885883a 	add	r2,r3,r2
    7a4c:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
    7a50:	e0bff717 	ldw	r2,-36(fp)
    7a54:	10800044 	addi	r2,r2,1
    7a58:	e0bff715 	stw	r2,-36(fp)
    7a5c:	e0bffd17 	ldw	r2,-12(fp)
    7a60:	10bfffc4 	addi	r2,r2,-1
    7a64:	e0fff717 	ldw	r3,-36(fp)
    7a68:	18bff036 	bltu	r3,r2,7a2c <__alt_mem_onchip_memory2_0+0xfc003a2c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
    7a6c:	e0bff617 	ldw	r2,-40(fp)
    7a70:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
    7a74:	e0bffa17 	ldw	r2,-24(fp)
    7a78:	e0fffc17 	ldw	r3,-16(fp)
    7a7c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
    7a80:	e0bffa17 	ldw	r2,-24(fp)
    7a84:	e0fffc17 	ldw	r3,-16(fp)
    7a88:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    7a8c:	e0bffa17 	ldw	r2,-24(fp)
    7a90:	e0fffd17 	ldw	r3,-12(fp)
    7a94:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
    7a98:	e0bffa17 	ldw	r2,-24(fp)
    7a9c:	e0fffd17 	ldw	r3,-12(fp)
    7aa0:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    7aa4:	e0bffa17 	ldw	r2,-24(fp)
    7aa8:	e0fffe17 	ldw	r3,-8(fp)
    7aac:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
    7ab0:	e0bfff17 	ldw	r2,-4(fp)
    7ab4:	10000005 	stb	zero,0(r2)
    return (pmem);
    7ab8:	e0bffa17 	ldw	r2,-24(fp)
}
    7abc:	e037883a 	mov	sp,fp
    7ac0:	df000017 	ldw	fp,0(sp)
    7ac4:	dec00104 	addi	sp,sp,4
    7ac8:	f800283a 	ret

00007acc <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
    7acc:	defff804 	addi	sp,sp,-32
    7ad0:	df000715 	stw	fp,28(sp)
    7ad4:	df000704 	addi	fp,sp,28
    7ad8:	e13ffe15 	stw	r4,-8(fp)
    7adc:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    7ae0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    7ae4:	e0bfff17 	ldw	r2,-4(fp)
    7ae8:	1000021e 	bne	r2,zero,7af4 <OSMemGet+0x28>
        return ((void *)0);
    7aec:	0005883a 	mov	r2,zero
    7af0:	00002e06 	br	7bac <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
    7af4:	e0bffe17 	ldw	r2,-8(fp)
    7af8:	1000051e 	bne	r2,zero,7b10 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    7afc:	e0bfff17 	ldw	r2,-4(fp)
    7b00:	00c01804 	movi	r3,96
    7b04:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    7b08:	0005883a 	mov	r2,zero
    7b0c:	00002706 	br	7bac <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7b10:	0005303a 	rdctl	r2,status
    7b14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7b18:	e0fffd17 	ldw	r3,-12(fp)
    7b1c:	00bfff84 	movi	r2,-2
    7b20:	1884703a 	and	r2,r3,r2
    7b24:	1001703a 	wrctl	status,r2
  
  return context;
    7b28:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7b2c:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
    7b30:	e0bffe17 	ldw	r2,-8(fp)
    7b34:	10800417 	ldw	r2,16(r2)
    7b38:	10001426 	beq	r2,zero,7b8c <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
    7b3c:	e0bffe17 	ldw	r2,-8(fp)
    7b40:	10800117 	ldw	r2,4(r2)
    7b44:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
    7b48:	e0bffb17 	ldw	r2,-20(fp)
    7b4c:	10c00017 	ldw	r3,0(r2)
    7b50:	e0bffe17 	ldw	r2,-8(fp)
    7b54:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
    7b58:	e0bffe17 	ldw	r2,-8(fp)
    7b5c:	10800417 	ldw	r2,16(r2)
    7b60:	10ffffc4 	addi	r3,r2,-1
    7b64:	e0bffe17 	ldw	r2,-8(fp)
    7b68:	10c00415 	stw	r3,16(r2)
    7b6c:	e0bff917 	ldw	r2,-28(fp)
    7b70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7b74:	e0bffa17 	ldw	r2,-24(fp)
    7b78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
    7b7c:	e0bfff17 	ldw	r2,-4(fp)
    7b80:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
    7b84:	e0bffb17 	ldw	r2,-20(fp)
    7b88:	00000806 	br	7bac <OSMemGet+0xe0>
    7b8c:	e0bff917 	ldw	r2,-28(fp)
    7b90:	e0bffc15 	stw	r2,-16(fp)
    7b94:	e0bffc17 	ldw	r2,-16(fp)
    7b98:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
    7b9c:	e0bfff17 	ldw	r2,-4(fp)
    7ba0:	00c01744 	movi	r3,93
    7ba4:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
    7ba8:	0005883a 	mov	r2,zero
}
    7bac:	e037883a 	mov	sp,fp
    7bb0:	df000017 	ldw	fp,0(sp)
    7bb4:	dec00104 	addi	sp,sp,4
    7bb8:	f800283a 	ret

00007bbc <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    7bbc:	defff704 	addi	sp,sp,-36
    7bc0:	dfc00815 	stw	ra,32(sp)
    7bc4:	df000715 	stw	fp,28(sp)
    7bc8:	df000704 	addi	fp,sp,28
    7bcc:	e13ffd15 	stw	r4,-12(fp)
    7bd0:	e17ffe15 	stw	r5,-8(fp)
    7bd4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7bd8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    7bdc:	e0bfff17 	ldw	r2,-4(fp)
    7be0:	1000021e 	bne	r2,zero,7bec <OSMemNameGet+0x30>
        return (0);
    7be4:	0005883a 	mov	r2,zero
    7be8:	00002b06 	br	7c98 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    7bec:	e0bffd17 	ldw	r2,-12(fp)
    7bf0:	1000051e 	bne	r2,zero,7c08 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    7bf4:	e0bfff17 	ldw	r2,-4(fp)
    7bf8:	00c01804 	movi	r3,96
    7bfc:	10c00005 	stb	r3,0(r2)
        return (0);
    7c00:	0005883a 	mov	r2,zero
    7c04:	00002406 	br	7c98 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    7c08:	e0bffe17 	ldw	r2,-8(fp)
    7c0c:	1000051e 	bne	r2,zero,7c24 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    7c10:	e0bfff17 	ldw	r2,-4(fp)
    7c14:	00c00304 	movi	r3,12
    7c18:	10c00005 	stb	r3,0(r2)
        return (0);
    7c1c:	0005883a 	mov	r2,zero
    7c20:	00001d06 	br	7c98 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    7c24:	d0a74903 	ldbu	r2,-25308(gp)
    7c28:	10803fcc 	andi	r2,r2,255
    7c2c:	10000526 	beq	r2,zero,7c44 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
    7c30:	e0bfff17 	ldw	r2,-4(fp)
    7c34:	00c00444 	movi	r3,17
    7c38:	10c00005 	stb	r3,0(r2)
        return (0);
    7c3c:	0005883a 	mov	r2,zero
    7c40:	00001506 	br	7c98 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7c44:	0005303a 	rdctl	r2,status
    7c48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7c4c:	e0fffb17 	ldw	r3,-20(fp)
    7c50:	00bfff84 	movi	r2,-2
    7c54:	1884703a 	and	r2,r3,r2
    7c58:	1001703a 	wrctl	status,r2
  
  return context;
    7c5c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    7c60:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    7c64:	e0bffd17 	ldw	r2,-12(fp)
    7c68:	10800504 	addi	r2,r2,20
    7c6c:	100b883a 	mov	r5,r2
    7c70:	e13ffe17 	ldw	r4,-8(fp)
    7c74:	0005ac40 	call	5ac4 <OS_StrCopy>
    7c78:	e0bffa05 	stb	r2,-24(fp)
    7c7c:	e0bff917 	ldw	r2,-28(fp)
    7c80:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7c84:	e0bffc17 	ldw	r2,-16(fp)
    7c88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7c8c:	e0bfff17 	ldw	r2,-4(fp)
    7c90:	10000005 	stb	zero,0(r2)
    return (len);
    7c94:	e0bffa03 	ldbu	r2,-24(fp)
}
    7c98:	e037883a 	mov	sp,fp
    7c9c:	dfc00117 	ldw	ra,4(sp)
    7ca0:	df000017 	ldw	fp,0(sp)
    7ca4:	dec00204 	addi	sp,sp,8
    7ca8:	f800283a 	ret

00007cac <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    7cac:	defff604 	addi	sp,sp,-40
    7cb0:	dfc00915 	stw	ra,36(sp)
    7cb4:	df000815 	stw	fp,32(sp)
    7cb8:	df000804 	addi	fp,sp,32
    7cbc:	e13ffd15 	stw	r4,-12(fp)
    7cc0:	e17ffe15 	stw	r5,-8(fp)
    7cc4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7cc8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    7ccc:	e0bfff17 	ldw	r2,-4(fp)
    7cd0:	10003526 	beq	r2,zero,7da8 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    7cd4:	e0bffd17 	ldw	r2,-12(fp)
    7cd8:	1000041e 	bne	r2,zero,7cec <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    7cdc:	e0bfff17 	ldw	r2,-4(fp)
    7ce0:	00c01804 	movi	r3,96
    7ce4:	10c00005 	stb	r3,0(r2)
        return;
    7ce8:	00003006 	br	7dac <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    7cec:	e0bffe17 	ldw	r2,-8(fp)
    7cf0:	1000041e 	bne	r2,zero,7d04 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    7cf4:	e0bfff17 	ldw	r2,-4(fp)
    7cf8:	00c00304 	movi	r3,12
    7cfc:	10c00005 	stb	r3,0(r2)
        return;
    7d00:	00002a06 	br	7dac <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    7d04:	d0a74903 	ldbu	r2,-25308(gp)
    7d08:	10803fcc 	andi	r2,r2,255
    7d0c:	10000426 	beq	r2,zero,7d20 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    7d10:	e0bfff17 	ldw	r2,-4(fp)
    7d14:	00c00484 	movi	r3,18
    7d18:	10c00005 	stb	r3,0(r2)
        return;
    7d1c:	00002306 	br	7dac <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7d20:	0005303a 	rdctl	r2,status
    7d24:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7d28:	e0fffc17 	ldw	r3,-16(fp)
    7d2c:	00bfff84 	movi	r2,-2
    7d30:	1884703a 	and	r2,r3,r2
    7d34:	1001703a 	wrctl	status,r2
  
  return context;
    7d38:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    7d3c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    7d40:	e13ffe17 	ldw	r4,-8(fp)
    7d44:	0005b380 	call	5b38 <OS_StrLen>
    7d48:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
    7d4c:	e0bffa03 	ldbu	r2,-24(fp)
    7d50:	10800830 	cmpltui	r2,r2,32
    7d54:	1000081e 	bne	r2,zero,7d78 <OSMemNameSet+0xcc>
    7d58:	e0bff817 	ldw	r2,-32(fp)
    7d5c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7d60:	e0bff917 	ldw	r2,-28(fp)
    7d64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
    7d68:	e0bfff17 	ldw	r2,-4(fp)
    7d6c:	00c018c4 	movi	r3,99
    7d70:	10c00005 	stb	r3,0(r2)
        return;
    7d74:	00000d06 	br	7dac <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    7d78:	e0bffd17 	ldw	r2,-12(fp)
    7d7c:	10800504 	addi	r2,r2,20
    7d80:	e17ffe17 	ldw	r5,-8(fp)
    7d84:	1009883a 	mov	r4,r2
    7d88:	0005ac40 	call	5ac4 <OS_StrCopy>
    7d8c:	e0bff817 	ldw	r2,-32(fp)
    7d90:	e0bffb15 	stw	r2,-20(fp)
    7d94:	e0bffb17 	ldw	r2,-20(fp)
    7d98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7d9c:	e0bfff17 	ldw	r2,-4(fp)
    7da0:	10000005 	stb	zero,0(r2)
    7da4:	00000106 	br	7dac <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    7da8:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    7dac:	e037883a 	mov	sp,fp
    7db0:	dfc00117 	ldw	ra,4(sp)
    7db4:	df000017 	ldw	fp,0(sp)
    7db8:	dec00204 	addi	sp,sp,8
    7dbc:	f800283a 	ret

00007dc0 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
    7dc0:	defff904 	addi	sp,sp,-28
    7dc4:	df000615 	stw	fp,24(sp)
    7dc8:	df000604 	addi	fp,sp,24
    7dcc:	e13ffe15 	stw	r4,-8(fp)
    7dd0:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7dd4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    7dd8:	e0bffe17 	ldw	r2,-8(fp)
    7ddc:	1000021e 	bne	r2,zero,7de8 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    7de0:	00801804 	movi	r2,96
    7de4:	00002806 	br	7e88 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
    7de8:	e0bfff17 	ldw	r2,-4(fp)
    7dec:	1000021e 	bne	r2,zero,7df8 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
    7df0:	008017c4 	movi	r2,95
    7df4:	00002406 	br	7e88 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7df8:	0005303a 	rdctl	r2,status
    7dfc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7e00:	e0fffd17 	ldw	r3,-12(fp)
    7e04:	00bfff84 	movi	r2,-2
    7e08:	1884703a 	and	r2,r3,r2
    7e0c:	1001703a 	wrctl	status,r2
  
  return context;
    7e10:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7e14:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
    7e18:	e0bffe17 	ldw	r2,-8(fp)
    7e1c:	10c00417 	ldw	r3,16(r2)
    7e20:	e0bffe17 	ldw	r2,-8(fp)
    7e24:	10800317 	ldw	r2,12(r2)
    7e28:	18800636 	bltu	r3,r2,7e44 <OSMemPut+0x84>
    7e2c:	e0bffa17 	ldw	r2,-24(fp)
    7e30:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7e34:	e0bffb17 	ldw	r2,-20(fp)
    7e38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
    7e3c:	00801784 	movi	r2,94
    7e40:	00001106 	br	7e88 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
    7e44:	e0bffe17 	ldw	r2,-8(fp)
    7e48:	10c00117 	ldw	r3,4(r2)
    7e4c:	e0bfff17 	ldw	r2,-4(fp)
    7e50:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
    7e54:	e0bffe17 	ldw	r2,-8(fp)
    7e58:	e0ffff17 	ldw	r3,-4(fp)
    7e5c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
    7e60:	e0bffe17 	ldw	r2,-8(fp)
    7e64:	10800417 	ldw	r2,16(r2)
    7e68:	10c00044 	addi	r3,r2,1
    7e6c:	e0bffe17 	ldw	r2,-8(fp)
    7e70:	10c00415 	stw	r3,16(r2)
    7e74:	e0bffa17 	ldw	r2,-24(fp)
    7e78:	e0bffc15 	stw	r2,-16(fp)
    7e7c:	e0bffc17 	ldw	r2,-16(fp)
    7e80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
    7e84:	0005883a 	mov	r2,zero
}
    7e88:	e037883a 	mov	sp,fp
    7e8c:	df000017 	ldw	fp,0(sp)
    7e90:	dec00104 	addi	sp,sp,4
    7e94:	f800283a 	ret

00007e98 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
    7e98:	defffa04 	addi	sp,sp,-24
    7e9c:	df000515 	stw	fp,20(sp)
    7ea0:	df000504 	addi	fp,sp,20
    7ea4:	e13ffe15 	stw	r4,-8(fp)
    7ea8:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7eac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    7eb0:	e0bffe17 	ldw	r2,-8(fp)
    7eb4:	1000021e 	bne	r2,zero,7ec0 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    7eb8:	00801804 	movi	r2,96
    7ebc:	00002c06 	br	7f70 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
    7ec0:	e0bfff17 	ldw	r2,-4(fp)
    7ec4:	1000021e 	bne	r2,zero,7ed0 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
    7ec8:	00801844 	movi	r2,97
    7ecc:	00002806 	br	7f70 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7ed0:	0005303a 	rdctl	r2,status
    7ed4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7ed8:	e0fffc17 	ldw	r3,-16(fp)
    7edc:	00bfff84 	movi	r2,-2
    7ee0:	1884703a 	and	r2,r3,r2
    7ee4:	1001703a 	wrctl	status,r2
  
  return context;
    7ee8:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7eec:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
    7ef0:	e0bffe17 	ldw	r2,-8(fp)
    7ef4:	10c00017 	ldw	r3,0(r2)
    7ef8:	e0bfff17 	ldw	r2,-4(fp)
    7efc:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
    7f00:	e0bffe17 	ldw	r2,-8(fp)
    7f04:	10c00117 	ldw	r3,4(r2)
    7f08:	e0bfff17 	ldw	r2,-4(fp)
    7f0c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
    7f10:	e0bffe17 	ldw	r2,-8(fp)
    7f14:	10c00217 	ldw	r3,8(r2)
    7f18:	e0bfff17 	ldw	r2,-4(fp)
    7f1c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
    7f20:	e0bffe17 	ldw	r2,-8(fp)
    7f24:	10c00317 	ldw	r3,12(r2)
    7f28:	e0bfff17 	ldw	r2,-4(fp)
    7f2c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
    7f30:	e0bffe17 	ldw	r2,-8(fp)
    7f34:	10c00417 	ldw	r3,16(r2)
    7f38:	e0bfff17 	ldw	r2,-4(fp)
    7f3c:	10c00415 	stw	r3,16(r2)
    7f40:	e0bffb17 	ldw	r2,-20(fp)
    7f44:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7f48:	e0bffd17 	ldw	r2,-12(fp)
    7f4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
    7f50:	e0bfff17 	ldw	r2,-4(fp)
    7f54:	10c00317 	ldw	r3,12(r2)
    7f58:	e0bfff17 	ldw	r2,-4(fp)
    7f5c:	10800417 	ldw	r2,16(r2)
    7f60:	1887c83a 	sub	r3,r3,r2
    7f64:	e0bfff17 	ldw	r2,-4(fp)
    7f68:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
    7f6c:	0005883a 	mov	r2,zero
}
    7f70:	e037883a 	mov	sp,fp
    7f74:	df000017 	ldw	fp,0(sp)
    7f78:	dec00104 	addi	sp,sp,4
    7f7c:	f800283a 	ret

00007f80 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
    7f80:	defffc04 	addi	sp,sp,-16
    7f84:	dfc00315 	stw	ra,12(sp)
    7f88:	df000215 	stw	fp,8(sp)
    7f8c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    7f90:	01430c04 	movi	r5,3120
    7f94:	01000074 	movhi	r4,1
    7f98:	21133a04 	addi	r4,r4,19688
    7f9c:	00058c40 	call	58c4 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    7fa0:	00800074 	movhi	r2,1
    7fa4:	10933a04 	addi	r2,r2,19688
    7fa8:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    7fac:	e03fff0d 	sth	zero,-4(fp)
    7fb0:	00001306 	br	8000 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
    7fb4:	e0bfff0b 	ldhu	r2,-4(fp)
    7fb8:	10800044 	addi	r2,r2,1
    7fbc:	10c00d24 	muli	r3,r2,52
    7fc0:	00800074 	movhi	r2,1
    7fc4:	10933a04 	addi	r2,r2,19688
    7fc8:	1887883a 	add	r3,r3,r2
    7fcc:	e0bffe17 	ldw	r2,-8(fp)
    7fd0:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
    7fd4:	e0bffe17 	ldw	r2,-8(fp)
    7fd8:	00c00fc4 	movi	r3,63
    7fdc:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
    7fe0:	e0bffe17 	ldw	r2,-8(fp)
    7fe4:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
    7fe8:	e0bffe17 	ldw	r2,-8(fp)
    7fec:	10800d04 	addi	r2,r2,52
    7ff0:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    7ff4:	e0bfff0b 	ldhu	r2,-4(fp)
    7ff8:	10800044 	addi	r2,r2,1
    7ffc:	e0bfff0d 	sth	r2,-4(fp)
    8000:	e0bfff0b 	ldhu	r2,-4(fp)
    8004:	10800ef0 	cmpltui	r2,r2,59
    8008:	103fea1e 	bne	r2,zero,7fb4 <__alt_mem_onchip_memory2_0+0xfc003fb4>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
    800c:	e0bffe17 	ldw	r2,-8(fp)
    8010:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
    8014:	e0bffe17 	ldw	r2,-8(fp)
    8018:	00c00fc4 	movi	r3,63
    801c:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
    8020:	e0bffe17 	ldw	r2,-8(fp)
    8024:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
    8028:	00800074 	movhi	r2,1
    802c:	10933a04 	addi	r2,r2,19688
    8030:	d0a74415 	stw	r2,-25328(gp)
#endif
}
    8034:	0001883a 	nop
    8038:	e037883a 	mov	sp,fp
    803c:	dfc00117 	ldw	ra,4(sp)
    8040:	df000017 	ldw	fp,0(sp)
    8044:	dec00204 	addi	sp,sp,8
    8048:	f800283a 	ret

0000804c <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
    804c:	defff804 	addi	sp,sp,-32
    8050:	df000715 	stw	fp,28(sp)
    8054:	df000704 	addi	fp,sp,28
    8058:	e13ffe15 	stw	r4,-8(fp)
    805c:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8060:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    8064:	e0bfff17 	ldw	r2,-4(fp)
    8068:	1000021e 	bne	r2,zero,8074 <OSQAccept+0x28>
        return ((void *)0);
    806c:	0005883a 	mov	r2,zero
    8070:	00004206 	br	817c <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    8074:	e0bffe17 	ldw	r2,-8(fp)
    8078:	1000051e 	bne	r2,zero,8090 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    807c:	e0bfff17 	ldw	r2,-4(fp)
    8080:	00c00104 	movi	r3,4
    8084:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8088:	0005883a 	mov	r2,zero
    808c:	00003b06 	br	817c <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    8090:	e0bffe17 	ldw	r2,-8(fp)
    8094:	10800003 	ldbu	r2,0(r2)
    8098:	10803fcc 	andi	r2,r2,255
    809c:	108000a0 	cmpeqi	r2,r2,2
    80a0:	1000051e 	bne	r2,zero,80b8 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    80a4:	e0bfff17 	ldw	r2,-4(fp)
    80a8:	00c00044 	movi	r3,1
    80ac:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    80b0:	0005883a 	mov	r2,zero
    80b4:	00003106 	br	817c <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    80b8:	0005303a 	rdctl	r2,status
    80bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    80c0:	e0fffd17 	ldw	r3,-12(fp)
    80c4:	00bfff84 	movi	r2,-2
    80c8:	1884703a 	and	r2,r3,r2
    80cc:	1001703a 	wrctl	status,r2
  
  return context;
    80d0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    80d4:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    80d8:	e0bffe17 	ldw	r2,-8(fp)
    80dc:	10800117 	ldw	r2,4(r2)
    80e0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    80e4:	e0bffc17 	ldw	r2,-16(fp)
    80e8:	1080058b 	ldhu	r2,22(r2)
    80ec:	10bfffcc 	andi	r2,r2,65535
    80f0:	10001926 	beq	r2,zero,8158 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    80f4:	e0bffc17 	ldw	r2,-16(fp)
    80f8:	10800417 	ldw	r2,16(r2)
    80fc:	11000104 	addi	r4,r2,4
    8100:	e0fffc17 	ldw	r3,-16(fp)
    8104:	19000415 	stw	r4,16(r3)
    8108:	10800017 	ldw	r2,0(r2)
    810c:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    8110:	e0bffc17 	ldw	r2,-16(fp)
    8114:	1080058b 	ldhu	r2,22(r2)
    8118:	10bfffc4 	addi	r2,r2,-1
    811c:	1007883a 	mov	r3,r2
    8120:	e0bffc17 	ldw	r2,-16(fp)
    8124:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    8128:	e0bffc17 	ldw	r2,-16(fp)
    812c:	10c00417 	ldw	r3,16(r2)
    8130:	e0bffc17 	ldw	r2,-16(fp)
    8134:	10800217 	ldw	r2,8(r2)
    8138:	1880041e 	bne	r3,r2,814c <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
    813c:	e0bffc17 	ldw	r2,-16(fp)
    8140:	10c00117 	ldw	r3,4(r2)
    8144:	e0bffc17 	ldw	r2,-16(fp)
    8148:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
    814c:	e0bfff17 	ldw	r2,-4(fp)
    8150:	10000005 	stb	zero,0(r2)
    8154:	00000406 	br	8168 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
    8158:	e0bfff17 	ldw	r2,-4(fp)
    815c:	00c007c4 	movi	r3,31
    8160:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
    8164:	e03ff915 	stw	zero,-28(fp)
    8168:	e0bffa17 	ldw	r2,-24(fp)
    816c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8170:	e0bffb17 	ldw	r2,-20(fp)
    8174:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
    8178:	e0bff917 	ldw	r2,-28(fp)
}
    817c:	e037883a 	mov	sp,fp
    8180:	df000017 	ldw	fp,0(sp)
    8184:	dec00104 	addi	sp,sp,4
    8188:	f800283a 	ret

0000818c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
    818c:	defff404 	addi	sp,sp,-48
    8190:	dfc00b15 	stw	ra,44(sp)
    8194:	df000a15 	stw	fp,40(sp)
    8198:	df000a04 	addi	fp,sp,40
    819c:	e13ffe15 	stw	r4,-8(fp)
    81a0:	2805883a 	mov	r2,r5
    81a4:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    81a8:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    81ac:	d0a74903 	ldbu	r2,-25308(gp)
    81b0:	10803fcc 	andi	r2,r2,255
    81b4:	10000226 	beq	r2,zero,81c0 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    81b8:	0005883a 	mov	r2,zero
    81bc:	00005906 	br	8324 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    81c0:	0005303a 	rdctl	r2,status
    81c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    81c8:	e0fffd17 	ldw	r3,-12(fp)
    81cc:	00bfff84 	movi	r2,-2
    81d0:	1884703a 	and	r2,r3,r2
    81d4:	1001703a 	wrctl	status,r2
  
  return context;
    81d8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    81dc:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    81e0:	d0a74817 	ldw	r2,-25312(gp)
    81e4:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    81e8:	d0a74817 	ldw	r2,-25312(gp)
    81ec:	10000326 	beq	r2,zero,81fc <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    81f0:	d0a74817 	ldw	r2,-25312(gp)
    81f4:	10800117 	ldw	r2,4(r2)
    81f8:	d0a74815 	stw	r2,-25312(gp)
    81fc:	e0bff717 	ldw	r2,-36(fp)
    8200:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8204:	e0bff817 	ldw	r2,-32(fp)
    8208:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
    820c:	e0bff617 	ldw	r2,-40(fp)
    8210:	10004326 	beq	r2,zero,8320 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8214:	0005303a 	rdctl	r2,status
    8218:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    821c:	e0fff917 	ldw	r3,-28(fp)
    8220:	00bfff84 	movi	r2,-2
    8224:	1884703a 	and	r2,r3,r2
    8228:	1001703a 	wrctl	status,r2
  
  return context;
    822c:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
    8230:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
    8234:	d0a74617 	ldw	r2,-25320(gp)
    8238:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
    823c:	e0bffb17 	ldw	r2,-20(fp)
    8240:	10002d26 	beq	r2,zero,82f8 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
    8244:	d0a74617 	ldw	r2,-25320(gp)
    8248:	10800017 	ldw	r2,0(r2)
    824c:	d0a74615 	stw	r2,-25320(gp)
    8250:	e0bff717 	ldw	r2,-36(fp)
    8254:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8258:	e0bffa17 	ldw	r2,-24(fp)
    825c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
    8260:	e0bffb17 	ldw	r2,-20(fp)
    8264:	e0fffe17 	ldw	r3,-8(fp)
    8268:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
    826c:	e0bfff0b 	ldhu	r2,-4(fp)
    8270:	1085883a 	add	r2,r2,r2
    8274:	1085883a 	add	r2,r2,r2
    8278:	1007883a 	mov	r3,r2
    827c:	e0bffe17 	ldw	r2,-8(fp)
    8280:	10c7883a 	add	r3,r2,r3
    8284:	e0bffb17 	ldw	r2,-20(fp)
    8288:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
    828c:	e0bffb17 	ldw	r2,-20(fp)
    8290:	e0fffe17 	ldw	r3,-8(fp)
    8294:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
    8298:	e0bffb17 	ldw	r2,-20(fp)
    829c:	e0fffe17 	ldw	r3,-8(fp)
    82a0:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
    82a4:	e0bffb17 	ldw	r2,-20(fp)
    82a8:	e0ffff0b 	ldhu	r3,-4(fp)
    82ac:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
    82b0:	e0bffb17 	ldw	r2,-20(fp)
    82b4:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
    82b8:	e0bff617 	ldw	r2,-40(fp)
    82bc:	00c00084 	movi	r3,2
    82c0:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
    82c4:	e0bff617 	ldw	r2,-40(fp)
    82c8:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
    82cc:	e0bff617 	ldw	r2,-40(fp)
    82d0:	e0fffb17 	ldw	r3,-20(fp)
    82d4:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
    82d8:	e0bff617 	ldw	r2,-40(fp)
    82dc:	00c00fc4 	movi	r3,63
    82e0:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
    82e4:	e0bff617 	ldw	r2,-40(fp)
    82e8:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
    82ec:	e13ff617 	ldw	r4,-40(fp)
    82f0:	00054e40 	call	54e4 <OS_EventWaitListInit>
    82f4:	00000a06 	br	8320 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
    82f8:	d0e74817 	ldw	r3,-25312(gp)
    82fc:	e0bff617 	ldw	r2,-40(fp)
    8300:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
    8304:	e0bff617 	ldw	r2,-40(fp)
    8308:	d0a74815 	stw	r2,-25312(gp)
    830c:	e0bff717 	ldw	r2,-36(fp)
    8310:	e0bffc15 	stw	r2,-16(fp)
    8314:	e0bffc17 	ldw	r2,-16(fp)
    8318:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
    831c:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
    8320:	e0bff617 	ldw	r2,-40(fp)
}
    8324:	e037883a 	mov	sp,fp
    8328:	dfc00117 	ldw	ra,4(sp)
    832c:	df000017 	ldw	fp,0(sp)
    8330:	dec00204 	addi	sp,sp,8
    8334:	f800283a 	ret

00008338 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    8338:	defff204 	addi	sp,sp,-56
    833c:	dfc00d15 	stw	ra,52(sp)
    8340:	df000c15 	stw	fp,48(sp)
    8344:	df000c04 	addi	fp,sp,48
    8348:	e13ffd15 	stw	r4,-12(fp)
    834c:	2805883a 	mov	r2,r5
    8350:	e1bfff15 	stw	r6,-4(fp)
    8354:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    8358:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    835c:	e0bfff17 	ldw	r2,-4(fp)
    8360:	1000021e 	bne	r2,zero,836c <OSQDel+0x34>
        return (pevent);
    8364:	e0bffd17 	ldw	r2,-12(fp)
    8368:	00008e06 	br	85a4 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    836c:	e0bffd17 	ldw	r2,-12(fp)
    8370:	1000051e 	bne	r2,zero,8388 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    8374:	e0bfff17 	ldw	r2,-4(fp)
    8378:	00c00104 	movi	r3,4
    837c:	10c00005 	stb	r3,0(r2)
        return (pevent);
    8380:	e0bffd17 	ldw	r2,-12(fp)
    8384:	00008706 	br	85a4 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    8388:	e0bffd17 	ldw	r2,-12(fp)
    838c:	10800003 	ldbu	r2,0(r2)
    8390:	10803fcc 	andi	r2,r2,255
    8394:	108000a0 	cmpeqi	r2,r2,2
    8398:	1000051e 	bne	r2,zero,83b0 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    839c:	e0bfff17 	ldw	r2,-4(fp)
    83a0:	00c00044 	movi	r3,1
    83a4:	10c00005 	stb	r3,0(r2)
        return (pevent);
    83a8:	e0bffd17 	ldw	r2,-12(fp)
    83ac:	00007d06 	br	85a4 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    83b0:	d0a74903 	ldbu	r2,-25308(gp)
    83b4:	10803fcc 	andi	r2,r2,255
    83b8:	10000526 	beq	r2,zero,83d0 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    83bc:	e0bfff17 	ldw	r2,-4(fp)
    83c0:	00c003c4 	movi	r3,15
    83c4:	10c00005 	stb	r3,0(r2)
        return (pevent);
    83c8:	e0bffd17 	ldw	r2,-12(fp)
    83cc:	00007506 	br	85a4 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    83d0:	0005303a 	rdctl	r2,status
    83d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    83d8:	e0fffc17 	ldw	r3,-16(fp)
    83dc:	00bfff84 	movi	r2,-2
    83e0:	1884703a 	and	r2,r3,r2
    83e4:	1001703a 	wrctl	status,r2
  
  return context;
    83e8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    83ec:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
    83f0:	e0bffd17 	ldw	r2,-12(fp)
    83f4:	10800283 	ldbu	r2,10(r2)
    83f8:	10803fcc 	andi	r2,r2,255
    83fc:	10000326 	beq	r2,zero,840c <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    8400:	00800044 	movi	r2,1
    8404:	e0bff405 	stb	r2,-48(fp)
    8408:	00000106 	br	8410 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    840c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    8410:	e0bffe03 	ldbu	r2,-8(fp)
    8414:	10000326 	beq	r2,zero,8424 <OSQDel+0xec>
    8418:	10800060 	cmpeqi	r2,r2,1
    841c:	1000301e 	bne	r2,zero,84e0 <OSQDel+0x1a8>
    8420:	00005506 	br	8578 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
    8424:	e0bff403 	ldbu	r2,-48(fp)
    8428:	10001e1e 	bne	r2,zero,84a4 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    842c:	e0bffd17 	ldw	r2,-12(fp)
    8430:	00c00fc4 	movi	r3,63
    8434:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    8438:	e0bffd17 	ldw	r2,-12(fp)
    843c:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
    8440:	e0bffd17 	ldw	r2,-12(fp)
    8444:	10800117 	ldw	r2,4(r2)
    8448:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
    844c:	d0e74617 	ldw	r3,-25320(gp)
    8450:	e0bff817 	ldw	r2,-32(fp)
    8454:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
    8458:	e0bff817 	ldw	r2,-32(fp)
    845c:	d0a74615 	stw	r2,-25320(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    8460:	e0bffd17 	ldw	r2,-12(fp)
    8464:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    8468:	d0e74817 	ldw	r3,-25312(gp)
    846c:	e0bffd17 	ldw	r2,-12(fp)
    8470:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    8474:	e0bffd17 	ldw	r2,-12(fp)
    8478:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    847c:	e0bffd17 	ldw	r2,-12(fp)
    8480:	d0a74815 	stw	r2,-25312(gp)
    8484:	e0bff617 	ldw	r2,-40(fp)
    8488:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    848c:	e0bff717 	ldw	r2,-36(fp)
    8490:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    8494:	e0bfff17 	ldw	r2,-4(fp)
    8498:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
    849c:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    84a0:	00003f06 	br	85a0 <OSQDel+0x268>
    84a4:	e0bff617 	ldw	r2,-40(fp)
    84a8:	e0bff915 	stw	r2,-28(fp)
    84ac:	e0bff917 	ldw	r2,-28(fp)
    84b0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    84b4:	e0bfff17 	ldw	r2,-4(fp)
    84b8:	00c01244 	movi	r3,73
    84bc:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    84c0:	e0bffd17 	ldw	r2,-12(fp)
    84c4:	e0bff515 	stw	r2,-44(fp)
             }
             break;
    84c8:	00003506 	br	85a0 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
    84cc:	000f883a 	mov	r7,zero
    84d0:	01800104 	movi	r6,4
    84d4:	000b883a 	mov	r5,zero
    84d8:	e13ffd17 	ldw	r4,-12(fp)
    84dc:	0004f340 	call	4f34 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
    84e0:	e0bffd17 	ldw	r2,-12(fp)
    84e4:	10800283 	ldbu	r2,10(r2)
    84e8:	10803fcc 	andi	r2,r2,255
    84ec:	103ff71e 	bne	r2,zero,84cc <__alt_mem_onchip_memory2_0+0xfc0044cc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    84f0:	e0bffd17 	ldw	r2,-12(fp)
    84f4:	00c00fc4 	movi	r3,63
    84f8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    84fc:	e0bffd17 	ldw	r2,-12(fp)
    8500:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
    8504:	e0bffd17 	ldw	r2,-12(fp)
    8508:	10800117 	ldw	r2,4(r2)
    850c:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
    8510:	d0e74617 	ldw	r3,-25320(gp)
    8514:	e0bff817 	ldw	r2,-32(fp)
    8518:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
    851c:	e0bff817 	ldw	r2,-32(fp)
    8520:	d0a74615 	stw	r2,-25320(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    8524:	e0bffd17 	ldw	r2,-12(fp)
    8528:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    852c:	d0e74817 	ldw	r3,-25312(gp)
    8530:	e0bffd17 	ldw	r2,-12(fp)
    8534:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    8538:	e0bffd17 	ldw	r2,-12(fp)
    853c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    8540:	e0bffd17 	ldw	r2,-12(fp)
    8544:	d0a74815 	stw	r2,-25312(gp)
    8548:	e0bff617 	ldw	r2,-40(fp)
    854c:	e0bffa15 	stw	r2,-24(fp)
    8550:	e0bffa17 	ldw	r2,-24(fp)
    8554:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    8558:	e0bff403 	ldbu	r2,-48(fp)
    855c:	10800058 	cmpnei	r2,r2,1
    8560:	1000011e 	bne	r2,zero,8568 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    8564:	00059800 	call	5980 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    8568:	e0bfff17 	ldw	r2,-4(fp)
    856c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
    8570:	e03ff515 	stw	zero,-44(fp)
             break;
    8574:	00000a06 	br	85a0 <OSQDel+0x268>
    8578:	e0bff617 	ldw	r2,-40(fp)
    857c:	e0bffb15 	stw	r2,-20(fp)
    8580:	e0bffb17 	ldw	r2,-20(fp)
    8584:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    8588:	e0bfff17 	ldw	r2,-4(fp)
    858c:	00c001c4 	movi	r3,7
    8590:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    8594:	e0bffd17 	ldw	r2,-12(fp)
    8598:	e0bff515 	stw	r2,-44(fp)
             break;
    859c:	0001883a 	nop
    }
    return (pevent_return);
    85a0:	e0bff517 	ldw	r2,-44(fp)
}
    85a4:	e037883a 	mov	sp,fp
    85a8:	dfc00117 	ldw	ra,4(sp)
    85ac:	df000017 	ldw	fp,0(sp)
    85b0:	dec00204 	addi	sp,sp,8
    85b4:	f800283a 	ret

000085b8 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
    85b8:	defffa04 	addi	sp,sp,-24
    85bc:	df000515 	stw	fp,20(sp)
    85c0:	df000504 	addi	fp,sp,20
    85c4:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    85c8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    85cc:	e0bfff17 	ldw	r2,-4(fp)
    85d0:	1000021e 	bne	r2,zero,85dc <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
    85d4:	00800104 	movi	r2,4
    85d8:	00002106 	br	8660 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    85dc:	e0bfff17 	ldw	r2,-4(fp)
    85e0:	10800003 	ldbu	r2,0(r2)
    85e4:	10803fcc 	andi	r2,r2,255
    85e8:	108000a0 	cmpeqi	r2,r2,2
    85ec:	1000021e 	bne	r2,zero,85f8 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
    85f0:	00800044 	movi	r2,1
    85f4:	00001a06 	br	8660 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    85f8:	0005303a 	rdctl	r2,status
    85fc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8600:	e0fffd17 	ldw	r3,-12(fp)
    8604:	00bfff84 	movi	r2,-2
    8608:	1884703a 	and	r2,r3,r2
    860c:	1001703a 	wrctl	status,r2
  
  return context;
    8610:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    8614:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
    8618:	e0bfff17 	ldw	r2,-4(fp)
    861c:	10800117 	ldw	r2,4(r2)
    8620:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
    8624:	e0bffc17 	ldw	r2,-16(fp)
    8628:	10c00117 	ldw	r3,4(r2)
    862c:	e0bffc17 	ldw	r2,-16(fp)
    8630:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
    8634:	e0bffc17 	ldw	r2,-16(fp)
    8638:	10c00117 	ldw	r3,4(r2)
    863c:	e0bffc17 	ldw	r2,-16(fp)
    8640:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
    8644:	e0bffc17 	ldw	r2,-16(fp)
    8648:	1000058d 	sth	zero,22(r2)
    864c:	e0bffb17 	ldw	r2,-20(fp)
    8650:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8654:	e0bffe17 	ldw	r2,-8(fp)
    8658:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    865c:	0005883a 	mov	r2,zero
}
    8660:	e037883a 	mov	sp,fp
    8664:	df000017 	ldw	fp,0(sp)
    8668:	dec00104 	addi	sp,sp,4
    866c:	f800283a 	ret

00008670 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    8670:	defff304 	addi	sp,sp,-52
    8674:	dfc00c15 	stw	ra,48(sp)
    8678:	df000b15 	stw	fp,44(sp)
    867c:	df000b04 	addi	fp,sp,44
    8680:	e13ffd15 	stw	r4,-12(fp)
    8684:	2805883a 	mov	r2,r5
    8688:	e1bfff15 	stw	r6,-4(fp)
    868c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8690:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    8694:	e0bfff17 	ldw	r2,-4(fp)
    8698:	1000021e 	bne	r2,zero,86a4 <OSQPend+0x34>
        return ((void *)0);
    869c:	0005883a 	mov	r2,zero
    86a0:	00009106 	br	88e8 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    86a4:	e0bffd17 	ldw	r2,-12(fp)
    86a8:	1000051e 	bne	r2,zero,86c0 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    86ac:	e0bfff17 	ldw	r2,-4(fp)
    86b0:	00c00104 	movi	r3,4
    86b4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    86b8:	0005883a 	mov	r2,zero
    86bc:	00008a06 	br	88e8 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    86c0:	e0bffd17 	ldw	r2,-12(fp)
    86c4:	10800003 	ldbu	r2,0(r2)
    86c8:	10803fcc 	andi	r2,r2,255
    86cc:	108000a0 	cmpeqi	r2,r2,2
    86d0:	1000051e 	bne	r2,zero,86e8 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    86d4:	e0bfff17 	ldw	r2,-4(fp)
    86d8:	00c00044 	movi	r3,1
    86dc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    86e0:	0005883a 	mov	r2,zero
    86e4:	00008006 	br	88e8 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    86e8:	d0a74903 	ldbu	r2,-25308(gp)
    86ec:	10803fcc 	andi	r2,r2,255
    86f0:	10000526 	beq	r2,zero,8708 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
    86f4:	e0bfff17 	ldw	r2,-4(fp)
    86f8:	00c00084 	movi	r3,2
    86fc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8700:	0005883a 	mov	r2,zero
    8704:	00007806 	br	88e8 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
    8708:	d0a73b03 	ldbu	r2,-25364(gp)
    870c:	10803fcc 	andi	r2,r2,255
    8710:	10000526 	beq	r2,zero,8728 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
    8714:	e0bfff17 	ldw	r2,-4(fp)
    8718:	00c00344 	movi	r3,13
    871c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8720:	0005883a 	mov	r2,zero
    8724:	00007006 	br	88e8 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8728:	0005303a 	rdctl	r2,status
    872c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8730:	e0fffc17 	ldw	r3,-16(fp)
    8734:	00bfff84 	movi	r2,-2
    8738:	1884703a 	and	r2,r3,r2
    873c:	1001703a 	wrctl	status,r2
  
  return context;
    8740:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8744:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    8748:	e0bffd17 	ldw	r2,-12(fp)
    874c:	10800117 	ldw	r2,4(r2)
    8750:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    8754:	e0bff817 	ldw	r2,-32(fp)
    8758:	1080058b 	ldhu	r2,22(r2)
    875c:	10bfffcc 	andi	r2,r2,65535
    8760:	10001e26 	beq	r2,zero,87dc <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    8764:	e0bff817 	ldw	r2,-32(fp)
    8768:	10800417 	ldw	r2,16(r2)
    876c:	11000104 	addi	r4,r2,4
    8770:	e0fff817 	ldw	r3,-32(fp)
    8774:	19000415 	stw	r4,16(r3)
    8778:	10800017 	ldw	r2,0(r2)
    877c:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    8780:	e0bff817 	ldw	r2,-32(fp)
    8784:	1080058b 	ldhu	r2,22(r2)
    8788:	10bfffc4 	addi	r2,r2,-1
    878c:	1007883a 	mov	r3,r2
    8790:	e0bff817 	ldw	r2,-32(fp)
    8794:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    8798:	e0bff817 	ldw	r2,-32(fp)
    879c:	10c00417 	ldw	r3,16(r2)
    87a0:	e0bff817 	ldw	r2,-32(fp)
    87a4:	10800217 	ldw	r2,8(r2)
    87a8:	1880041e 	bne	r3,r2,87bc <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
    87ac:	e0bff817 	ldw	r2,-32(fp)
    87b0:	10c00117 	ldw	r3,4(r2)
    87b4:	e0bff817 	ldw	r2,-32(fp)
    87b8:	10c00415 	stw	r3,16(r2)
    87bc:	e0bff617 	ldw	r2,-40(fp)
    87c0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    87c4:	e0bff717 	ldw	r2,-36(fp)
    87c8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    87cc:	e0bfff17 	ldw	r2,-4(fp)
    87d0:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
    87d4:	e0bff517 	ldw	r2,-44(fp)
    87d8:	00004306 	br	88e8 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
    87dc:	d0a74a17 	ldw	r2,-25304(gp)
    87e0:	d0e74a17 	ldw	r3,-25304(gp)
    87e4:	18c00c03 	ldbu	r3,48(r3)
    87e8:	18c00114 	ori	r3,r3,4
    87ec:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    87f0:	d0a74a17 	ldw	r2,-25304(gp)
    87f4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
    87f8:	d0a74a17 	ldw	r2,-25304(gp)
    87fc:	e0fffe0b 	ldhu	r3,-8(fp)
    8800:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
    8804:	e13ffd17 	ldw	r4,-12(fp)
    8808:	00050cc0 	call	50cc <OS_EventTaskWait>
    880c:	e0bff617 	ldw	r2,-40(fp)
    8810:	e0bffb15 	stw	r2,-20(fp)
    8814:	e0bffb17 	ldw	r2,-20(fp)
    8818:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    881c:	00059800 	call	5980 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8820:	0005303a 	rdctl	r2,status
    8824:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8828:	e0fff917 	ldw	r3,-28(fp)
    882c:	00bfff84 	movi	r2,-2
    8830:	1884703a 	and	r2,r3,r2
    8834:	1001703a 	wrctl	status,r2
  
  return context;
    8838:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    883c:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    8840:	d0a74a17 	ldw	r2,-25304(gp)
    8844:	10800c43 	ldbu	r2,49(r2)
    8848:	10803fcc 	andi	r2,r2,255
    884c:	10000326 	beq	r2,zero,885c <OSQPend+0x1ec>
    8850:	108000a0 	cmpeqi	r2,r2,2
    8854:	1000071e 	bne	r2,zero,8874 <OSQPend+0x204>
    8858:	00000b06 	br	8888 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
    885c:	d0a74a17 	ldw	r2,-25304(gp)
    8860:	10800917 	ldw	r2,36(r2)
    8864:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
    8868:	e0bfff17 	ldw	r2,-4(fp)
    886c:	10000005 	stb	zero,0(r2)
             break;
    8870:	00000e06 	br	88ac <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    8874:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    8878:	e0bfff17 	ldw	r2,-4(fp)
    887c:	00c00384 	movi	r3,14
    8880:	10c00005 	stb	r3,0(r2)
             break;
    8884:	00000906 	br	88ac <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    8888:	d0a74a17 	ldw	r2,-25304(gp)
    888c:	e17ffd17 	ldw	r5,-12(fp)
    8890:	1009883a 	mov	r4,r2
    8894:	000532c0 	call	532c <OS_EventTaskRemove>
             pmsg = (void *)0;
    8898:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    889c:	e0bfff17 	ldw	r2,-4(fp)
    88a0:	00c00284 	movi	r3,10
    88a4:	10c00005 	stb	r3,0(r2)
             break;
    88a8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    88ac:	d0a74a17 	ldw	r2,-25304(gp)
    88b0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    88b4:	d0a74a17 	ldw	r2,-25304(gp)
    88b8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    88bc:	d0a74a17 	ldw	r2,-25304(gp)
    88c0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    88c4:	d0a74a17 	ldw	r2,-25304(gp)
    88c8:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    88cc:	d0a74a17 	ldw	r2,-25304(gp)
    88d0:	10000915 	stw	zero,36(r2)
    88d4:	e0bff617 	ldw	r2,-40(fp)
    88d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    88dc:	e0bffa17 	ldw	r2,-24(fp)
    88e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
    88e4:	e0bff517 	ldw	r2,-44(fp)
}
    88e8:	e037883a 	mov	sp,fp
    88ec:	dfc00117 	ldw	ra,4(sp)
    88f0:	df000017 	ldw	fp,0(sp)
    88f4:	dec00204 	addi	sp,sp,8
    88f8:	f800283a 	ret

000088fc <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    88fc:	defff604 	addi	sp,sp,-40
    8900:	dfc00915 	stw	ra,36(sp)
    8904:	df000815 	stw	fp,32(sp)
    8908:	df000804 	addi	fp,sp,32
    890c:	e13ffd15 	stw	r4,-12(fp)
    8910:	2805883a 	mov	r2,r5
    8914:	e1bfff15 	stw	r6,-4(fp)
    8918:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    891c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    8920:	e0bfff17 	ldw	r2,-4(fp)
    8924:	1000021e 	bne	r2,zero,8930 <OSQPendAbort+0x34>
        return (0);
    8928:	0005883a 	mov	r2,zero
    892c:	00004906 	br	8a54 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    8930:	e0bffd17 	ldw	r2,-12(fp)
    8934:	1000051e 	bne	r2,zero,894c <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    8938:	e0bfff17 	ldw	r2,-4(fp)
    893c:	00c00104 	movi	r3,4
    8940:	10c00005 	stb	r3,0(r2)
        return (0);
    8944:	0005883a 	mov	r2,zero
    8948:	00004206 	br	8a54 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    894c:	e0bffd17 	ldw	r2,-12(fp)
    8950:	10800003 	ldbu	r2,0(r2)
    8954:	10803fcc 	andi	r2,r2,255
    8958:	108000a0 	cmpeqi	r2,r2,2
    895c:	1000051e 	bne	r2,zero,8974 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    8960:	e0bfff17 	ldw	r2,-4(fp)
    8964:	00c00044 	movi	r3,1
    8968:	10c00005 	stb	r3,0(r2)
        return (0);
    896c:	0005883a 	mov	r2,zero
    8970:	00003806 	br	8a54 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8974:	0005303a 	rdctl	r2,status
    8978:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    897c:	e0fffc17 	ldw	r3,-16(fp)
    8980:	00bfff84 	movi	r2,-2
    8984:	1884703a 	and	r2,r3,r2
    8988:	1001703a 	wrctl	status,r2
  
  return context;
    898c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8990:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
    8994:	e0bffd17 	ldw	r2,-12(fp)
    8998:	10800283 	ldbu	r2,10(r2)
    899c:	10803fcc 	andi	r2,r2,255
    89a0:	10002526 	beq	r2,zero,8a38 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
    89a4:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    89a8:	e0bffe03 	ldbu	r2,-8(fp)
    89ac:	10800060 	cmpeqi	r2,r2,1
    89b0:	10000e26 	beq	r2,zero,89ec <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    89b4:	00000806 	br	89d8 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    89b8:	01c00084 	movi	r7,2
    89bc:	01800104 	movi	r6,4
    89c0:	000b883a 	mov	r5,zero
    89c4:	e13ffd17 	ldw	r4,-12(fp)
    89c8:	0004f340 	call	4f34 <OS_EventTaskRdy>
                     nbr_tasks++;
    89cc:	e0bff803 	ldbu	r2,-32(fp)
    89d0:	10800044 	addi	r2,r2,1
    89d4:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    89d8:	e0bffd17 	ldw	r2,-12(fp)
    89dc:	10800283 	ldbu	r2,10(r2)
    89e0:	10803fcc 	andi	r2,r2,255
    89e4:	103ff41e 	bne	r2,zero,89b8 <__alt_mem_onchip_memory2_0+0xfc0049b8>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    89e8:	00000906 	br	8a10 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    89ec:	01c00084 	movi	r7,2
    89f0:	01800104 	movi	r6,4
    89f4:	000b883a 	mov	r5,zero
    89f8:	e13ffd17 	ldw	r4,-12(fp)
    89fc:	0004f340 	call	4f34 <OS_EventTaskRdy>
                 nbr_tasks++;
    8a00:	e0bff803 	ldbu	r2,-32(fp)
    8a04:	10800044 	addi	r2,r2,1
    8a08:	e0bff805 	stb	r2,-32(fp)
                 break;
    8a0c:	0001883a 	nop
    8a10:	e0bff917 	ldw	r2,-28(fp)
    8a14:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8a18:	e0bffa17 	ldw	r2,-24(fp)
    8a1c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
    8a20:	00059800 	call	5980 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    8a24:	e0bfff17 	ldw	r2,-4(fp)
    8a28:	00c00384 	movi	r3,14
    8a2c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    8a30:	e0bff803 	ldbu	r2,-32(fp)
    8a34:	00000706 	br	8a54 <OSQPendAbort+0x158>
    8a38:	e0bff917 	ldw	r2,-28(fp)
    8a3c:	e0bffb15 	stw	r2,-20(fp)
    8a40:	e0bffb17 	ldw	r2,-20(fp)
    8a44:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    8a48:	e0bfff17 	ldw	r2,-4(fp)
    8a4c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
    8a50:	0005883a 	mov	r2,zero
}
    8a54:	e037883a 	mov	sp,fp
    8a58:	dfc00117 	ldw	ra,4(sp)
    8a5c:	df000017 	ldw	fp,0(sp)
    8a60:	dec00204 	addi	sp,sp,8
    8a64:	f800283a 	ret

00008a68 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
    8a68:	defff604 	addi	sp,sp,-40
    8a6c:	dfc00915 	stw	ra,36(sp)
    8a70:	df000815 	stw	fp,32(sp)
    8a74:	df000804 	addi	fp,sp,32
    8a78:	e13ffe15 	stw	r4,-8(fp)
    8a7c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    8a80:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    8a84:	e0bffe17 	ldw	r2,-8(fp)
    8a88:	1000021e 	bne	r2,zero,8a94 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
    8a8c:	00800104 	movi	r2,4
    8a90:	00004a06 	br	8bbc <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    8a94:	e0bffe17 	ldw	r2,-8(fp)
    8a98:	10800003 	ldbu	r2,0(r2)
    8a9c:	10803fcc 	andi	r2,r2,255
    8aa0:	108000a0 	cmpeqi	r2,r2,2
    8aa4:	1000021e 	bne	r2,zero,8ab0 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
    8aa8:	00800044 	movi	r2,1
    8aac:	00004306 	br	8bbc <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8ab0:	0005303a 	rdctl	r2,status
    8ab4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8ab8:	e0fffd17 	ldw	r3,-12(fp)
    8abc:	00bfff84 	movi	r2,-2
    8ac0:	1884703a 	and	r2,r3,r2
    8ac4:	1001703a 	wrctl	status,r2
  
  return context;
    8ac8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    8acc:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
    8ad0:	e0bffe17 	ldw	r2,-8(fp)
    8ad4:	10800283 	ldbu	r2,10(r2)
    8ad8:	10803fcc 	andi	r2,r2,255
    8adc:	10000c26 	beq	r2,zero,8b10 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    8ae0:	000f883a 	mov	r7,zero
    8ae4:	01800104 	movi	r6,4
    8ae8:	e17fff17 	ldw	r5,-4(fp)
    8aec:	e13ffe17 	ldw	r4,-8(fp)
    8af0:	0004f340 	call	4f34 <OS_EventTaskRdy>
    8af4:	e0bff817 	ldw	r2,-32(fp)
    8af8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8afc:	e0bff917 	ldw	r2,-28(fp)
    8b00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
    8b04:	00059800 	call	5980 <OS_Sched>
        return (OS_ERR_NONE);
    8b08:	0005883a 	mov	r2,zero
    8b0c:	00002b06 	br	8bbc <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    8b10:	e0bffe17 	ldw	r2,-8(fp)
    8b14:	10800117 	ldw	r2,4(r2)
    8b18:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
    8b1c:	e0bffb17 	ldw	r2,-20(fp)
    8b20:	10c0058b 	ldhu	r3,22(r2)
    8b24:	e0bffb17 	ldw	r2,-20(fp)
    8b28:	1080050b 	ldhu	r2,20(r2)
    8b2c:	18ffffcc 	andi	r3,r3,65535
    8b30:	10bfffcc 	andi	r2,r2,65535
    8b34:	18800636 	bltu	r3,r2,8b50 <OSQPost+0xe8>
    8b38:	e0bff817 	ldw	r2,-32(fp)
    8b3c:	e0bffa15 	stw	r2,-24(fp)
    8b40:	e0bffa17 	ldw	r2,-24(fp)
    8b44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    8b48:	00800784 	movi	r2,30
    8b4c:	00001b06 	br	8bbc <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
    8b50:	e0bffb17 	ldw	r2,-20(fp)
    8b54:	10800317 	ldw	r2,12(r2)
    8b58:	11000104 	addi	r4,r2,4
    8b5c:	e0fffb17 	ldw	r3,-20(fp)
    8b60:	19000315 	stw	r4,12(r3)
    8b64:	e0ffff17 	ldw	r3,-4(fp)
    8b68:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    8b6c:	e0bffb17 	ldw	r2,-20(fp)
    8b70:	1080058b 	ldhu	r2,22(r2)
    8b74:	10800044 	addi	r2,r2,1
    8b78:	1007883a 	mov	r3,r2
    8b7c:	e0bffb17 	ldw	r2,-20(fp)
    8b80:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
    8b84:	e0bffb17 	ldw	r2,-20(fp)
    8b88:	10c00317 	ldw	r3,12(r2)
    8b8c:	e0bffb17 	ldw	r2,-20(fp)
    8b90:	10800217 	ldw	r2,8(r2)
    8b94:	1880041e 	bne	r3,r2,8ba8 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
    8b98:	e0bffb17 	ldw	r2,-20(fp)
    8b9c:	10c00117 	ldw	r3,4(r2)
    8ba0:	e0bffb17 	ldw	r2,-20(fp)
    8ba4:	10c00315 	stw	r3,12(r2)
    8ba8:	e0bff817 	ldw	r2,-32(fp)
    8bac:	e0bffc15 	stw	r2,-16(fp)
    8bb0:	e0bffc17 	ldw	r2,-16(fp)
    8bb4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8bb8:	0005883a 	mov	r2,zero
}
    8bbc:	e037883a 	mov	sp,fp
    8bc0:	dfc00117 	ldw	ra,4(sp)
    8bc4:	df000017 	ldw	fp,0(sp)
    8bc8:	dec00204 	addi	sp,sp,8
    8bcc:	f800283a 	ret

00008bd0 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
    8bd0:	defff604 	addi	sp,sp,-40
    8bd4:	dfc00915 	stw	ra,36(sp)
    8bd8:	df000815 	stw	fp,32(sp)
    8bdc:	df000804 	addi	fp,sp,32
    8be0:	e13ffe15 	stw	r4,-8(fp)
    8be4:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8be8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8bec:	e0bffe17 	ldw	r2,-8(fp)
    8bf0:	1000021e 	bne	r2,zero,8bfc <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
    8bf4:	00800104 	movi	r2,4
    8bf8:	00004c06 	br	8d2c <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    8bfc:	e0bffe17 	ldw	r2,-8(fp)
    8c00:	10800003 	ldbu	r2,0(r2)
    8c04:	10803fcc 	andi	r2,r2,255
    8c08:	108000a0 	cmpeqi	r2,r2,2
    8c0c:	1000021e 	bne	r2,zero,8c18 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
    8c10:	00800044 	movi	r2,1
    8c14:	00004506 	br	8d2c <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8c18:	0005303a 	rdctl	r2,status
    8c1c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8c20:	e0fffd17 	ldw	r3,-12(fp)
    8c24:	00bfff84 	movi	r2,-2
    8c28:	1884703a 	and	r2,r3,r2
    8c2c:	1001703a 	wrctl	status,r2
  
  return context;
    8c30:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    8c34:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
    8c38:	e0bffe17 	ldw	r2,-8(fp)
    8c3c:	10800283 	ldbu	r2,10(r2)
    8c40:	10803fcc 	andi	r2,r2,255
    8c44:	10000c26 	beq	r2,zero,8c78 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    8c48:	000f883a 	mov	r7,zero
    8c4c:	01800104 	movi	r6,4
    8c50:	e17fff17 	ldw	r5,-4(fp)
    8c54:	e13ffe17 	ldw	r4,-8(fp)
    8c58:	0004f340 	call	4f34 <OS_EventTaskRdy>
    8c5c:	e0bff817 	ldw	r2,-32(fp)
    8c60:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8c64:	e0bff917 	ldw	r2,-28(fp)
    8c68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
    8c6c:	00059800 	call	5980 <OS_Sched>
        return (OS_ERR_NONE);
    8c70:	0005883a 	mov	r2,zero
    8c74:	00002d06 	br	8d2c <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    8c78:	e0bffe17 	ldw	r2,-8(fp)
    8c7c:	10800117 	ldw	r2,4(r2)
    8c80:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    8c84:	e0bffb17 	ldw	r2,-20(fp)
    8c88:	10c0058b 	ldhu	r3,22(r2)
    8c8c:	e0bffb17 	ldw	r2,-20(fp)
    8c90:	1080050b 	ldhu	r2,20(r2)
    8c94:	18ffffcc 	andi	r3,r3,65535
    8c98:	10bfffcc 	andi	r2,r2,65535
    8c9c:	18800636 	bltu	r3,r2,8cb8 <OSQPostFront+0xe8>
    8ca0:	e0bff817 	ldw	r2,-32(fp)
    8ca4:	e0bffa15 	stw	r2,-24(fp)
    8ca8:	e0bffa17 	ldw	r2,-24(fp)
    8cac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    8cb0:	00800784 	movi	r2,30
    8cb4:	00001d06 	br	8d2c <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
    8cb8:	e0bffb17 	ldw	r2,-20(fp)
    8cbc:	10c00417 	ldw	r3,16(r2)
    8cc0:	e0bffb17 	ldw	r2,-20(fp)
    8cc4:	10800117 	ldw	r2,4(r2)
    8cc8:	1880041e 	bne	r3,r2,8cdc <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
    8ccc:	e0bffb17 	ldw	r2,-20(fp)
    8cd0:	10c00217 	ldw	r3,8(r2)
    8cd4:	e0bffb17 	ldw	r2,-20(fp)
    8cd8:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
    8cdc:	e0bffb17 	ldw	r2,-20(fp)
    8ce0:	10800417 	ldw	r2,16(r2)
    8ce4:	10ffff04 	addi	r3,r2,-4
    8ce8:	e0bffb17 	ldw	r2,-20(fp)
    8cec:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    8cf0:	e0bffb17 	ldw	r2,-20(fp)
    8cf4:	10800417 	ldw	r2,16(r2)
    8cf8:	e0ffff17 	ldw	r3,-4(fp)
    8cfc:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    8d00:	e0bffb17 	ldw	r2,-20(fp)
    8d04:	1080058b 	ldhu	r2,22(r2)
    8d08:	10800044 	addi	r2,r2,1
    8d0c:	1007883a 	mov	r3,r2
    8d10:	e0bffb17 	ldw	r2,-20(fp)
    8d14:	10c0058d 	sth	r3,22(r2)
    8d18:	e0bff817 	ldw	r2,-32(fp)
    8d1c:	e0bffc15 	stw	r2,-16(fp)
    8d20:	e0bffc17 	ldw	r2,-16(fp)
    8d24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8d28:	0005883a 	mov	r2,zero
}
    8d2c:	e037883a 	mov	sp,fp
    8d30:	dfc00117 	ldw	ra,4(sp)
    8d34:	df000017 	ldw	fp,0(sp)
    8d38:	dec00204 	addi	sp,sp,8
    8d3c:	f800283a 	ret

00008d40 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
    8d40:	defff504 	addi	sp,sp,-44
    8d44:	dfc00a15 	stw	ra,40(sp)
    8d48:	df000915 	stw	fp,36(sp)
    8d4c:	df000904 	addi	fp,sp,36
    8d50:	e13ffd15 	stw	r4,-12(fp)
    8d54:	e17ffe15 	stw	r5,-8(fp)
    8d58:	3005883a 	mov	r2,r6
    8d5c:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8d60:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8d64:	e0bffd17 	ldw	r2,-12(fp)
    8d68:	1000021e 	bne	r2,zero,8d74 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
    8d6c:	00800104 	movi	r2,4
    8d70:	00007106 	br	8f38 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    8d74:	e0bffd17 	ldw	r2,-12(fp)
    8d78:	10800003 	ldbu	r2,0(r2)
    8d7c:	10803fcc 	andi	r2,r2,255
    8d80:	108000a0 	cmpeqi	r2,r2,2
    8d84:	1000021e 	bne	r2,zero,8d90 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
    8d88:	00800044 	movi	r2,1
    8d8c:	00006a06 	br	8f38 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8d90:	0005303a 	rdctl	r2,status
    8d94:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8d98:	e0fffc17 	ldw	r3,-16(fp)
    8d9c:	00bfff84 	movi	r2,-2
    8da0:	1884703a 	and	r2,r3,r2
    8da4:	1001703a 	wrctl	status,r2
  
  return context;
    8da8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8dac:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
    8db0:	e0bffd17 	ldw	r2,-12(fp)
    8db4:	10800283 	ldbu	r2,10(r2)
    8db8:	10803fcc 	andi	r2,r2,255
    8dbc:	10001d26 	beq	r2,zero,8e34 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    8dc0:	e0bfff03 	ldbu	r2,-4(fp)
    8dc4:	1080004c 	andi	r2,r2,1
    8dc8:	10000b26 	beq	r2,zero,8df8 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    8dcc:	00000506 	br	8de4 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    8dd0:	000f883a 	mov	r7,zero
    8dd4:	01800104 	movi	r6,4
    8dd8:	e17ffe17 	ldw	r5,-8(fp)
    8ddc:	e13ffd17 	ldw	r4,-12(fp)
    8de0:	0004f340 	call	4f34 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    8de4:	e0bffd17 	ldw	r2,-12(fp)
    8de8:	10800283 	ldbu	r2,10(r2)
    8dec:	10803fcc 	andi	r2,r2,255
    8df0:	103ff71e 	bne	r2,zero,8dd0 <__alt_mem_onchip_memory2_0+0xfc004dd0>
    8df4:	00000506 	br	8e0c <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    8df8:	000f883a 	mov	r7,zero
    8dfc:	01800104 	movi	r6,4
    8e00:	e17ffe17 	ldw	r5,-8(fp)
    8e04:	e13ffd17 	ldw	r4,-12(fp)
    8e08:	0004f340 	call	4f34 <OS_EventTaskRdy>
    8e0c:	e0bff717 	ldw	r2,-36(fp)
    8e10:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8e14:	e0bff817 	ldw	r2,-32(fp)
    8e18:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
    8e1c:	e0bfff03 	ldbu	r2,-4(fp)
    8e20:	1080010c 	andi	r2,r2,4
    8e24:	1000011e 	bne	r2,zero,8e2c <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
    8e28:	00059800 	call	5980 <OS_Sched>
        }
        return (OS_ERR_NONE);
    8e2c:	0005883a 	mov	r2,zero
    8e30:	00004106 	br	8f38 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    8e34:	e0bffd17 	ldw	r2,-12(fp)
    8e38:	10800117 	ldw	r2,4(r2)
    8e3c:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    8e40:	e0bffa17 	ldw	r2,-24(fp)
    8e44:	10c0058b 	ldhu	r3,22(r2)
    8e48:	e0bffa17 	ldw	r2,-24(fp)
    8e4c:	1080050b 	ldhu	r2,20(r2)
    8e50:	18ffffcc 	andi	r3,r3,65535
    8e54:	10bfffcc 	andi	r2,r2,65535
    8e58:	18800636 	bltu	r3,r2,8e74 <OSQPostOpt+0x134>
    8e5c:	e0bff717 	ldw	r2,-36(fp)
    8e60:	e0bff915 	stw	r2,-28(fp)
    8e64:	e0bff917 	ldw	r2,-28(fp)
    8e68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    8e6c:	00800784 	movi	r2,30
    8e70:	00003106 	br	8f38 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
    8e74:	e0bfff03 	ldbu	r2,-4(fp)
    8e78:	1080008c 	andi	r2,r2,2
    8e7c:	10001326 	beq	r2,zero,8ecc <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
    8e80:	e0bffa17 	ldw	r2,-24(fp)
    8e84:	10c00417 	ldw	r3,16(r2)
    8e88:	e0bffa17 	ldw	r2,-24(fp)
    8e8c:	10800117 	ldw	r2,4(r2)
    8e90:	1880041e 	bne	r3,r2,8ea4 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
    8e94:	e0bffa17 	ldw	r2,-24(fp)
    8e98:	10c00217 	ldw	r3,8(r2)
    8e9c:	e0bffa17 	ldw	r2,-24(fp)
    8ea0:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
    8ea4:	e0bffa17 	ldw	r2,-24(fp)
    8ea8:	10800417 	ldw	r2,16(r2)
    8eac:	10ffff04 	addi	r3,r2,-4
    8eb0:	e0bffa17 	ldw	r2,-24(fp)
    8eb4:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
    8eb8:	e0bffa17 	ldw	r2,-24(fp)
    8ebc:	10800417 	ldw	r2,16(r2)
    8ec0:	e0fffe17 	ldw	r3,-8(fp)
    8ec4:	10c00015 	stw	r3,0(r2)
    8ec8:	00001006 	br	8f0c <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
    8ecc:	e0bffa17 	ldw	r2,-24(fp)
    8ed0:	10800317 	ldw	r2,12(r2)
    8ed4:	11000104 	addi	r4,r2,4
    8ed8:	e0fffa17 	ldw	r3,-24(fp)
    8edc:	19000315 	stw	r4,12(r3)
    8ee0:	e0fffe17 	ldw	r3,-8(fp)
    8ee4:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
    8ee8:	e0bffa17 	ldw	r2,-24(fp)
    8eec:	10c00317 	ldw	r3,12(r2)
    8ef0:	e0bffa17 	ldw	r2,-24(fp)
    8ef4:	10800217 	ldw	r2,8(r2)
    8ef8:	1880041e 	bne	r3,r2,8f0c <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
    8efc:	e0bffa17 	ldw	r2,-24(fp)
    8f00:	10c00117 	ldw	r3,4(r2)
    8f04:	e0bffa17 	ldw	r2,-24(fp)
    8f08:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    8f0c:	e0bffa17 	ldw	r2,-24(fp)
    8f10:	1080058b 	ldhu	r2,22(r2)
    8f14:	10800044 	addi	r2,r2,1
    8f18:	1007883a 	mov	r3,r2
    8f1c:	e0bffa17 	ldw	r2,-24(fp)
    8f20:	10c0058d 	sth	r3,22(r2)
    8f24:	e0bff717 	ldw	r2,-36(fp)
    8f28:	e0bffb15 	stw	r2,-20(fp)
    8f2c:	e0bffb17 	ldw	r2,-20(fp)
    8f30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8f34:	0005883a 	mov	r2,zero
}
    8f38:	e037883a 	mov	sp,fp
    8f3c:	dfc00117 	ldw	ra,4(sp)
    8f40:	df000017 	ldw	fp,0(sp)
    8f44:	dec00204 	addi	sp,sp,8
    8f48:	f800283a 	ret

00008f4c <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
    8f4c:	defff604 	addi	sp,sp,-40
    8f50:	df000915 	stw	fp,36(sp)
    8f54:	df000904 	addi	fp,sp,36
    8f58:	e13ffe15 	stw	r4,-8(fp)
    8f5c:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    8f60:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    8f64:	e0bffe17 	ldw	r2,-8(fp)
    8f68:	1000021e 	bne	r2,zero,8f74 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    8f6c:	00800104 	movi	r2,4
    8f70:	00004906 	br	9098 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
    8f74:	e0bfff17 	ldw	r2,-4(fp)
    8f78:	1000021e 	bne	r2,zero,8f84 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    8f7c:	00800244 	movi	r2,9
    8f80:	00004506 	br	9098 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    8f84:	e0bffe17 	ldw	r2,-8(fp)
    8f88:	10800003 	ldbu	r2,0(r2)
    8f8c:	10803fcc 	andi	r2,r2,255
    8f90:	108000a0 	cmpeqi	r2,r2,2
    8f94:	1000021e 	bne	r2,zero,8fa0 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    8f98:	00800044 	movi	r2,1
    8f9c:	00003e06 	br	9098 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8fa0:	0005303a 	rdctl	r2,status
    8fa4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8fa8:	e0fffd17 	ldw	r3,-12(fp)
    8fac:	00bfff84 	movi	r2,-2
    8fb0:	1884703a 	and	r2,r3,r2
    8fb4:	1001703a 	wrctl	status,r2
  
  return context;
    8fb8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    8fbc:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    8fc0:	e0bffe17 	ldw	r2,-8(fp)
    8fc4:	10c00283 	ldbu	r3,10(r2)
    8fc8:	e0bfff17 	ldw	r2,-4(fp)
    8fcc:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
    8fd0:	e0bffe17 	ldw	r2,-8(fp)
    8fd4:	108002c4 	addi	r2,r2,11
    8fd8:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
    8fdc:	e0bfff17 	ldw	r2,-4(fp)
    8fe0:	10800204 	addi	r2,r2,8
    8fe4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    8fe8:	e03ff705 	stb	zero,-36(fp)
    8fec:	00000b06 	br	901c <OSQQuery+0xd0>
        *pdest++ = *psrc++;
    8ff0:	e0bff917 	ldw	r2,-28(fp)
    8ff4:	10c00044 	addi	r3,r2,1
    8ff8:	e0fff915 	stw	r3,-28(fp)
    8ffc:	e0fff817 	ldw	r3,-32(fp)
    9000:	19000044 	addi	r4,r3,1
    9004:	e13ff815 	stw	r4,-32(fp)
    9008:	18c00003 	ldbu	r3,0(r3)
    900c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    9010:	e0bff703 	ldbu	r2,-36(fp)
    9014:	10800044 	addi	r2,r2,1
    9018:	e0bff705 	stb	r2,-36(fp)
    901c:	e0bff703 	ldbu	r2,-36(fp)
    9020:	108000f0 	cmpltui	r2,r2,3
    9024:	103ff21e 	bne	r2,zero,8ff0 <__alt_mem_onchip_memory2_0+0xfc004ff0>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
    9028:	e0bffe17 	ldw	r2,-8(fp)
    902c:	10800117 	ldw	r2,4(r2)
    9030:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
    9034:	e0bffc17 	ldw	r2,-16(fp)
    9038:	1080058b 	ldhu	r2,22(r2)
    903c:	10bfffcc 	andi	r2,r2,65535
    9040:	10000626 	beq	r2,zero,905c <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
    9044:	e0bffc17 	ldw	r2,-16(fp)
    9048:	10800417 	ldw	r2,16(r2)
    904c:	10c00017 	ldw	r3,0(r2)
    9050:	e0bfff17 	ldw	r2,-4(fp)
    9054:	10c00015 	stw	r3,0(r2)
    9058:	00000206 	br	9064 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
    905c:	e0bfff17 	ldw	r2,-4(fp)
    9060:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
    9064:	e0bffc17 	ldw	r2,-16(fp)
    9068:	10c0058b 	ldhu	r3,22(r2)
    906c:	e0bfff17 	ldw	r2,-4(fp)
    9070:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
    9074:	e0bffc17 	ldw	r2,-16(fp)
    9078:	10c0050b 	ldhu	r3,20(r2)
    907c:	e0bfff17 	ldw	r2,-4(fp)
    9080:	10c0018d 	sth	r3,6(r2)
    9084:	e0bffa17 	ldw	r2,-24(fp)
    9088:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    908c:	e0bffb17 	ldw	r2,-20(fp)
    9090:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    9094:	0005883a 	mov	r2,zero
}
    9098:	e037883a 	mov	sp,fp
    909c:	df000017 	ldw	fp,0(sp)
    90a0:	dec00104 	addi	sp,sp,4
    90a4:	f800283a 	ret

000090a8 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
    90a8:	defffb04 	addi	sp,sp,-20
    90ac:	dfc00415 	stw	ra,16(sp)
    90b0:	df000315 	stw	fp,12(sp)
    90b4:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    90b8:	01407804 	movi	r5,480
    90bc:	01000074 	movhi	r4,1
    90c0:	21184604 	addi	r4,r4,24856
    90c4:	00058c40 	call	58c4 <OS_MemClr>
    pq1 = &OSQTbl[0];
    90c8:	00800074 	movhi	r2,1
    90cc:	10984604 	addi	r2,r2,24856
    90d0:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
    90d4:	00800074 	movhi	r2,1
    90d8:	10984c04 	addi	r2,r2,24880
    90dc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    90e0:	e03ffd0d 	sth	zero,-12(fp)
    90e4:	00000c06 	br	9118 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
    90e8:	e0bffe17 	ldw	r2,-8(fp)
    90ec:	e0ffff17 	ldw	r3,-4(fp)
    90f0:	10c00015 	stw	r3,0(r2)
        pq1++;
    90f4:	e0bffe17 	ldw	r2,-8(fp)
    90f8:	10800604 	addi	r2,r2,24
    90fc:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
    9100:	e0bfff17 	ldw	r2,-4(fp)
    9104:	10800604 	addi	r2,r2,24
    9108:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    910c:	e0bffd0b 	ldhu	r2,-12(fp)
    9110:	10800044 	addi	r2,r2,1
    9114:	e0bffd0d 	sth	r2,-12(fp)
    9118:	e0bffd0b 	ldhu	r2,-12(fp)
    911c:	108004f0 	cmpltui	r2,r2,19
    9120:	103ff11e 	bne	r2,zero,90e8 <__alt_mem_onchip_memory2_0+0xfc0050e8>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
    9124:	e0bffe17 	ldw	r2,-8(fp)
    9128:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
    912c:	00800074 	movhi	r2,1
    9130:	10984604 	addi	r2,r2,24856
    9134:	d0a74615 	stw	r2,-25320(gp)
#endif
}
    9138:	0001883a 	nop
    913c:	e037883a 	mov	sp,fp
    9140:	dfc00117 	ldw	ra,4(sp)
    9144:	df000017 	ldw	fp,0(sp)
    9148:	dec00204 	addi	sp,sp,8
    914c:	f800283a 	ret

00009150 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    9150:	defffa04 	addi	sp,sp,-24
    9154:	df000515 	stw	fp,20(sp)
    9158:	df000504 	addi	fp,sp,20
    915c:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9160:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    9164:	e0bfff17 	ldw	r2,-4(fp)
    9168:	1000021e 	bne	r2,zero,9174 <OSSemAccept+0x24>
        return (0);
    916c:	0005883a 	mov	r2,zero
    9170:	00001f06 	br	91f0 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    9174:	e0bfff17 	ldw	r2,-4(fp)
    9178:	10800003 	ldbu	r2,0(r2)
    917c:	10803fcc 	andi	r2,r2,255
    9180:	108000e0 	cmpeqi	r2,r2,3
    9184:	1000021e 	bne	r2,zero,9190 <OSSemAccept+0x40>
        return (0);
    9188:	0005883a 	mov	r2,zero
    918c:	00001806 	br	91f0 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9190:	0005303a 	rdctl	r2,status
    9194:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9198:	e0fffe17 	ldw	r3,-8(fp)
    919c:	00bfff84 	movi	r2,-2
    91a0:	1884703a 	and	r2,r3,r2
    91a4:	1001703a 	wrctl	status,r2
  
  return context;
    91a8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    91ac:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
    91b0:	e0bfff17 	ldw	r2,-4(fp)
    91b4:	1080020b 	ldhu	r2,8(r2)
    91b8:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
    91bc:	e0bffd0b 	ldhu	r2,-12(fp)
    91c0:	10000626 	beq	r2,zero,91dc <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    91c4:	e0bfff17 	ldw	r2,-4(fp)
    91c8:	1080020b 	ldhu	r2,8(r2)
    91cc:	10bfffc4 	addi	r2,r2,-1
    91d0:	1007883a 	mov	r3,r2
    91d4:	e0bfff17 	ldw	r2,-4(fp)
    91d8:	10c0020d 	sth	r3,8(r2)
    91dc:	e0bffb17 	ldw	r2,-20(fp)
    91e0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    91e4:	e0bffc17 	ldw	r2,-16(fp)
    91e8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
    91ec:	e0bffd0b 	ldhu	r2,-12(fp)
}
    91f0:	e037883a 	mov	sp,fp
    91f4:	df000017 	ldw	fp,0(sp)
    91f8:	dec00104 	addi	sp,sp,4
    91fc:	f800283a 	ret

00009200 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    9200:	defff904 	addi	sp,sp,-28
    9204:	dfc00615 	stw	ra,24(sp)
    9208:	df000515 	stw	fp,20(sp)
    920c:	df000504 	addi	fp,sp,20
    9210:	2005883a 	mov	r2,r4
    9214:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    9218:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    921c:	d0a74903 	ldbu	r2,-25308(gp)
    9220:	10803fcc 	andi	r2,r2,255
    9224:	10000226 	beq	r2,zero,9230 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    9228:	0005883a 	mov	r2,zero
    922c:	00002506 	br	92c4 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9230:	0005303a 	rdctl	r2,status
    9234:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9238:	e0fffe17 	ldw	r3,-8(fp)
    923c:	00bfff84 	movi	r2,-2
    9240:	1884703a 	and	r2,r3,r2
    9244:	1001703a 	wrctl	status,r2
  
  return context;
    9248:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    924c:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    9250:	d0a74817 	ldw	r2,-25312(gp)
    9254:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    9258:	d0a74817 	ldw	r2,-25312(gp)
    925c:	10000326 	beq	r2,zero,926c <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    9260:	d0a74817 	ldw	r2,-25312(gp)
    9264:	10800117 	ldw	r2,4(r2)
    9268:	d0a74815 	stw	r2,-25312(gp)
    926c:	e0bffb17 	ldw	r2,-20(fp)
    9270:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9274:	e0bffc17 	ldw	r2,-16(fp)
    9278:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    927c:	e0bffd17 	ldw	r2,-12(fp)
    9280:	10000f26 	beq	r2,zero,92c0 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    9284:	e0bffd17 	ldw	r2,-12(fp)
    9288:	00c000c4 	movi	r3,3
    928c:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    9290:	e0bffd17 	ldw	r2,-12(fp)
    9294:	e0ffff0b 	ldhu	r3,-4(fp)
    9298:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    929c:	e0bffd17 	ldw	r2,-12(fp)
    92a0:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
    92a4:	e0bffd17 	ldw	r2,-12(fp)
    92a8:	00c00fc4 	movi	r3,63
    92ac:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
    92b0:	e0bffd17 	ldw	r2,-12(fp)
    92b4:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    92b8:	e13ffd17 	ldw	r4,-12(fp)
    92bc:	00054e40 	call	54e4 <OS_EventWaitListInit>
    }
    return (pevent);
    92c0:	e0bffd17 	ldw	r2,-12(fp)
}
    92c4:	e037883a 	mov	sp,fp
    92c8:	dfc00117 	ldw	ra,4(sp)
    92cc:	df000017 	ldw	fp,0(sp)
    92d0:	dec00204 	addi	sp,sp,8
    92d4:	f800283a 	ret

000092d8 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    92d8:	defff304 	addi	sp,sp,-52
    92dc:	dfc00c15 	stw	ra,48(sp)
    92e0:	df000b15 	stw	fp,44(sp)
    92e4:	df000b04 	addi	fp,sp,44
    92e8:	e13ffd15 	stw	r4,-12(fp)
    92ec:	2805883a 	mov	r2,r5
    92f0:	e1bfff15 	stw	r6,-4(fp)
    92f4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    92f8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    92fc:	e0bfff17 	ldw	r2,-4(fp)
    9300:	1000021e 	bne	r2,zero,930c <OSSemDel+0x34>
        return (pevent);
    9304:	e0bffd17 	ldw	r2,-12(fp)
    9308:	00007e06 	br	9504 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    930c:	e0bffd17 	ldw	r2,-12(fp)
    9310:	1000051e 	bne	r2,zero,9328 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    9314:	e0bfff17 	ldw	r2,-4(fp)
    9318:	00c00104 	movi	r3,4
    931c:	10c00005 	stb	r3,0(r2)
        return (pevent);
    9320:	e0bffd17 	ldw	r2,-12(fp)
    9324:	00007706 	br	9504 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    9328:	e0bffd17 	ldw	r2,-12(fp)
    932c:	10800003 	ldbu	r2,0(r2)
    9330:	10803fcc 	andi	r2,r2,255
    9334:	108000e0 	cmpeqi	r2,r2,3
    9338:	1000051e 	bne	r2,zero,9350 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    933c:	e0bfff17 	ldw	r2,-4(fp)
    9340:	00c00044 	movi	r3,1
    9344:	10c00005 	stb	r3,0(r2)
        return (pevent);
    9348:	e0bffd17 	ldw	r2,-12(fp)
    934c:	00006d06 	br	9504 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    9350:	d0a74903 	ldbu	r2,-25308(gp)
    9354:	10803fcc 	andi	r2,r2,255
    9358:	10000526 	beq	r2,zero,9370 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    935c:	e0bfff17 	ldw	r2,-4(fp)
    9360:	00c003c4 	movi	r3,15
    9364:	10c00005 	stb	r3,0(r2)
        return (pevent);
    9368:	e0bffd17 	ldw	r2,-12(fp)
    936c:	00006506 	br	9504 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9370:	0005303a 	rdctl	r2,status
    9374:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9378:	e0fffc17 	ldw	r3,-16(fp)
    937c:	00bfff84 	movi	r2,-2
    9380:	1884703a 	and	r2,r3,r2
    9384:	1001703a 	wrctl	status,r2
  
  return context;
    9388:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    938c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
    9390:	e0bffd17 	ldw	r2,-12(fp)
    9394:	10800283 	ldbu	r2,10(r2)
    9398:	10803fcc 	andi	r2,r2,255
    939c:	10000326 	beq	r2,zero,93ac <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    93a0:	00800044 	movi	r2,1
    93a4:	e0bff505 	stb	r2,-44(fp)
    93a8:	00000106 	br	93b0 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    93ac:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
    93b0:	e0bffe03 	ldbu	r2,-8(fp)
    93b4:	10000326 	beq	r2,zero,93c4 <OSSemDel+0xec>
    93b8:	10800060 	cmpeqi	r2,r2,1
    93bc:	1000281e 	bne	r2,zero,9460 <OSSemDel+0x188>
    93c0:	00004506 	br	94d8 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    93c4:	e0bff503 	ldbu	r2,-44(fp)
    93c8:	1000161e 	bne	r2,zero,9424 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    93cc:	e0bffd17 	ldw	r2,-12(fp)
    93d0:	00c00fc4 	movi	r3,63
    93d4:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    93d8:	e0bffd17 	ldw	r2,-12(fp)
    93dc:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    93e0:	e0bffd17 	ldw	r2,-12(fp)
    93e4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    93e8:	d0e74817 	ldw	r3,-25312(gp)
    93ec:	e0bffd17 	ldw	r2,-12(fp)
    93f0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    93f4:	e0bffd17 	ldw	r2,-12(fp)
    93f8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    93fc:	e0bffd17 	ldw	r2,-12(fp)
    9400:	d0a74815 	stw	r2,-25312(gp)
    9404:	e0bff717 	ldw	r2,-36(fp)
    9408:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    940c:	e0bff817 	ldw	r2,-32(fp)
    9410:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    9414:	e0bfff17 	ldw	r2,-4(fp)
    9418:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    941c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    9420:	00003706 	br	9500 <OSSemDel+0x228>
    9424:	e0bff717 	ldw	r2,-36(fp)
    9428:	e0bff915 	stw	r2,-28(fp)
    942c:	e0bff917 	ldw	r2,-28(fp)
    9430:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    9434:	e0bfff17 	ldw	r2,-4(fp)
    9438:	00c01244 	movi	r3,73
    943c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    9440:	e0bffd17 	ldw	r2,-12(fp)
    9444:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    9448:	00002d06 	br	9500 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    944c:	000f883a 	mov	r7,zero
    9450:	01800044 	movi	r6,1
    9454:	000b883a 	mov	r5,zero
    9458:	e13ffd17 	ldw	r4,-12(fp)
    945c:	0004f340 	call	4f34 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    9460:	e0bffd17 	ldw	r2,-12(fp)
    9464:	10800283 	ldbu	r2,10(r2)
    9468:	10803fcc 	andi	r2,r2,255
    946c:	103ff71e 	bne	r2,zero,944c <__alt_mem_onchip_memory2_0+0xfc00544c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    9470:	e0bffd17 	ldw	r2,-12(fp)
    9474:	00c00fc4 	movi	r3,63
    9478:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    947c:	e0bffd17 	ldw	r2,-12(fp)
    9480:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    9484:	e0bffd17 	ldw	r2,-12(fp)
    9488:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    948c:	d0e74817 	ldw	r3,-25312(gp)
    9490:	e0bffd17 	ldw	r2,-12(fp)
    9494:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    9498:	e0bffd17 	ldw	r2,-12(fp)
    949c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    94a0:	e0bffd17 	ldw	r2,-12(fp)
    94a4:	d0a74815 	stw	r2,-25312(gp)
    94a8:	e0bff717 	ldw	r2,-36(fp)
    94ac:	e0bffa15 	stw	r2,-24(fp)
    94b0:	e0bffa17 	ldw	r2,-24(fp)
    94b4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    94b8:	e0bff503 	ldbu	r2,-44(fp)
    94bc:	10800058 	cmpnei	r2,r2,1
    94c0:	1000011e 	bne	r2,zero,94c8 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    94c4:	00059800 	call	5980 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    94c8:	e0bfff17 	ldw	r2,-4(fp)
    94cc:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    94d0:	e03ff615 	stw	zero,-40(fp)
             break;
    94d4:	00000a06 	br	9500 <OSSemDel+0x228>
    94d8:	e0bff717 	ldw	r2,-36(fp)
    94dc:	e0bffb15 	stw	r2,-20(fp)
    94e0:	e0bffb17 	ldw	r2,-20(fp)
    94e4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    94e8:	e0bfff17 	ldw	r2,-4(fp)
    94ec:	00c001c4 	movi	r3,7
    94f0:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    94f4:	e0bffd17 	ldw	r2,-12(fp)
    94f8:	e0bff615 	stw	r2,-40(fp)
             break;
    94fc:	0001883a 	nop
    }
    return (pevent_return);
    9500:	e0bff617 	ldw	r2,-40(fp)
}
    9504:	e037883a 	mov	sp,fp
    9508:	dfc00117 	ldw	ra,4(sp)
    950c:	df000017 	ldw	fp,0(sp)
    9510:	dec00204 	addi	sp,sp,8
    9514:	f800283a 	ret

00009518 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    9518:	defff504 	addi	sp,sp,-44
    951c:	dfc00a15 	stw	ra,40(sp)
    9520:	df000915 	stw	fp,36(sp)
    9524:	df000904 	addi	fp,sp,36
    9528:	e13ffd15 	stw	r4,-12(fp)
    952c:	2805883a 	mov	r2,r5
    9530:	e1bfff15 	stw	r6,-4(fp)
    9534:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9538:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    953c:	e0bfff17 	ldw	r2,-4(fp)
    9540:	10007226 	beq	r2,zero,970c <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    9544:	e0bffd17 	ldw	r2,-12(fp)
    9548:	1000041e 	bne	r2,zero,955c <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    954c:	e0bfff17 	ldw	r2,-4(fp)
    9550:	00c00104 	movi	r3,4
    9554:	10c00005 	stb	r3,0(r2)
        return;
    9558:	00006d06 	br	9710 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    955c:	e0bffd17 	ldw	r2,-12(fp)
    9560:	10800003 	ldbu	r2,0(r2)
    9564:	10803fcc 	andi	r2,r2,255
    9568:	108000e0 	cmpeqi	r2,r2,3
    956c:	1000041e 	bne	r2,zero,9580 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
    9570:	e0bfff17 	ldw	r2,-4(fp)
    9574:	00c00044 	movi	r3,1
    9578:	10c00005 	stb	r3,0(r2)
        return;
    957c:	00006406 	br	9710 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    9580:	d0a74903 	ldbu	r2,-25308(gp)
    9584:	10803fcc 	andi	r2,r2,255
    9588:	10000426 	beq	r2,zero,959c <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    958c:	e0bfff17 	ldw	r2,-4(fp)
    9590:	00c00084 	movi	r3,2
    9594:	10c00005 	stb	r3,0(r2)
        return;
    9598:	00005d06 	br	9710 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    959c:	d0a73b03 	ldbu	r2,-25364(gp)
    95a0:	10803fcc 	andi	r2,r2,255
    95a4:	10000426 	beq	r2,zero,95b8 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    95a8:	e0bfff17 	ldw	r2,-4(fp)
    95ac:	00c00344 	movi	r3,13
    95b0:	10c00005 	stb	r3,0(r2)
        return;
    95b4:	00005606 	br	9710 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    95b8:	0005303a 	rdctl	r2,status
    95bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    95c0:	e0fffc17 	ldw	r3,-16(fp)
    95c4:	00bfff84 	movi	r2,-2
    95c8:	1884703a 	and	r2,r3,r2
    95cc:	1001703a 	wrctl	status,r2
  
  return context;
    95d0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    95d4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    95d8:	e0bffd17 	ldw	r2,-12(fp)
    95dc:	1080020b 	ldhu	r2,8(r2)
    95e0:	10bfffcc 	andi	r2,r2,65535
    95e4:	10000d26 	beq	r2,zero,961c <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    95e8:	e0bffd17 	ldw	r2,-12(fp)
    95ec:	1080020b 	ldhu	r2,8(r2)
    95f0:	10bfffc4 	addi	r2,r2,-1
    95f4:	1007883a 	mov	r3,r2
    95f8:	e0bffd17 	ldw	r2,-12(fp)
    95fc:	10c0020d 	sth	r3,8(r2)
    9600:	e0bff717 	ldw	r2,-36(fp)
    9604:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9608:	e0bff817 	ldw	r2,-32(fp)
    960c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    9610:	e0bfff17 	ldw	r2,-4(fp)
    9614:	10000005 	stb	zero,0(r2)
        return;
    9618:	00003d06 	br	9710 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    961c:	d0a74a17 	ldw	r2,-25304(gp)
    9620:	d0e74a17 	ldw	r3,-25304(gp)
    9624:	18c00c03 	ldbu	r3,48(r3)
    9628:	18c00054 	ori	r3,r3,1
    962c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    9630:	d0a74a17 	ldw	r2,-25304(gp)
    9634:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    9638:	d0a74a17 	ldw	r2,-25304(gp)
    963c:	e0fffe0b 	ldhu	r3,-8(fp)
    9640:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    9644:	e13ffd17 	ldw	r4,-12(fp)
    9648:	00050cc0 	call	50cc <OS_EventTaskWait>
    964c:	e0bff717 	ldw	r2,-36(fp)
    9650:	e0bffb15 	stw	r2,-20(fp)
    9654:	e0bffb17 	ldw	r2,-20(fp)
    9658:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
    965c:	00059800 	call	5980 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9660:	0005303a 	rdctl	r2,status
    9664:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9668:	e0fff917 	ldw	r3,-28(fp)
    966c:	00bfff84 	movi	r2,-2
    9670:	1884703a 	and	r2,r3,r2
    9674:	1001703a 	wrctl	status,r2
  
  return context;
    9678:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    967c:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    9680:	d0a74a17 	ldw	r2,-25304(gp)
    9684:	10800c43 	ldbu	r2,49(r2)
    9688:	10803fcc 	andi	r2,r2,255
    968c:	10000326 	beq	r2,zero,969c <OSSemPend+0x184>
    9690:	108000a0 	cmpeqi	r2,r2,2
    9694:	1000041e 	bne	r2,zero,96a8 <OSSemPend+0x190>
    9698:	00000706 	br	96b8 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    969c:	e0bfff17 	ldw	r2,-4(fp)
    96a0:	10000005 	stb	zero,0(r2)
             break;
    96a4:	00000c06 	br	96d8 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    96a8:	e0bfff17 	ldw	r2,-4(fp)
    96ac:	00c00384 	movi	r3,14
    96b0:	10c00005 	stb	r3,0(r2)
             break;
    96b4:	00000806 	br	96d8 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    96b8:	d0a74a17 	ldw	r2,-25304(gp)
    96bc:	e17ffd17 	ldw	r5,-12(fp)
    96c0:	1009883a 	mov	r4,r2
    96c4:	000532c0 	call	532c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    96c8:	e0bfff17 	ldw	r2,-4(fp)
    96cc:	00c00284 	movi	r3,10
    96d0:	10c00005 	stb	r3,0(r2)
             break;
    96d4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    96d8:	d0a74a17 	ldw	r2,-25304(gp)
    96dc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    96e0:	d0a74a17 	ldw	r2,-25304(gp)
    96e4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    96e8:	d0a74a17 	ldw	r2,-25304(gp)
    96ec:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    96f0:	d0a74a17 	ldw	r2,-25304(gp)
    96f4:	10000815 	stw	zero,32(r2)
    96f8:	e0bff717 	ldw	r2,-36(fp)
    96fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9700:	e0bffa17 	ldw	r2,-24(fp)
    9704:	1001703a 	wrctl	status,r2
    9708:	00000106 	br	9710 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
    970c:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
    9710:	e037883a 	mov	sp,fp
    9714:	dfc00117 	ldw	ra,4(sp)
    9718:	df000017 	ldw	fp,0(sp)
    971c:	dec00204 	addi	sp,sp,8
    9720:	f800283a 	ret

00009724 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    9724:	defff604 	addi	sp,sp,-40
    9728:	dfc00915 	stw	ra,36(sp)
    972c:	df000815 	stw	fp,32(sp)
    9730:	df000804 	addi	fp,sp,32
    9734:	e13ffd15 	stw	r4,-12(fp)
    9738:	2805883a 	mov	r2,r5
    973c:	e1bfff15 	stw	r6,-4(fp)
    9740:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9744:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    9748:	e0bfff17 	ldw	r2,-4(fp)
    974c:	1000021e 	bne	r2,zero,9758 <OSSemPendAbort+0x34>
        return (0);
    9750:	0005883a 	mov	r2,zero
    9754:	00004906 	br	987c <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    9758:	e0bffd17 	ldw	r2,-12(fp)
    975c:	1000051e 	bne	r2,zero,9774 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    9760:	e0bfff17 	ldw	r2,-4(fp)
    9764:	00c00104 	movi	r3,4
    9768:	10c00005 	stb	r3,0(r2)
        return (0);
    976c:	0005883a 	mov	r2,zero
    9770:	00004206 	br	987c <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    9774:	e0bffd17 	ldw	r2,-12(fp)
    9778:	10800003 	ldbu	r2,0(r2)
    977c:	10803fcc 	andi	r2,r2,255
    9780:	108000e0 	cmpeqi	r2,r2,3
    9784:	1000051e 	bne	r2,zero,979c <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    9788:	e0bfff17 	ldw	r2,-4(fp)
    978c:	00c00044 	movi	r3,1
    9790:	10c00005 	stb	r3,0(r2)
        return (0);
    9794:	0005883a 	mov	r2,zero
    9798:	00003806 	br	987c <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    979c:	0005303a 	rdctl	r2,status
    97a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    97a4:	e0fffc17 	ldw	r3,-16(fp)
    97a8:	00bfff84 	movi	r2,-2
    97ac:	1884703a 	and	r2,r3,r2
    97b0:	1001703a 	wrctl	status,r2
  
  return context;
    97b4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    97b8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    97bc:	e0bffd17 	ldw	r2,-12(fp)
    97c0:	10800283 	ldbu	r2,10(r2)
    97c4:	10803fcc 	andi	r2,r2,255
    97c8:	10002526 	beq	r2,zero,9860 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
    97cc:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    97d0:	e0bffe03 	ldbu	r2,-8(fp)
    97d4:	10800060 	cmpeqi	r2,r2,1
    97d8:	10000e26 	beq	r2,zero,9814 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    97dc:	00000806 	br	9800 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    97e0:	01c00084 	movi	r7,2
    97e4:	01800044 	movi	r6,1
    97e8:	000b883a 	mov	r5,zero
    97ec:	e13ffd17 	ldw	r4,-12(fp)
    97f0:	0004f340 	call	4f34 <OS_EventTaskRdy>
                     nbr_tasks++;
    97f4:	e0bff803 	ldbu	r2,-32(fp)
    97f8:	10800044 	addi	r2,r2,1
    97fc:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    9800:	e0bffd17 	ldw	r2,-12(fp)
    9804:	10800283 	ldbu	r2,10(r2)
    9808:	10803fcc 	andi	r2,r2,255
    980c:	103ff41e 	bne	r2,zero,97e0 <__alt_mem_onchip_memory2_0+0xfc0057e0>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    9810:	00000906 	br	9838 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    9814:	01c00084 	movi	r7,2
    9818:	01800044 	movi	r6,1
    981c:	000b883a 	mov	r5,zero
    9820:	e13ffd17 	ldw	r4,-12(fp)
    9824:	0004f340 	call	4f34 <OS_EventTaskRdy>
                 nbr_tasks++;
    9828:	e0bff803 	ldbu	r2,-32(fp)
    982c:	10800044 	addi	r2,r2,1
    9830:	e0bff805 	stb	r2,-32(fp)
                 break;
    9834:	0001883a 	nop
    9838:	e0bff917 	ldw	r2,-28(fp)
    983c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9840:	e0bffa17 	ldw	r2,-24(fp)
    9844:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    9848:	00059800 	call	5980 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    984c:	e0bfff17 	ldw	r2,-4(fp)
    9850:	00c00384 	movi	r3,14
    9854:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    9858:	e0bff803 	ldbu	r2,-32(fp)
    985c:	00000706 	br	987c <OSSemPendAbort+0x158>
    9860:	e0bff917 	ldw	r2,-28(fp)
    9864:	e0bffb15 	stw	r2,-20(fp)
    9868:	e0bffb17 	ldw	r2,-20(fp)
    986c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    9870:	e0bfff17 	ldw	r2,-4(fp)
    9874:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
    9878:	0005883a 	mov	r2,zero
}
    987c:	e037883a 	mov	sp,fp
    9880:	dfc00117 	ldw	ra,4(sp)
    9884:	df000017 	ldw	fp,0(sp)
    9888:	dec00204 	addi	sp,sp,8
    988c:	f800283a 	ret

00009890 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    9890:	defff804 	addi	sp,sp,-32
    9894:	dfc00715 	stw	ra,28(sp)
    9898:	df000615 	stw	fp,24(sp)
    989c:	df000604 	addi	fp,sp,24
    98a0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    98a4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    98a8:	e0bfff17 	ldw	r2,-4(fp)
    98ac:	1000021e 	bne	r2,zero,98b8 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
    98b0:	00800104 	movi	r2,4
    98b4:	00003506 	br	998c <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    98b8:	e0bfff17 	ldw	r2,-4(fp)
    98bc:	10800003 	ldbu	r2,0(r2)
    98c0:	10803fcc 	andi	r2,r2,255
    98c4:	108000e0 	cmpeqi	r2,r2,3
    98c8:	1000021e 	bne	r2,zero,98d4 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
    98cc:	00800044 	movi	r2,1
    98d0:	00002e06 	br	998c <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    98d4:	0005303a 	rdctl	r2,status
    98d8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    98dc:	e0fffe17 	ldw	r3,-8(fp)
    98e0:	00bfff84 	movi	r2,-2
    98e4:	1884703a 	and	r2,r3,r2
    98e8:	1001703a 	wrctl	status,r2
  
  return context;
    98ec:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    98f0:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    98f4:	e0bfff17 	ldw	r2,-4(fp)
    98f8:	10800283 	ldbu	r2,10(r2)
    98fc:	10803fcc 	andi	r2,r2,255
    9900:	10000c26 	beq	r2,zero,9934 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    9904:	000f883a 	mov	r7,zero
    9908:	01800044 	movi	r6,1
    990c:	000b883a 	mov	r5,zero
    9910:	e13fff17 	ldw	r4,-4(fp)
    9914:	0004f340 	call	4f34 <OS_EventTaskRdy>
    9918:	e0bffa17 	ldw	r2,-24(fp)
    991c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9920:	e0bffb17 	ldw	r2,-20(fp)
    9924:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    9928:	00059800 	call	5980 <OS_Sched>
        return (OS_ERR_NONE);
    992c:	0005883a 	mov	r2,zero
    9930:	00001606 	br	998c <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    9934:	e0bfff17 	ldw	r2,-4(fp)
    9938:	1080020b 	ldhu	r2,8(r2)
    993c:	10ffffcc 	andi	r3,r2,65535
    9940:	00bfffd4 	movui	r2,65535
    9944:	18800c26 	beq	r3,r2,9978 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    9948:	e0bfff17 	ldw	r2,-4(fp)
    994c:	1080020b 	ldhu	r2,8(r2)
    9950:	10800044 	addi	r2,r2,1
    9954:	1007883a 	mov	r3,r2
    9958:	e0bfff17 	ldw	r2,-4(fp)
    995c:	10c0020d 	sth	r3,8(r2)
    9960:	e0bffa17 	ldw	r2,-24(fp)
    9964:	e0bffc15 	stw	r2,-16(fp)
    9968:	e0bffc17 	ldw	r2,-16(fp)
    996c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    9970:	0005883a 	mov	r2,zero
    9974:	00000506 	br	998c <OSSemPost+0xfc>
    9978:	e0bffa17 	ldw	r2,-24(fp)
    997c:	e0bffd15 	stw	r2,-12(fp)
    9980:	e0bffd17 	ldw	r2,-12(fp)
    9984:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
    9988:	00800c84 	movi	r2,50
}
    998c:	e037883a 	mov	sp,fp
    9990:	dfc00117 	ldw	ra,4(sp)
    9994:	df000017 	ldw	fp,0(sp)
    9998:	dec00204 	addi	sp,sp,8
    999c:	f800283a 	ret

000099a0 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
    99a0:	defff704 	addi	sp,sp,-36
    99a4:	df000815 	stw	fp,32(sp)
    99a8:	df000804 	addi	fp,sp,32
    99ac:	e13ffe15 	stw	r4,-8(fp)
    99b0:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    99b4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    99b8:	e0bffe17 	ldw	r2,-8(fp)
    99bc:	1000021e 	bne	r2,zero,99c8 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    99c0:	00800104 	movi	r2,4
    99c4:	00003606 	br	9aa0 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
    99c8:	e0bfff17 	ldw	r2,-4(fp)
    99cc:	1000021e 	bne	r2,zero,99d8 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    99d0:	00800244 	movi	r2,9
    99d4:	00003206 	br	9aa0 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    99d8:	e0bffe17 	ldw	r2,-8(fp)
    99dc:	10800003 	ldbu	r2,0(r2)
    99e0:	10803fcc 	andi	r2,r2,255
    99e4:	108000e0 	cmpeqi	r2,r2,3
    99e8:	1000021e 	bne	r2,zero,99f4 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    99ec:	00800044 	movi	r2,1
    99f0:	00002b06 	br	9aa0 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    99f4:	0005303a 	rdctl	r2,status
    99f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    99fc:	e0fffd17 	ldw	r3,-12(fp)
    9a00:	00bfff84 	movi	r2,-2
    9a04:	1884703a 	and	r2,r3,r2
    9a08:	1001703a 	wrctl	status,r2
  
  return context;
    9a0c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    9a10:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    9a14:	e0bffe17 	ldw	r2,-8(fp)
    9a18:	10c00283 	ldbu	r3,10(r2)
    9a1c:	e0bfff17 	ldw	r2,-4(fp)
    9a20:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
    9a24:	e0bffe17 	ldw	r2,-8(fp)
    9a28:	108002c4 	addi	r2,r2,11
    9a2c:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
    9a30:	e0bfff17 	ldw	r2,-4(fp)
    9a34:	10800084 	addi	r2,r2,2
    9a38:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    9a3c:	e03ffa05 	stb	zero,-24(fp)
    9a40:	00000b06 	br	9a70 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
    9a44:	e0bff917 	ldw	r2,-28(fp)
    9a48:	10c00044 	addi	r3,r2,1
    9a4c:	e0fff915 	stw	r3,-28(fp)
    9a50:	e0fff817 	ldw	r3,-32(fp)
    9a54:	19000044 	addi	r4,r3,1
    9a58:	e13ff815 	stw	r4,-32(fp)
    9a5c:	18c00003 	ldbu	r3,0(r3)
    9a60:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    9a64:	e0bffa03 	ldbu	r2,-24(fp)
    9a68:	10800044 	addi	r2,r2,1
    9a6c:	e0bffa05 	stb	r2,-24(fp)
    9a70:	e0bffa03 	ldbu	r2,-24(fp)
    9a74:	108000f0 	cmpltui	r2,r2,3
    9a78:	103ff21e 	bne	r2,zero,9a44 <__alt_mem_onchip_memory2_0+0xfc005a44>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    9a7c:	e0bffe17 	ldw	r2,-8(fp)
    9a80:	10c0020b 	ldhu	r3,8(r2)
    9a84:	e0bfff17 	ldw	r2,-4(fp)
    9a88:	10c0000d 	sth	r3,0(r2)
    9a8c:	e0bffb17 	ldw	r2,-20(fp)
    9a90:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9a94:	e0bffc17 	ldw	r2,-16(fp)
    9a98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    9a9c:	0005883a 	mov	r2,zero
}
    9aa0:	e037883a 	mov	sp,fp
    9aa4:	df000017 	ldw	fp,0(sp)
    9aa8:	dec00104 	addi	sp,sp,4
    9aac:	f800283a 	ret

00009ab0 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
    9ab0:	defff904 	addi	sp,sp,-28
    9ab4:	df000615 	stw	fp,24(sp)
    9ab8:	df000604 	addi	fp,sp,24
    9abc:	e13ffd15 	stw	r4,-12(fp)
    9ac0:	2805883a 	mov	r2,r5
    9ac4:	e1bfff15 	stw	r6,-4(fp)
    9ac8:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9acc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    9ad0:	e0bfff17 	ldw	r2,-4(fp)
    9ad4:	10003126 	beq	r2,zero,9b9c <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    9ad8:	e0bffd17 	ldw	r2,-12(fp)
    9adc:	1000041e 	bne	r2,zero,9af0 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    9ae0:	e0bfff17 	ldw	r2,-4(fp)
    9ae4:	00c00104 	movi	r3,4
    9ae8:	10c00005 	stb	r3,0(r2)
        return;
    9aec:	00002c06 	br	9ba0 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    9af0:	e0bffd17 	ldw	r2,-12(fp)
    9af4:	10800003 	ldbu	r2,0(r2)
    9af8:	10803fcc 	andi	r2,r2,255
    9afc:	108000e0 	cmpeqi	r2,r2,3
    9b00:	1000041e 	bne	r2,zero,9b14 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
    9b04:	e0bfff17 	ldw	r2,-4(fp)
    9b08:	00c00044 	movi	r3,1
    9b0c:	10c00005 	stb	r3,0(r2)
        return;
    9b10:	00002306 	br	9ba0 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9b14:	0005303a 	rdctl	r2,status
    9b18:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9b1c:	e0fffc17 	ldw	r3,-16(fp)
    9b20:	00bfff84 	movi	r2,-2
    9b24:	1884703a 	and	r2,r3,r2
    9b28:	1001703a 	wrctl	status,r2
  
  return context;
    9b2c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    9b30:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
    9b34:	e0bfff17 	ldw	r2,-4(fp)
    9b38:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
    9b3c:	e0bffd17 	ldw	r2,-12(fp)
    9b40:	1080020b 	ldhu	r2,8(r2)
    9b44:	10bfffcc 	andi	r2,r2,65535
    9b48:	10000426 	beq	r2,zero,9b5c <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    9b4c:	e0bffd17 	ldw	r2,-12(fp)
    9b50:	e0fffe0b 	ldhu	r3,-8(fp)
    9b54:	10c0020d 	sth	r3,8(r2)
    9b58:	00000b06 	br	9b88 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
    9b5c:	e0bffd17 	ldw	r2,-12(fp)
    9b60:	10800283 	ldbu	r2,10(r2)
    9b64:	10803fcc 	andi	r2,r2,255
    9b68:	1000041e 	bne	r2,zero,9b7c <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    9b6c:	e0bffd17 	ldw	r2,-12(fp)
    9b70:	e0fffe0b 	ldhu	r3,-8(fp)
    9b74:	10c0020d 	sth	r3,8(r2)
    9b78:	00000306 	br	9b88 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    9b7c:	e0bfff17 	ldw	r2,-4(fp)
    9b80:	00c01244 	movi	r3,73
    9b84:	10c00005 	stb	r3,0(r2)
    9b88:	e0bffa17 	ldw	r2,-24(fp)
    9b8c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9b90:	e0bffb17 	ldw	r2,-20(fp)
    9b94:	1001703a 	wrctl	status,r2
    9b98:	00000106 	br	9ba0 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
    9b9c:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
    9ba0:	e037883a 	mov	sp,fp
    9ba4:	df000017 	ldw	fp,0(sp)
    9ba8:	dec00104 	addi	sp,sp,4
    9bac:	f800283a 	ret

00009bb0 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
    9bb0:	defff104 	addi	sp,sp,-60
    9bb4:	dfc00e15 	stw	ra,56(sp)
    9bb8:	df000d15 	stw	fp,52(sp)
    9bbc:	df000d04 	addi	fp,sp,52
    9bc0:	2007883a 	mov	r3,r4
    9bc4:	2805883a 	mov	r2,r5
    9bc8:	e0fffe05 	stb	r3,-8(fp)
    9bcc:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
    9bd0:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
    9bd4:	e0bffe03 	ldbu	r2,-8(fp)
    9bd8:	10800530 	cmpltui	r2,r2,20
    9bdc:	1000051e 	bne	r2,zero,9bf4 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
    9be0:	e0bffe03 	ldbu	r2,-8(fp)
    9be4:	10803fe0 	cmpeqi	r2,r2,255
    9be8:	1000021e 	bne	r2,zero,9bf4 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
    9bec:	00800a84 	movi	r2,42
    9bf0:	00012606 	br	a08c <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
    9bf4:	e0bfff03 	ldbu	r2,-4(fp)
    9bf8:	10800530 	cmpltui	r2,r2,20
    9bfc:	1000021e 	bne	r2,zero,9c08 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
    9c00:	00800a84 	movi	r2,42
    9c04:	00012106 	br	a08c <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9c08:	0005303a 	rdctl	r2,status
    9c0c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9c10:	e0fffd17 	ldw	r3,-12(fp)
    9c14:	00bfff84 	movi	r2,-2
    9c18:	1884703a 	and	r2,r3,r2
    9c1c:	1001703a 	wrctl	status,r2
  
  return context;
    9c20:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    9c24:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
    9c28:	e0ffff03 	ldbu	r3,-4(fp)
    9c2c:	00800074 	movhi	r2,1
    9c30:	109ed204 	addi	r2,r2,31560
    9c34:	18c7883a 	add	r3,r3,r3
    9c38:	18c7883a 	add	r3,r3,r3
    9c3c:	10c5883a 	add	r2,r2,r3
    9c40:	10800017 	ldw	r2,0(r2)
    9c44:	10000626 	beq	r2,zero,9c60 <OSTaskChangePrio+0xb0>
    9c48:	e0bff517 	ldw	r2,-44(fp)
    9c4c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9c50:	e0bff617 	ldw	r2,-40(fp)
    9c54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
    9c58:	00800a04 	movi	r2,40
    9c5c:	00010b06 	br	a08c <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
    9c60:	e0bffe03 	ldbu	r2,-8(fp)
    9c64:	10803fd8 	cmpnei	r2,r2,255
    9c68:	1000031e 	bne	r2,zero,9c78 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
    9c6c:	d0a74a17 	ldw	r2,-25304(gp)
    9c70:	10800c83 	ldbu	r2,50(r2)
    9c74:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
    9c78:	e0fffe03 	ldbu	r3,-8(fp)
    9c7c:	00800074 	movhi	r2,1
    9c80:	109ed204 	addi	r2,r2,31560
    9c84:	18c7883a 	add	r3,r3,r3
    9c88:	18c7883a 	add	r3,r3,r3
    9c8c:	10c5883a 	add	r2,r2,r3
    9c90:	10800017 	ldw	r2,0(r2)
    9c94:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
    9c98:	e0bff817 	ldw	r2,-32(fp)
    9c9c:	1000061e 	bne	r2,zero,9cb8 <OSTaskChangePrio+0x108>
    9ca0:	e0bff517 	ldw	r2,-44(fp)
    9ca4:	e0bff715 	stw	r2,-36(fp)
    9ca8:	e0bff717 	ldw	r2,-36(fp)
    9cac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
    9cb0:	00800a44 	movi	r2,41
    9cb4:	0000f506 	br	a08c <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
    9cb8:	e0bff817 	ldw	r2,-32(fp)
    9cbc:	10800058 	cmpnei	r2,r2,1
    9cc0:	1000061e 	bne	r2,zero,9cdc <OSTaskChangePrio+0x12c>
    9cc4:	e0bff517 	ldw	r2,-44(fp)
    9cc8:	e0bff915 	stw	r2,-28(fp)
    9ccc:	e0bff917 	ldw	r2,-28(fp)
    9cd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
    9cd4:	008010c4 	movi	r2,67
    9cd8:	0000ec06 	br	a08c <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    9cdc:	e0bfff03 	ldbu	r2,-4(fp)
    9ce0:	1004d0fa 	srli	r2,r2,3
    9ce4:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
    9ce8:	e0bfff03 	ldbu	r2,-4(fp)
    9cec:	108001cc 	andi	r2,r2,7
    9cf0:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
    9cf4:	e0bffb03 	ldbu	r2,-20(fp)
    9cf8:	00c00044 	movi	r3,1
    9cfc:	1884983a 	sll	r2,r3,r2
    9d00:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
    9d04:	e0bffb43 	ldbu	r2,-19(fp)
    9d08:	00c00044 	movi	r3,1
    9d0c:	1884983a 	sll	r2,r3,r2
    9d10:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    9d14:	e0fffe03 	ldbu	r3,-8(fp)
    9d18:	00800074 	movhi	r2,1
    9d1c:	109ed204 	addi	r2,r2,31560
    9d20:	18c7883a 	add	r3,r3,r3
    9d24:	18c7883a 	add	r3,r3,r3
    9d28:	10c5883a 	add	r2,r2,r3
    9d2c:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    9d30:	e0ffff03 	ldbu	r3,-4(fp)
    9d34:	00800074 	movhi	r2,1
    9d38:	109ed204 	addi	r2,r2,31560
    9d3c:	18c7883a 	add	r3,r3,r3
    9d40:	18c7883a 	add	r3,r3,r3
    9d44:	10c5883a 	add	r2,r2,r3
    9d48:	e0fff817 	ldw	r3,-32(fp)
    9d4c:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
    9d50:	e0bff817 	ldw	r2,-32(fp)
    9d54:	10800d03 	ldbu	r2,52(r2)
    9d58:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
    9d5c:	e0bff817 	ldw	r2,-32(fp)
    9d60:	10800d83 	ldbu	r2,54(r2)
    9d64:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
    9d68:	e0bff817 	ldw	r2,-32(fp)
    9d6c:	10800d43 	ldbu	r2,53(r2)
    9d70:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
    9d74:	e0fffc03 	ldbu	r3,-16(fp)
    9d78:	d0a74744 	addi	r2,gp,-25315
    9d7c:	1885883a 	add	r2,r3,r2
    9d80:	10c00003 	ldbu	r3,0(r2)
    9d84:	e0bffc83 	ldbu	r2,-14(fp)
    9d88:	1884703a 	and	r2,r3,r2
    9d8c:	10803fcc 	andi	r2,r2,255
    9d90:	10002826 	beq	r2,zero,9e34 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
    9d94:	e0fffc03 	ldbu	r3,-16(fp)
    9d98:	e13ffc03 	ldbu	r4,-16(fp)
    9d9c:	d0a74744 	addi	r2,gp,-25315
    9da0:	2085883a 	add	r2,r4,r2
    9da4:	10800003 	ldbu	r2,0(r2)
    9da8:	1009883a 	mov	r4,r2
    9dac:	e0bffc83 	ldbu	r2,-14(fp)
    9db0:	0084303a 	nor	r2,zero,r2
    9db4:	2084703a 	and	r2,r4,r2
    9db8:	1009883a 	mov	r4,r2
    9dbc:	d0a74744 	addi	r2,gp,-25315
    9dc0:	1885883a 	add	r2,r3,r2
    9dc4:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
    9dc8:	e0fffc03 	ldbu	r3,-16(fp)
    9dcc:	d0a74744 	addi	r2,gp,-25315
    9dd0:	1885883a 	add	r2,r3,r2
    9dd4:	10800003 	ldbu	r2,0(r2)
    9dd8:	10803fcc 	andi	r2,r2,255
    9ddc:	1000061e 	bne	r2,zero,9df8 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
    9de0:	e0bffc43 	ldbu	r2,-15(fp)
    9de4:	0084303a 	nor	r2,zero,r2
    9de8:	1007883a 	mov	r3,r2
    9dec:	d0a74703 	ldbu	r2,-25316(gp)
    9df0:	1884703a 	and	r2,r3,r2
    9df4:	d0a74705 	stb	r2,-25316(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
    9df8:	d0e74703 	ldbu	r3,-25316(gp)
    9dfc:	e0bffb83 	ldbu	r2,-18(fp)
    9e00:	1884b03a 	or	r2,r3,r2
    9e04:	d0a74705 	stb	r2,-25316(gp)
         OSRdyTbl[y_new] |= bitx_new;
    9e08:	e0fffb03 	ldbu	r3,-20(fp)
    9e0c:	e13ffb03 	ldbu	r4,-20(fp)
    9e10:	d0a74744 	addi	r2,gp,-25315
    9e14:	2085883a 	add	r2,r4,r2
    9e18:	11000003 	ldbu	r4,0(r2)
    9e1c:	e0bffbc3 	ldbu	r2,-17(fp)
    9e20:	2084b03a 	or	r2,r4,r2
    9e24:	1009883a 	mov	r4,r2
    9e28:	d0a74744 	addi	r2,gp,-25315
    9e2c:	1885883a 	add	r2,r3,r2
    9e30:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
    9e34:	e0bff817 	ldw	r2,-32(fp)
    9e38:	10800717 	ldw	r2,28(r2)
    9e3c:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
    9e40:	e0bff317 	ldw	r2,-52(fp)
    9e44:	10003326 	beq	r2,zero,9f14 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
    9e48:	e0bffc03 	ldbu	r2,-16(fp)
    9e4c:	e0fffc03 	ldbu	r3,-16(fp)
    9e50:	e13ff317 	ldw	r4,-52(fp)
    9e54:	20c7883a 	add	r3,r4,r3
    9e58:	18c002c4 	addi	r3,r3,11
    9e5c:	18c00003 	ldbu	r3,0(r3)
    9e60:	1809883a 	mov	r4,r3
    9e64:	e0fffc83 	ldbu	r3,-14(fp)
    9e68:	00c6303a 	nor	r3,zero,r3
    9e6c:	20c6703a 	and	r3,r4,r3
    9e70:	1809883a 	mov	r4,r3
    9e74:	e0fff317 	ldw	r3,-52(fp)
    9e78:	1885883a 	add	r2,r3,r2
    9e7c:	108002c4 	addi	r2,r2,11
    9e80:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
    9e84:	e0bffc03 	ldbu	r2,-16(fp)
    9e88:	e0fff317 	ldw	r3,-52(fp)
    9e8c:	1885883a 	add	r2,r3,r2
    9e90:	108002c4 	addi	r2,r2,11
    9e94:	10800003 	ldbu	r2,0(r2)
    9e98:	10803fcc 	andi	r2,r2,255
    9e9c:	1000091e 	bne	r2,zero,9ec4 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
    9ea0:	e0bff317 	ldw	r2,-52(fp)
    9ea4:	10800283 	ldbu	r2,10(r2)
    9ea8:	1007883a 	mov	r3,r2
    9eac:	e0bffc43 	ldbu	r2,-15(fp)
    9eb0:	0084303a 	nor	r2,zero,r2
    9eb4:	1884703a 	and	r2,r3,r2
    9eb8:	1007883a 	mov	r3,r2
    9ebc:	e0bff317 	ldw	r2,-52(fp)
    9ec0:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
    9ec4:	e0bff317 	ldw	r2,-52(fp)
    9ec8:	10c00283 	ldbu	r3,10(r2)
    9ecc:	e0bffb83 	ldbu	r2,-18(fp)
    9ed0:	1884b03a 	or	r2,r3,r2
    9ed4:	1007883a 	mov	r3,r2
    9ed8:	e0bff317 	ldw	r2,-52(fp)
    9edc:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
    9ee0:	e0bffb03 	ldbu	r2,-20(fp)
    9ee4:	e0fffb03 	ldbu	r3,-20(fp)
    9ee8:	e13ff317 	ldw	r4,-52(fp)
    9eec:	20c7883a 	add	r3,r4,r3
    9ef0:	18c002c4 	addi	r3,r3,11
    9ef4:	19000003 	ldbu	r4,0(r3)
    9ef8:	e0fffbc3 	ldbu	r3,-17(fp)
    9efc:	20c6b03a 	or	r3,r4,r3
    9f00:	1809883a 	mov	r4,r3
    9f04:	e0fff317 	ldw	r3,-52(fp)
    9f08:	1885883a 	add	r2,r3,r2
    9f0c:	108002c4 	addi	r2,r2,11
    9f10:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
    9f14:	e0bff817 	ldw	r2,-32(fp)
    9f18:	10800817 	ldw	r2,32(r2)
    9f1c:	10004226 	beq	r2,zero,a028 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
    9f20:	e0bff817 	ldw	r2,-32(fp)
    9f24:	10800817 	ldw	r2,32(r2)
    9f28:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
    9f2c:	e0bff417 	ldw	r2,-48(fp)
    9f30:	10800017 	ldw	r2,0(r2)
    9f34:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
    9f38:	00003906 	br	a020 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
    9f3c:	e0bffc03 	ldbu	r2,-16(fp)
    9f40:	e0fffc03 	ldbu	r3,-16(fp)
    9f44:	e13ff317 	ldw	r4,-52(fp)
    9f48:	20c7883a 	add	r3,r4,r3
    9f4c:	18c002c4 	addi	r3,r3,11
    9f50:	18c00003 	ldbu	r3,0(r3)
    9f54:	1809883a 	mov	r4,r3
    9f58:	e0fffc83 	ldbu	r3,-14(fp)
    9f5c:	00c6303a 	nor	r3,zero,r3
    9f60:	20c6703a 	and	r3,r4,r3
    9f64:	1809883a 	mov	r4,r3
    9f68:	e0fff317 	ldw	r3,-52(fp)
    9f6c:	1885883a 	add	r2,r3,r2
    9f70:	108002c4 	addi	r2,r2,11
    9f74:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
    9f78:	e0bffc03 	ldbu	r2,-16(fp)
    9f7c:	e0fff317 	ldw	r3,-52(fp)
    9f80:	1885883a 	add	r2,r3,r2
    9f84:	108002c4 	addi	r2,r2,11
    9f88:	10800003 	ldbu	r2,0(r2)
    9f8c:	10803fcc 	andi	r2,r2,255
    9f90:	1000091e 	bne	r2,zero,9fb8 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
    9f94:	e0bff317 	ldw	r2,-52(fp)
    9f98:	10800283 	ldbu	r2,10(r2)
    9f9c:	1007883a 	mov	r3,r2
    9fa0:	e0bffc43 	ldbu	r2,-15(fp)
    9fa4:	0084303a 	nor	r2,zero,r2
    9fa8:	1884703a 	and	r2,r3,r2
    9fac:	1007883a 	mov	r3,r2
    9fb0:	e0bff317 	ldw	r2,-52(fp)
    9fb4:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
    9fb8:	e0bff317 	ldw	r2,-52(fp)
    9fbc:	10c00283 	ldbu	r3,10(r2)
    9fc0:	e0bffb83 	ldbu	r2,-18(fp)
    9fc4:	1884b03a 	or	r2,r3,r2
    9fc8:	1007883a 	mov	r3,r2
    9fcc:	e0bff317 	ldw	r2,-52(fp)
    9fd0:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
    9fd4:	e0bffb03 	ldbu	r2,-20(fp)
    9fd8:	e0fffb03 	ldbu	r3,-20(fp)
    9fdc:	e13ff317 	ldw	r4,-52(fp)
    9fe0:	20c7883a 	add	r3,r4,r3
    9fe4:	18c002c4 	addi	r3,r3,11
    9fe8:	19000003 	ldbu	r4,0(r3)
    9fec:	e0fffbc3 	ldbu	r3,-17(fp)
    9ff0:	20c6b03a 	or	r3,r4,r3
    9ff4:	1809883a 	mov	r4,r3
    9ff8:	e0fff317 	ldw	r3,-52(fp)
    9ffc:	1885883a 	add	r2,r3,r2
    a000:	108002c4 	addi	r2,r2,11
    a004:	11000005 	stb	r4,0(r2)
            pevents++;
    a008:	e0bff417 	ldw	r2,-48(fp)
    a00c:	10800104 	addi	r2,r2,4
    a010:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
    a014:	e0bff417 	ldw	r2,-48(fp)
    a018:	10800017 	ldw	r2,0(r2)
    a01c:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
    a020:	e0bff317 	ldw	r2,-52(fp)
    a024:	103fc51e 	bne	r2,zero,9f3c <__alt_mem_onchip_memory2_0+0xfc005f3c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
    a028:	e0bff817 	ldw	r2,-32(fp)
    a02c:	e0ffff03 	ldbu	r3,-4(fp)
    a030:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
    a034:	e0bff817 	ldw	r2,-32(fp)
    a038:	e0fffb03 	ldbu	r3,-20(fp)
    a03c:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
    a040:	e0bff817 	ldw	r2,-32(fp)
    a044:	e0fffb43 	ldbu	r3,-19(fp)
    a048:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
    a04c:	e0bff817 	ldw	r2,-32(fp)
    a050:	e0fffb83 	ldbu	r3,-18(fp)
    a054:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
    a058:	e0bff817 	ldw	r2,-32(fp)
    a05c:	e0fffbc3 	ldbu	r3,-17(fp)
    a060:	10c00d45 	stb	r3,53(r2)
    a064:	e0bff517 	ldw	r2,-44(fp)
    a068:	e0bffa15 	stw	r2,-24(fp)
    a06c:	e0bffa17 	ldw	r2,-24(fp)
    a070:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    a074:	d0a73b43 	ldbu	r2,-25363(gp)
    a078:	10803fcc 	andi	r2,r2,255
    a07c:	10800058 	cmpnei	r2,r2,1
    a080:	1000011e 	bne	r2,zero,a088 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
    a084:	00059800 	call	5980 <OS_Sched>
    }
    return (OS_ERR_NONE);
    a088:	0005883a 	mov	r2,zero
}
    a08c:	e037883a 	mov	sp,fp
    a090:	dfc00117 	ldw	ra,4(sp)
    a094:	df000017 	ldw	fp,0(sp)
    a098:	dec00204 	addi	sp,sp,8
    a09c:	f800283a 	ret

0000a0a0 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    a0a0:	deffee04 	addi	sp,sp,-72
    a0a4:	dfc01115 	stw	ra,68(sp)
    a0a8:	df001015 	stw	fp,64(sp)
    a0ac:	df001004 	addi	fp,sp,64
    a0b0:	e13ffc15 	stw	r4,-16(fp)
    a0b4:	e17ffd15 	stw	r5,-12(fp)
    a0b8:	e1bffe15 	stw	r6,-8(fp)
    a0bc:	3805883a 	mov	r2,r7
    a0c0:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    a0c4:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    a0c8:	e0bfff03 	ldbu	r2,-4(fp)
    a0cc:	10800570 	cmpltui	r2,r2,21
    a0d0:	1000021e 	bne	r2,zero,a0dc <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
    a0d4:	00800a84 	movi	r2,42
    a0d8:	00005706 	br	a238 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a0dc:	0005303a 	rdctl	r2,status
    a0e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a0e4:	e0fffb17 	ldw	r3,-20(fp)
    a0e8:	00bfff84 	movi	r2,-2
    a0ec:	1884703a 	and	r2,r3,r2
    a0f0:	1001703a 	wrctl	status,r2
  
  return context;
    a0f4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    a0f8:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    a0fc:	d0a74903 	ldbu	r2,-25308(gp)
    a100:	10803fcc 	andi	r2,r2,255
    a104:	10000626 	beq	r2,zero,a120 <OSTaskCreate+0x80>
    a108:	e0bff317 	ldw	r2,-52(fp)
    a10c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a110:	e0bff417 	ldw	r2,-48(fp)
    a114:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    a118:	00800f04 	movi	r2,60
    a11c:	00004606 	br	a238 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    a120:	e0ffff03 	ldbu	r3,-4(fp)
    a124:	00800074 	movhi	r2,1
    a128:	109ed204 	addi	r2,r2,31560
    a12c:	18c7883a 	add	r3,r3,r3
    a130:	18c7883a 	add	r3,r3,r3
    a134:	10c5883a 	add	r2,r2,r3
    a138:	10800017 	ldw	r2,0(r2)
    a13c:	1000391e 	bne	r2,zero,a224 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    a140:	e0ffff03 	ldbu	r3,-4(fp)
    a144:	00800074 	movhi	r2,1
    a148:	109ed204 	addi	r2,r2,31560
    a14c:	18c7883a 	add	r3,r3,r3
    a150:	18c7883a 	add	r3,r3,r3
    a154:	10c5883a 	add	r2,r2,r3
    a158:	00c00044 	movi	r3,1
    a15c:	10c00015 	stw	r3,0(r2)
    a160:	e0bff317 	ldw	r2,-52(fp)
    a164:	e0bff515 	stw	r2,-44(fp)
    a168:	e0bff517 	ldw	r2,-44(fp)
    a16c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    a170:	000f883a 	mov	r7,zero
    a174:	e1bffe17 	ldw	r6,-8(fp)
    a178:	e17ffd17 	ldw	r5,-12(fp)
    a17c:	e13ffc17 	ldw	r4,-16(fp)
    a180:	000de7c0 	call	de7c <OSTaskStkInit>
    a184:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    a188:	e0bfff03 	ldbu	r2,-4(fp)
    a18c:	d8000215 	stw	zero,8(sp)
    a190:	d8000115 	stw	zero,4(sp)
    a194:	d8000015 	stw	zero,0(sp)
    a198:	000f883a 	mov	r7,zero
    a19c:	000d883a 	mov	r6,zero
    a1a0:	e17ff717 	ldw	r5,-36(fp)
    a1a4:	1009883a 	mov	r4,r2
    a1a8:	0005d800 	call	5d80 <OS_TCBInit>
    a1ac:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
    a1b0:	e0bff803 	ldbu	r2,-32(fp)
    a1b4:	1000061e 	bne	r2,zero,a1d0 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    a1b8:	d0a73b43 	ldbu	r2,-25363(gp)
    a1bc:	10803fcc 	andi	r2,r2,255
    a1c0:	10800058 	cmpnei	r2,r2,1
    a1c4:	1000151e 	bne	r2,zero,a21c <OSTaskCreate+0x17c>
                OS_Sched();
    a1c8:	00059800 	call	5980 <OS_Sched>
    a1cc:	00001306 	br	a21c <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a1d0:	0005303a 	rdctl	r2,status
    a1d4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a1d8:	e0fffa17 	ldw	r3,-24(fp)
    a1dc:	00bfff84 	movi	r2,-2
    a1e0:	1884703a 	and	r2,r3,r2
    a1e4:	1001703a 	wrctl	status,r2
  
  return context;
    a1e8:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    a1ec:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    a1f0:	e0ffff03 	ldbu	r3,-4(fp)
    a1f4:	00800074 	movhi	r2,1
    a1f8:	109ed204 	addi	r2,r2,31560
    a1fc:	18c7883a 	add	r3,r3,r3
    a200:	18c7883a 	add	r3,r3,r3
    a204:	10c5883a 	add	r2,r2,r3
    a208:	10000015 	stw	zero,0(r2)
    a20c:	e0bff317 	ldw	r2,-52(fp)
    a210:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a214:	e0bff617 	ldw	r2,-40(fp)
    a218:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    a21c:	e0bff803 	ldbu	r2,-32(fp)
    a220:	00000506 	br	a238 <OSTaskCreate+0x198>
    a224:	e0bff317 	ldw	r2,-52(fp)
    a228:	e0bff915 	stw	r2,-28(fp)
    a22c:	e0bff917 	ldw	r2,-28(fp)
    a230:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    a234:	00800a04 	movi	r2,40
}
    a238:	e037883a 	mov	sp,fp
    a23c:	dfc00117 	ldw	ra,4(sp)
    a240:	df000017 	ldw	fp,0(sp)
    a244:	dec00204 	addi	sp,sp,8
    a248:	f800283a 	ret

0000a24c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    a24c:	deffec04 	addi	sp,sp,-80
    a250:	dfc01315 	stw	ra,76(sp)
    a254:	df001215 	stw	fp,72(sp)
    a258:	df001204 	addi	fp,sp,72
    a25c:	e13ffa15 	stw	r4,-24(fp)
    a260:	e17ffb15 	stw	r5,-20(fp)
    a264:	e1bffc15 	stw	r6,-16(fp)
    a268:	3809883a 	mov	r4,r7
    a26c:	e0c00217 	ldw	r3,8(fp)
    a270:	e0800617 	ldw	r2,24(fp)
    a274:	e13ffd05 	stb	r4,-12(fp)
    a278:	e0fffe0d 	sth	r3,-8(fp)
    a27c:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    a280:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    a284:	e0bffd03 	ldbu	r2,-12(fp)
    a288:	10800570 	cmpltui	r2,r2,21
    a28c:	1000021e 	bne	r2,zero,a298 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
    a290:	00800a84 	movi	r2,42
    a294:	00006106 	br	a41c <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a298:	0005303a 	rdctl	r2,status
    a29c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a2a0:	e0fff917 	ldw	r3,-28(fp)
    a2a4:	00bfff84 	movi	r2,-2
    a2a8:	1884703a 	and	r2,r3,r2
    a2ac:	1001703a 	wrctl	status,r2
  
  return context;
    a2b0:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    a2b4:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    a2b8:	d0a74903 	ldbu	r2,-25308(gp)
    a2bc:	10803fcc 	andi	r2,r2,255
    a2c0:	10000626 	beq	r2,zero,a2dc <OSTaskCreateExt+0x90>
    a2c4:	e0bff117 	ldw	r2,-60(fp)
    a2c8:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a2cc:	e0bff217 	ldw	r2,-56(fp)
    a2d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    a2d4:	00800f04 	movi	r2,60
    a2d8:	00005006 	br	a41c <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    a2dc:	e0fffd03 	ldbu	r3,-12(fp)
    a2e0:	00800074 	movhi	r2,1
    a2e4:	109ed204 	addi	r2,r2,31560
    a2e8:	18c7883a 	add	r3,r3,r3
    a2ec:	18c7883a 	add	r3,r3,r3
    a2f0:	10c5883a 	add	r2,r2,r3
    a2f4:	10800017 	ldw	r2,0(r2)
    a2f8:	1000431e 	bne	r2,zero,a408 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    a2fc:	e0fffd03 	ldbu	r3,-12(fp)
    a300:	00800074 	movhi	r2,1
    a304:	109ed204 	addi	r2,r2,31560
    a308:	18c7883a 	add	r3,r3,r3
    a30c:	18c7883a 	add	r3,r3,r3
    a310:	10c5883a 	add	r2,r2,r3
    a314:	00c00044 	movi	r3,1
    a318:	10c00015 	stw	r3,0(r2)
    a31c:	e0bff117 	ldw	r2,-60(fp)
    a320:	e0bff315 	stw	r2,-52(fp)
    a324:	e0bff317 	ldw	r2,-52(fp)
    a328:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
    a32c:	e0bfff0b 	ldhu	r2,-4(fp)
    a330:	100d883a 	mov	r6,r2
    a334:	e1400417 	ldw	r5,16(fp)
    a338:	e1000317 	ldw	r4,12(fp)
    a33c:	000b2ac0 	call	b2ac <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    a340:	e0bfff0b 	ldhu	r2,-4(fp)
    a344:	100f883a 	mov	r7,r2
    a348:	e1bffc17 	ldw	r6,-16(fp)
    a34c:	e17ffb17 	ldw	r5,-20(fp)
    a350:	e13ffa17 	ldw	r4,-24(fp)
    a354:	000de7c0 	call	de7c <OSTaskStkInit>
    a358:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    a35c:	e0fffd03 	ldbu	r3,-12(fp)
    a360:	e13ffe0b 	ldhu	r4,-8(fp)
    a364:	e0bfff0b 	ldhu	r2,-4(fp)
    a368:	d8800215 	stw	r2,8(sp)
    a36c:	e0800517 	ldw	r2,20(fp)
    a370:	d8800115 	stw	r2,4(sp)
    a374:	e0800417 	ldw	r2,16(fp)
    a378:	d8800015 	stw	r2,0(sp)
    a37c:	200f883a 	mov	r7,r4
    a380:	e1800317 	ldw	r6,12(fp)
    a384:	e17ff517 	ldw	r5,-44(fp)
    a388:	1809883a 	mov	r4,r3
    a38c:	0005d800 	call	5d80 <OS_TCBInit>
    a390:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
    a394:	e0bff603 	ldbu	r2,-40(fp)
    a398:	1000061e 	bne	r2,zero,a3b4 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    a39c:	d0a73b43 	ldbu	r2,-25363(gp)
    a3a0:	10803fcc 	andi	r2,r2,255
    a3a4:	10800058 	cmpnei	r2,r2,1
    a3a8:	1000151e 	bne	r2,zero,a400 <OSTaskCreateExt+0x1b4>
                OS_Sched();
    a3ac:	00059800 	call	5980 <OS_Sched>
    a3b0:	00001306 	br	a400 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a3b4:	0005303a 	rdctl	r2,status
    a3b8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a3bc:	e0fff817 	ldw	r3,-32(fp)
    a3c0:	00bfff84 	movi	r2,-2
    a3c4:	1884703a 	and	r2,r3,r2
    a3c8:	1001703a 	wrctl	status,r2
  
  return context;
    a3cc:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    a3d0:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    a3d4:	e0fffd03 	ldbu	r3,-12(fp)
    a3d8:	00800074 	movhi	r2,1
    a3dc:	109ed204 	addi	r2,r2,31560
    a3e0:	18c7883a 	add	r3,r3,r3
    a3e4:	18c7883a 	add	r3,r3,r3
    a3e8:	10c5883a 	add	r2,r2,r3
    a3ec:	10000015 	stw	zero,0(r2)
    a3f0:	e0bff117 	ldw	r2,-60(fp)
    a3f4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a3f8:	e0bff417 	ldw	r2,-48(fp)
    a3fc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    a400:	e0bff603 	ldbu	r2,-40(fp)
    a404:	00000506 	br	a41c <OSTaskCreateExt+0x1d0>
    a408:	e0bff117 	ldw	r2,-60(fp)
    a40c:	e0bff715 	stw	r2,-36(fp)
    a410:	e0bff717 	ldw	r2,-36(fp)
    a414:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    a418:	00800a04 	movi	r2,40
}
    a41c:	e037883a 	mov	sp,fp
    a420:	dfc00117 	ldw	ra,4(sp)
    a424:	df000017 	ldw	fp,0(sp)
    a428:	dec00204 	addi	sp,sp,8
    a42c:	f800283a 	ret

0000a430 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
    a430:	defff404 	addi	sp,sp,-48
    a434:	dfc00b15 	stw	ra,44(sp)
    a438:	df000a15 	stw	fp,40(sp)
    a43c:	df000a04 	addi	fp,sp,40
    a440:	2005883a 	mov	r2,r4
    a444:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
    a448:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
    a44c:	d0a74903 	ldbu	r2,-25308(gp)
    a450:	10803fcc 	andi	r2,r2,255
    a454:	10000226 	beq	r2,zero,a460 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
    a458:	00801004 	movi	r2,64
    a45c:	0000c006 	br	a760 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
    a460:	e0bfff03 	ldbu	r2,-4(fp)
    a464:	10800518 	cmpnei	r2,r2,20
    a468:	1000021e 	bne	r2,zero,a474 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
    a46c:	00800f84 	movi	r2,62
    a470:	0000bb06 	br	a760 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
    a474:	e0bfff03 	ldbu	r2,-4(fp)
    a478:	10800530 	cmpltui	r2,r2,20
    a47c:	1000051e 	bne	r2,zero,a494 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
    a480:	e0bfff03 	ldbu	r2,-4(fp)
    a484:	10803fe0 	cmpeqi	r2,r2,255
    a488:	1000021e 	bne	r2,zero,a494 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
    a48c:	00800a84 	movi	r2,42
    a490:	0000b306 	br	a760 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a494:	0005303a 	rdctl	r2,status
    a498:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a49c:	e0fffe17 	ldw	r3,-8(fp)
    a4a0:	00bfff84 	movi	r2,-2
    a4a4:	1884703a 	and	r2,r3,r2
    a4a8:	1001703a 	wrctl	status,r2
  
  return context;
    a4ac:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
    a4b0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
    a4b4:	e0bfff03 	ldbu	r2,-4(fp)
    a4b8:	10803fd8 	cmpnei	r2,r2,255
    a4bc:	1000031e 	bne	r2,zero,a4cc <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
    a4c0:	d0a74a17 	ldw	r2,-25304(gp)
    a4c4:	10800c83 	ldbu	r2,50(r2)
    a4c8:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    a4cc:	e0ffff03 	ldbu	r3,-4(fp)
    a4d0:	00800074 	movhi	r2,1
    a4d4:	109ed204 	addi	r2,r2,31560
    a4d8:	18c7883a 	add	r3,r3,r3
    a4dc:	18c7883a 	add	r3,r3,r3
    a4e0:	10c5883a 	add	r2,r2,r3
    a4e4:	10800017 	ldw	r2,0(r2)
    a4e8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
    a4ec:	e0bff817 	ldw	r2,-32(fp)
    a4f0:	1000061e 	bne	r2,zero,a50c <OSTaskDel+0xdc>
    a4f4:	e0bff617 	ldw	r2,-40(fp)
    a4f8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a4fc:	e0bff717 	ldw	r2,-36(fp)
    a500:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    a504:	008010c4 	movi	r2,67
    a508:	00009506 	br	a760 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
    a50c:	e0bff817 	ldw	r2,-32(fp)
    a510:	10800058 	cmpnei	r2,r2,1
    a514:	1000061e 	bne	r2,zero,a530 <OSTaskDel+0x100>
    a518:	e0bff617 	ldw	r2,-40(fp)
    a51c:	e0bff915 	stw	r2,-28(fp)
    a520:	e0bff917 	ldw	r2,-28(fp)
    a524:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    a528:	00800f44 	movi	r2,61
    a52c:	00008c06 	br	a760 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
    a530:	e0bff817 	ldw	r2,-32(fp)
    a534:	10800d03 	ldbu	r2,52(r2)
    a538:	10c03fcc 	andi	r3,r2,255
    a53c:	e0bff817 	ldw	r2,-32(fp)
    a540:	10800d03 	ldbu	r2,52(r2)
    a544:	11003fcc 	andi	r4,r2,255
    a548:	d0a74744 	addi	r2,gp,-25315
    a54c:	2085883a 	add	r2,r4,r2
    a550:	10800003 	ldbu	r2,0(r2)
    a554:	1009883a 	mov	r4,r2
    a558:	e0bff817 	ldw	r2,-32(fp)
    a55c:	10800d43 	ldbu	r2,53(r2)
    a560:	0084303a 	nor	r2,zero,r2
    a564:	2084703a 	and	r2,r4,r2
    a568:	1009883a 	mov	r4,r2
    a56c:	d0a74744 	addi	r2,gp,-25315
    a570:	1885883a 	add	r2,r3,r2
    a574:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
    a578:	e0bff817 	ldw	r2,-32(fp)
    a57c:	10800d03 	ldbu	r2,52(r2)
    a580:	10c03fcc 	andi	r3,r2,255
    a584:	d0a74744 	addi	r2,gp,-25315
    a588:	1885883a 	add	r2,r3,r2
    a58c:	10800003 	ldbu	r2,0(r2)
    a590:	10803fcc 	andi	r2,r2,255
    a594:	1000071e 	bne	r2,zero,a5b4 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
    a598:	e0bff817 	ldw	r2,-32(fp)
    a59c:	10800d83 	ldbu	r2,54(r2)
    a5a0:	0084303a 	nor	r2,zero,r2
    a5a4:	1007883a 	mov	r3,r2
    a5a8:	d0a74703 	ldbu	r2,-25316(gp)
    a5ac:	1884703a 	and	r2,r3,r2
    a5b0:	d0a74705 	stb	r2,-25316(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
    a5b4:	e0bff817 	ldw	r2,-32(fp)
    a5b8:	10800717 	ldw	r2,28(r2)
    a5bc:	10000526 	beq	r2,zero,a5d4 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
    a5c0:	e0bff817 	ldw	r2,-32(fp)
    a5c4:	10800717 	ldw	r2,28(r2)
    a5c8:	100b883a 	mov	r5,r2
    a5cc:	e13ff817 	ldw	r4,-32(fp)
    a5d0:	000532c0 	call	532c <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
    a5d4:	e0bff817 	ldw	r2,-32(fp)
    a5d8:	10800817 	ldw	r2,32(r2)
    a5dc:	10000526 	beq	r2,zero,a5f4 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    a5e0:	e0bff817 	ldw	r2,-32(fp)
    a5e4:	10800817 	ldw	r2,32(r2)
    a5e8:	100b883a 	mov	r5,r2
    a5ec:	e13ff817 	ldw	r4,-32(fp)
    a5f0:	00053e40 	call	53e4 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
    a5f4:	e0bff817 	ldw	r2,-32(fp)
    a5f8:	10800a17 	ldw	r2,40(r2)
    a5fc:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
    a600:	e0bffb17 	ldw	r2,-20(fp)
    a604:	10000226 	beq	r2,zero,a610 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    a608:	e13ffb17 	ldw	r4,-20(fp)
    a60c:	00078540 	call	7854 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
    a610:	e0bff817 	ldw	r2,-32(fp)
    a614:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    a618:	e0bff817 	ldw	r2,-32(fp)
    a61c:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    a620:	e0bff817 	ldw	r2,-32(fp)
    a624:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
    a628:	d0a73b03 	ldbu	r2,-25364(gp)
    a62c:	10803fcc 	andi	r2,r2,255
    a630:	10803fe0 	cmpeqi	r2,r2,255
    a634:	1000031e 	bne	r2,zero,a644 <OSTaskDel+0x214>
        OSLockNesting++;
    a638:	d0a73b03 	ldbu	r2,-25364(gp)
    a63c:	10800044 	addi	r2,r2,1
    a640:	d0a73b05 	stb	r2,-25364(gp)
    a644:	e0bff617 	ldw	r2,-40(fp)
    a648:	e0bffd15 	stw	r2,-12(fp)
    a64c:	e0bffd17 	ldw	r2,-12(fp)
    a650:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
    a654:	0004f140 	call	4f14 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a658:	0005303a 	rdctl	r2,status
    a65c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a660:	e0fffa17 	ldw	r3,-24(fp)
    a664:	00bfff84 	movi	r2,-2
    a668:	1884703a 	and	r2,r3,r2
    a66c:	1001703a 	wrctl	status,r2
  
  return context;
    a670:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    a674:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
    a678:	d0a73b03 	ldbu	r2,-25364(gp)
    a67c:	10803fcc 	andi	r2,r2,255
    a680:	10000326 	beq	r2,zero,a690 <OSTaskDel+0x260>
        OSLockNesting--;
    a684:	d0a73b03 	ldbu	r2,-25364(gp)
    a688:	10bfffc4 	addi	r2,r2,-1
    a68c:	d0a73b05 	stb	r2,-25364(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    a690:	e13ff817 	ldw	r4,-32(fp)
    a694:	000dffc0 	call	dffc <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
    a698:	d0a74343 	ldbu	r2,-25331(gp)
    a69c:	10bfffc4 	addi	r2,r2,-1
    a6a0:	d0a74345 	stb	r2,-25331(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    a6a4:	e0ffff03 	ldbu	r3,-4(fp)
    a6a8:	00800074 	movhi	r2,1
    a6ac:	109ed204 	addi	r2,r2,31560
    a6b0:	18c7883a 	add	r3,r3,r3
    a6b4:	18c7883a 	add	r3,r3,r3
    a6b8:	10c5883a 	add	r2,r2,r3
    a6bc:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
    a6c0:	e0bff817 	ldw	r2,-32(fp)
    a6c4:	10800617 	ldw	r2,24(r2)
    a6c8:	1000071e 	bne	r2,zero,a6e8 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
    a6cc:	e0bff817 	ldw	r2,-32(fp)
    a6d0:	10800517 	ldw	r2,20(r2)
    a6d4:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
    a6d8:	e0bff817 	ldw	r2,-32(fp)
    a6dc:	10800517 	ldw	r2,20(r2)
    a6e0:	d0a73e15 	stw	r2,-25352(gp)
    a6e4:	00000a06 	br	a710 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
    a6e8:	e0bff817 	ldw	r2,-32(fp)
    a6ec:	10800617 	ldw	r2,24(r2)
    a6f0:	e0fff817 	ldw	r3,-32(fp)
    a6f4:	18c00517 	ldw	r3,20(r3)
    a6f8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
    a6fc:	e0bff817 	ldw	r2,-32(fp)
    a700:	10800517 	ldw	r2,20(r2)
    a704:	e0fff817 	ldw	r3,-32(fp)
    a708:	18c00617 	ldw	r3,24(r3)
    a70c:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
    a710:	d0e74217 	ldw	r3,-25336(gp)
    a714:	e0bff817 	ldw	r2,-32(fp)
    a718:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
    a71c:	e0bff817 	ldw	r2,-32(fp)
    a720:	d0a74215 	stw	r2,-25336(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
    a724:	e0bff817 	ldw	r2,-32(fp)
    a728:	00c00fc4 	movi	r3,63
    a72c:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    a730:	e0bff817 	ldw	r2,-32(fp)
    a734:	10001345 	stb	zero,77(r2)
    a738:	e0bff617 	ldw	r2,-40(fp)
    a73c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a740:	e0bffc17 	ldw	r2,-16(fp)
    a744:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    a748:	d0a73b43 	ldbu	r2,-25363(gp)
    a74c:	10803fcc 	andi	r2,r2,255
    a750:	10800058 	cmpnei	r2,r2,1
    a754:	1000011e 	bne	r2,zero,a75c <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
    a758:	00059800 	call	5980 <OS_Sched>
    }
    return (OS_ERR_NONE);
    a75c:	0005883a 	mov	r2,zero
}
    a760:	e037883a 	mov	sp,fp
    a764:	dfc00117 	ldw	ra,4(sp)
    a768:	df000017 	ldw	fp,0(sp)
    a76c:	dec00204 	addi	sp,sp,8
    a770:	f800283a 	ret

0000a774 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
    a774:	defff504 	addi	sp,sp,-44
    a778:	df000a15 	stw	fp,40(sp)
    a77c:	df000a04 	addi	fp,sp,40
    a780:	2005883a 	mov	r2,r4
    a784:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    a788:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
    a78c:	e0bfff03 	ldbu	r2,-4(fp)
    a790:	10800518 	cmpnei	r2,r2,20
    a794:	1000021e 	bne	r2,zero,a7a0 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
    a798:	00800f84 	movi	r2,62
    a79c:	00004506 	br	a8b4 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    a7a0:	e0bfff03 	ldbu	r2,-4(fp)
    a7a4:	10800530 	cmpltui	r2,r2,20
    a7a8:	1000051e 	bne	r2,zero,a7c0 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
    a7ac:	e0bfff03 	ldbu	r2,-4(fp)
    a7b0:	10803fe0 	cmpeqi	r2,r2,255
    a7b4:	1000021e 	bne	r2,zero,a7c0 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
    a7b8:	00800a84 	movi	r2,42
    a7bc:	00003d06 	br	a8b4 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
    a7c0:	e0bfff03 	ldbu	r2,-4(fp)
    a7c4:	10803fd8 	cmpnei	r2,r2,255
    a7c8:	1000111e 	bne	r2,zero,a810 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a7cc:	0005303a 	rdctl	r2,status
    a7d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a7d4:	e0fff917 	ldw	r3,-28(fp)
    a7d8:	00bfff84 	movi	r2,-2
    a7dc:	1884703a 	and	r2,r3,r2
    a7e0:	1001703a 	wrctl	status,r2
  
  return context;
    a7e4:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
    a7e8:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
    a7ec:	d0a74a17 	ldw	r2,-25304(gp)
    a7f0:	10800dc3 	ldbu	r2,55(r2)
    a7f4:	e0bff805 	stb	r2,-32(fp)
    a7f8:	e0bff617 	ldw	r2,-40(fp)
    a7fc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a800:	e0bffe17 	ldw	r2,-8(fp)
    a804:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
    a808:	e0bff803 	ldbu	r2,-32(fp)
    a80c:	00002906 	br	a8b4 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a810:	0005303a 	rdctl	r2,status
    a814:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a818:	e0fff717 	ldw	r3,-36(fp)
    a81c:	00bfff84 	movi	r2,-2
    a820:	1884703a 	and	r2,r3,r2
    a824:	1001703a 	wrctl	status,r2
  
  return context;
    a828:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
    a82c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    a830:	e0ffff03 	ldbu	r3,-4(fp)
    a834:	00800074 	movhi	r2,1
    a838:	109ed204 	addi	r2,r2,31560
    a83c:	18c7883a 	add	r3,r3,r3
    a840:	18c7883a 	add	r3,r3,r3
    a844:	10c5883a 	add	r2,r2,r3
    a848:	10800017 	ldw	r2,0(r2)
    a84c:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
    a850:	e0bffb17 	ldw	r2,-20(fp)
    a854:	1000061e 	bne	r2,zero,a870 <OSTaskDelReq+0xfc>
    a858:	e0bff617 	ldw	r2,-40(fp)
    a85c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a860:	e0bffa17 	ldw	r2,-24(fp)
    a864:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    a868:	008010c4 	movi	r2,67
    a86c:	00001106 	br	a8b4 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
    a870:	e0bffb17 	ldw	r2,-20(fp)
    a874:	10800058 	cmpnei	r2,r2,1
    a878:	1000061e 	bne	r2,zero,a894 <OSTaskDelReq+0x120>
    a87c:	e0bff617 	ldw	r2,-40(fp)
    a880:	e0bffc15 	stw	r2,-16(fp)
    a884:	e0bffc17 	ldw	r2,-16(fp)
    a888:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    a88c:	00800f44 	movi	r2,61
    a890:	00000806 	br	a8b4 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
    a894:	e0bffb17 	ldw	r2,-20(fp)
    a898:	00c00fc4 	movi	r3,63
    a89c:	10c00dc5 	stb	r3,55(r2)
    a8a0:	e0bff617 	ldw	r2,-40(fp)
    a8a4:	e0bffd15 	stw	r2,-12(fp)
    a8a8:	e0bffd17 	ldw	r2,-12(fp)
    a8ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    a8b0:	0005883a 	mov	r2,zero
}
    a8b4:	e037883a 	mov	sp,fp
    a8b8:	df000017 	ldw	fp,0(sp)
    a8bc:	dec00104 	addi	sp,sp,4
    a8c0:	f800283a 	ret

0000a8c4 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
    a8c4:	defff404 	addi	sp,sp,-48
    a8c8:	dfc00b15 	stw	ra,44(sp)
    a8cc:	df000a15 	stw	fp,40(sp)
    a8d0:	df000a04 	addi	fp,sp,40
    a8d4:	2005883a 	mov	r2,r4
    a8d8:	e17ffe15 	stw	r5,-8(fp)
    a8dc:	e1bfff15 	stw	r6,-4(fp)
    a8e0:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
    a8e4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
    a8e8:	e0bfff17 	ldw	r2,-4(fp)
    a8ec:	1000021e 	bne	r2,zero,a8f8 <OSTaskNameGet+0x34>
        return (0);
    a8f0:	0005883a 	mov	r2,zero
    a8f4:	00005406 	br	aa48 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
    a8f8:	e0bffd03 	ldbu	r2,-12(fp)
    a8fc:	10800570 	cmpltui	r2,r2,21
    a900:	1000081e 	bne	r2,zero,a924 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
    a904:	e0bffd03 	ldbu	r2,-12(fp)
    a908:	10803fe0 	cmpeqi	r2,r2,255
    a90c:	1000051e 	bne	r2,zero,a924 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
    a910:	e0bfff17 	ldw	r2,-4(fp)
    a914:	00c00a84 	movi	r3,42
    a918:	10c00005 	stb	r3,0(r2)
            return (0);
    a91c:	0005883a 	mov	r2,zero
    a920:	00004906 	br	aa48 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
    a924:	e0bffe17 	ldw	r2,-8(fp)
    a928:	1000051e 	bne	r2,zero,a940 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
    a92c:	e0bfff17 	ldw	r2,-4(fp)
    a930:	00c00304 	movi	r3,12
    a934:	10c00005 	stb	r3,0(r2)
        return (0);
    a938:	0005883a 	mov	r2,zero
    a93c:	00004206 	br	aa48 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
    a940:	d0a74903 	ldbu	r2,-25308(gp)
    a944:	10803fcc 	andi	r2,r2,255
    a948:	10000526 	beq	r2,zero,a960 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
    a94c:	e0bfff17 	ldw	r2,-4(fp)
    a950:	00c00444 	movi	r3,17
    a954:	10c00005 	stb	r3,0(r2)
        return (0);
    a958:	0005883a 	mov	r2,zero
    a95c:	00003a06 	br	aa48 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a960:	0005303a 	rdctl	r2,status
    a964:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a968:	e0fffc17 	ldw	r3,-16(fp)
    a96c:	00bfff84 	movi	r2,-2
    a970:	1884703a 	and	r2,r3,r2
    a974:	1001703a 	wrctl	status,r2
  
  return context;
    a978:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    a97c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    a980:	e0bffd03 	ldbu	r2,-12(fp)
    a984:	10803fd8 	cmpnei	r2,r2,255
    a988:	1000031e 	bne	r2,zero,a998 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
    a98c:	d0a74a17 	ldw	r2,-25304(gp)
    a990:	10800c83 	ldbu	r2,50(r2)
    a994:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    a998:	e0fffd03 	ldbu	r3,-12(fp)
    a99c:	00800074 	movhi	r2,1
    a9a0:	109ed204 	addi	r2,r2,31560
    a9a4:	18c7883a 	add	r3,r3,r3
    a9a8:	18c7883a 	add	r3,r3,r3
    a9ac:	10c5883a 	add	r2,r2,r3
    a9b0:	10800017 	ldw	r2,0(r2)
    a9b4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    a9b8:	e0bff817 	ldw	r2,-32(fp)
    a9bc:	1000091e 	bne	r2,zero,a9e4 <OSTaskNameGet+0x120>
    a9c0:	e0bff617 	ldw	r2,-40(fp)
    a9c4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a9c8:	e0bff717 	ldw	r2,-36(fp)
    a9cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
    a9d0:	e0bfff17 	ldw	r2,-4(fp)
    a9d4:	00c010c4 	movi	r3,67
    a9d8:	10c00005 	stb	r3,0(r2)
        return (0);
    a9dc:	0005883a 	mov	r2,zero
    a9e0:	00001906 	br	aa48 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    a9e4:	e0bff817 	ldw	r2,-32(fp)
    a9e8:	10800058 	cmpnei	r2,r2,1
    a9ec:	1000091e 	bne	r2,zero,aa14 <OSTaskNameGet+0x150>
    a9f0:	e0bff617 	ldw	r2,-40(fp)
    a9f4:	e0bff915 	stw	r2,-28(fp)
    a9f8:	e0bff917 	ldw	r2,-28(fp)
    a9fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
    aa00:	e0bfff17 	ldw	r2,-4(fp)
    aa04:	00c010c4 	movi	r3,67
    aa08:	10c00005 	stb	r3,0(r2)
        return (0);
    aa0c:	0005883a 	mov	r2,zero
    aa10:	00000d06 	br	aa48 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    aa14:	e0bff817 	ldw	r2,-32(fp)
    aa18:	10801304 	addi	r2,r2,76
    aa1c:	100b883a 	mov	r5,r2
    aa20:	e13ffe17 	ldw	r4,-8(fp)
    aa24:	0005ac40 	call	5ac4 <OS_StrCopy>
    aa28:	e0bffb05 	stb	r2,-20(fp)
    aa2c:	e0bff617 	ldw	r2,-40(fp)
    aa30:	e0bffa15 	stw	r2,-24(fp)
    aa34:	e0bffa17 	ldw	r2,-24(fp)
    aa38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    aa3c:	e0bfff17 	ldw	r2,-4(fp)
    aa40:	10000005 	stb	zero,0(r2)
    return (len);
    aa44:	e0bffb03 	ldbu	r2,-20(fp)
}
    aa48:	e037883a 	mov	sp,fp
    aa4c:	dfc00117 	ldw	ra,4(sp)
    aa50:	df000017 	ldw	fp,0(sp)
    aa54:	dec00204 	addi	sp,sp,8
    aa58:	f800283a 	ret

0000aa5c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
    aa5c:	defff304 	addi	sp,sp,-52
    aa60:	dfc00c15 	stw	ra,48(sp)
    aa64:	df000b15 	stw	fp,44(sp)
    aa68:	df000b04 	addi	fp,sp,44
    aa6c:	2005883a 	mov	r2,r4
    aa70:	e17ffe15 	stw	r5,-8(fp)
    aa74:	e1bfff15 	stw	r6,-4(fp)
    aa78:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    aa7c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    aa80:	e0bfff17 	ldw	r2,-4(fp)
    aa84:	10005c26 	beq	r2,zero,abf8 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
    aa88:	e0bffd03 	ldbu	r2,-12(fp)
    aa8c:	10800570 	cmpltui	r2,r2,21
    aa90:	1000071e 	bne	r2,zero,aab0 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
    aa94:	e0bffd03 	ldbu	r2,-12(fp)
    aa98:	10803fe0 	cmpeqi	r2,r2,255
    aa9c:	1000041e 	bne	r2,zero,aab0 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
    aaa0:	e0bfff17 	ldw	r2,-4(fp)
    aaa4:	00c00a84 	movi	r3,42
    aaa8:	10c00005 	stb	r3,0(r2)
            return;
    aaac:	00005306 	br	abfc <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
    aab0:	e0bffe17 	ldw	r2,-8(fp)
    aab4:	1000041e 	bne	r2,zero,aac8 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
    aab8:	e0bfff17 	ldw	r2,-4(fp)
    aabc:	00c00304 	movi	r3,12
    aac0:	10c00005 	stb	r3,0(r2)
        return;
    aac4:	00004d06 	br	abfc <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
    aac8:	d0a74903 	ldbu	r2,-25308(gp)
    aacc:	10803fcc 	andi	r2,r2,255
    aad0:	10000426 	beq	r2,zero,aae4 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
    aad4:	e0bfff17 	ldw	r2,-4(fp)
    aad8:	00c00484 	movi	r3,18
    aadc:	10c00005 	stb	r3,0(r2)
        return;
    aae0:	00004606 	br	abfc <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    aae4:	0005303a 	rdctl	r2,status
    aae8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    aaec:	e0fffc17 	ldw	r3,-16(fp)
    aaf0:	00bfff84 	movi	r2,-2
    aaf4:	1884703a 	and	r2,r3,r2
    aaf8:	1001703a 	wrctl	status,r2
  
  return context;
    aafc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    ab00:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    ab04:	e0bffd03 	ldbu	r2,-12(fp)
    ab08:	10803fd8 	cmpnei	r2,r2,255
    ab0c:	1000031e 	bne	r2,zero,ab1c <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
    ab10:	d0a74a17 	ldw	r2,-25304(gp)
    ab14:	10800c83 	ldbu	r2,50(r2)
    ab18:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    ab1c:	e0fffd03 	ldbu	r3,-12(fp)
    ab20:	00800074 	movhi	r2,1
    ab24:	109ed204 	addi	r2,r2,31560
    ab28:	18c7883a 	add	r3,r3,r3
    ab2c:	18c7883a 	add	r3,r3,r3
    ab30:	10c5883a 	add	r2,r2,r3
    ab34:	10800017 	ldw	r2,0(r2)
    ab38:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    ab3c:	e0bff717 	ldw	r2,-36(fp)
    ab40:	1000081e 	bne	r2,zero,ab64 <OSTaskNameSet+0x108>
    ab44:	e0bff517 	ldw	r2,-44(fp)
    ab48:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ab4c:	e0bff617 	ldw	r2,-40(fp)
    ab50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
    ab54:	e0bfff17 	ldw	r2,-4(fp)
    ab58:	00c010c4 	movi	r3,67
    ab5c:	10c00005 	stb	r3,0(r2)
        return;
    ab60:	00002606 	br	abfc <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    ab64:	e0bff717 	ldw	r2,-36(fp)
    ab68:	10800058 	cmpnei	r2,r2,1
    ab6c:	1000081e 	bne	r2,zero,ab90 <OSTaskNameSet+0x134>
    ab70:	e0bff517 	ldw	r2,-44(fp)
    ab74:	e0bff815 	stw	r2,-32(fp)
    ab78:	e0bff817 	ldw	r2,-32(fp)
    ab7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
    ab80:	e0bfff17 	ldw	r2,-4(fp)
    ab84:	00c010c4 	movi	r3,67
    ab88:	10c00005 	stb	r3,0(r2)
        return;
    ab8c:	00001b06 	br	abfc <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    ab90:	e13ffe17 	ldw	r4,-8(fp)
    ab94:	0005b380 	call	5b38 <OS_StrLen>
    ab98:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
    ab9c:	e0bffa03 	ldbu	r2,-24(fp)
    aba0:	10800830 	cmpltui	r2,r2,32
    aba4:	1000081e 	bne	r2,zero,abc8 <OSTaskNameSet+0x16c>
    aba8:	e0bff517 	ldw	r2,-44(fp)
    abac:	e0bff915 	stw	r2,-28(fp)
    abb0:	e0bff917 	ldw	r2,-28(fp)
    abb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
    abb8:	e0bfff17 	ldw	r2,-4(fp)
    abbc:	00c01044 	movi	r3,65
    abc0:	10c00005 	stb	r3,0(r2)
        return;
    abc4:	00000d06 	br	abfc <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    abc8:	e0bff717 	ldw	r2,-36(fp)
    abcc:	10801304 	addi	r2,r2,76
    abd0:	e17ffe17 	ldw	r5,-8(fp)
    abd4:	1009883a 	mov	r4,r2
    abd8:	0005ac40 	call	5ac4 <OS_StrCopy>
    abdc:	e0bff517 	ldw	r2,-44(fp)
    abe0:	e0bffb15 	stw	r2,-20(fp)
    abe4:	e0bffb17 	ldw	r2,-20(fp)
    abe8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    abec:	e0bfff17 	ldw	r2,-4(fp)
    abf0:	10000005 	stb	zero,0(r2)
    abf4:	00000106 	br	abfc <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
    abf8:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    abfc:	e037883a 	mov	sp,fp
    ac00:	dfc00117 	ldw	ra,4(sp)
    ac04:	df000017 	ldw	fp,0(sp)
    ac08:	dec00204 	addi	sp,sp,8
    ac0c:	f800283a 	ret

0000ac10 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    ac10:	defff404 	addi	sp,sp,-48
    ac14:	dfc00b15 	stw	ra,44(sp)
    ac18:	df000a15 	stw	fp,40(sp)
    ac1c:	df000a04 	addi	fp,sp,40
    ac20:	2005883a 	mov	r2,r4
    ac24:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    ac28:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
    ac2c:	e0bfff03 	ldbu	r2,-4(fp)
    ac30:	10800530 	cmpltui	r2,r2,20
    ac34:	1000021e 	bne	r2,zero,ac40 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    ac38:	00800a84 	movi	r2,42
    ac3c:	00006406 	br	add0 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ac40:	0005303a 	rdctl	r2,status
    ac44:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ac48:	e0fffe17 	ldw	r3,-8(fp)
    ac4c:	00bfff84 	movi	r2,-2
    ac50:	1884703a 	and	r2,r3,r2
    ac54:	1001703a 	wrctl	status,r2
  
  return context;
    ac58:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    ac5c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    ac60:	e0ffff03 	ldbu	r3,-4(fp)
    ac64:	00800074 	movhi	r2,1
    ac68:	109ed204 	addi	r2,r2,31560
    ac6c:	18c7883a 	add	r3,r3,r3
    ac70:	18c7883a 	add	r3,r3,r3
    ac74:	10c5883a 	add	r2,r2,r3
    ac78:	10800017 	ldw	r2,0(r2)
    ac7c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    ac80:	e0bff817 	ldw	r2,-32(fp)
    ac84:	1000061e 	bne	r2,zero,aca0 <OSTaskResume+0x90>
    ac88:	e0bff617 	ldw	r2,-40(fp)
    ac8c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ac90:	e0bff717 	ldw	r2,-36(fp)
    ac94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
    ac98:	00801184 	movi	r2,70
    ac9c:	00004c06 	br	add0 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    aca0:	e0bff817 	ldw	r2,-32(fp)
    aca4:	10800058 	cmpnei	r2,r2,1
    aca8:	1000061e 	bne	r2,zero,acc4 <OSTaskResume+0xb4>
    acac:	e0bff617 	ldw	r2,-40(fp)
    acb0:	e0bff915 	stw	r2,-28(fp)
    acb4:	e0bff917 	ldw	r2,-28(fp)
    acb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    acbc:	008010c4 	movi	r2,67
    acc0:	00004306 	br	add0 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    acc4:	e0bff817 	ldw	r2,-32(fp)
    acc8:	10800c03 	ldbu	r2,48(r2)
    accc:	10803fcc 	andi	r2,r2,255
    acd0:	1080020c 	andi	r2,r2,8
    acd4:	10003926 	beq	r2,zero,adbc <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    acd8:	e0bff817 	ldw	r2,-32(fp)
    acdc:	10c00c03 	ldbu	r3,48(r2)
    ace0:	00bffdc4 	movi	r2,-9
    ace4:	1884703a 	and	r2,r3,r2
    ace8:	1007883a 	mov	r3,r2
    acec:	e0bff817 	ldw	r2,-32(fp)
    acf0:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    acf4:	e0bff817 	ldw	r2,-32(fp)
    acf8:	10800c03 	ldbu	r2,48(r2)
    acfc:	10803fcc 	andi	r2,r2,255
    ad00:	1000281e 	bne	r2,zero,ada4 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
    ad04:	e0bff817 	ldw	r2,-32(fp)
    ad08:	10800b8b 	ldhu	r2,46(r2)
    ad0c:	10bfffcc 	andi	r2,r2,65535
    ad10:	10001f1e 	bne	r2,zero,ad90 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    ad14:	e0bff817 	ldw	r2,-32(fp)
    ad18:	10c00d83 	ldbu	r3,54(r2)
    ad1c:	d0a74703 	ldbu	r2,-25316(gp)
    ad20:	1884b03a 	or	r2,r3,r2
    ad24:	d0a74705 	stb	r2,-25316(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    ad28:	e0bff817 	ldw	r2,-32(fp)
    ad2c:	10800d03 	ldbu	r2,52(r2)
    ad30:	10c03fcc 	andi	r3,r2,255
    ad34:	e0bff817 	ldw	r2,-32(fp)
    ad38:	10800d03 	ldbu	r2,52(r2)
    ad3c:	11003fcc 	andi	r4,r2,255
    ad40:	d0a74744 	addi	r2,gp,-25315
    ad44:	2085883a 	add	r2,r4,r2
    ad48:	11000003 	ldbu	r4,0(r2)
    ad4c:	e0bff817 	ldw	r2,-32(fp)
    ad50:	10800d43 	ldbu	r2,53(r2)
    ad54:	2084b03a 	or	r2,r4,r2
    ad58:	1009883a 	mov	r4,r2
    ad5c:	d0a74744 	addi	r2,gp,-25315
    ad60:	1885883a 	add	r2,r3,r2
    ad64:	11000005 	stb	r4,0(r2)
    ad68:	e0bff617 	ldw	r2,-40(fp)
    ad6c:	e0bffa15 	stw	r2,-24(fp)
    ad70:	e0bffa17 	ldw	r2,-24(fp)
    ad74:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
    ad78:	d0a73b43 	ldbu	r2,-25363(gp)
    ad7c:	10803fcc 	andi	r2,r2,255
    ad80:	10800058 	cmpnei	r2,r2,1
    ad84:	10000b1e 	bne	r2,zero,adb4 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
    ad88:	00059800 	call	5980 <OS_Sched>
    ad8c:	00000906 	br	adb4 <OSTaskResume+0x1a4>
    ad90:	e0bff617 	ldw	r2,-40(fp)
    ad94:	e0bffb15 	stw	r2,-20(fp)
    ad98:	e0bffb17 	ldw	r2,-20(fp)
    ad9c:	1001703a 	wrctl	status,r2
    ada0:	00000406 	br	adb4 <OSTaskResume+0x1a4>
    ada4:	e0bff617 	ldw	r2,-40(fp)
    ada8:	e0bffc15 	stw	r2,-16(fp)
    adac:	e0bffc17 	ldw	r2,-16(fp)
    adb0:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
    adb4:	0005883a 	mov	r2,zero
    adb8:	00000506 	br	add0 <OSTaskResume+0x1c0>
    adbc:	e0bff617 	ldw	r2,-40(fp)
    adc0:	e0bffd15 	stw	r2,-12(fp)
    adc4:	e0bffd17 	ldw	r2,-12(fp)
    adc8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
    adcc:	00801104 	movi	r2,68
}
    add0:	e037883a 	mov	sp,fp
    add4:	dfc00117 	ldw	ra,4(sp)
    add8:	df000017 	ldw	fp,0(sp)
    addc:	dec00204 	addi	sp,sp,8
    ade0:	f800283a 	ret

0000ade4 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
    ade4:	defff304 	addi	sp,sp,-52
    ade8:	df000c15 	stw	fp,48(sp)
    adec:	df000c04 	addi	fp,sp,48
    adf0:	2005883a 	mov	r2,r4
    adf4:	e17fff15 	stw	r5,-4(fp)
    adf8:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    adfc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
    ae00:	e0bffe03 	ldbu	r2,-8(fp)
    ae04:	10800570 	cmpltui	r2,r2,21
    ae08:	1000051e 	bne	r2,zero,ae20 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
    ae0c:	e0bffe03 	ldbu	r2,-8(fp)
    ae10:	10803fe0 	cmpeqi	r2,r2,255
    ae14:	1000021e 	bne	r2,zero,ae20 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
    ae18:	00800a84 	movi	r2,42
    ae1c:	00005d06 	br	af94 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
    ae20:	e0bfff17 	ldw	r2,-4(fp)
    ae24:	1000021e 	bne	r2,zero,ae30 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
    ae28:	00800244 	movi	r2,9
    ae2c:	00005906 	br	af94 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
    ae30:	e0bfff17 	ldw	r2,-4(fp)
    ae34:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
    ae38:	e0bfff17 	ldw	r2,-4(fp)
    ae3c:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ae40:	0005303a 	rdctl	r2,status
    ae44:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ae48:	e0fffd17 	ldw	r3,-12(fp)
    ae4c:	00bfff84 	movi	r2,-2
    ae50:	1884703a 	and	r2,r3,r2
    ae54:	1001703a 	wrctl	status,r2
  
  return context;
    ae58:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
    ae5c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
    ae60:	e0bffe03 	ldbu	r2,-8(fp)
    ae64:	10803fd8 	cmpnei	r2,r2,255
    ae68:	1000031e 	bne	r2,zero,ae78 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
    ae6c:	d0a74a17 	ldw	r2,-25304(gp)
    ae70:	10800c83 	ldbu	r2,50(r2)
    ae74:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    ae78:	e0fffe03 	ldbu	r3,-8(fp)
    ae7c:	00800074 	movhi	r2,1
    ae80:	109ed204 	addi	r2,r2,31560
    ae84:	18c7883a 	add	r3,r3,r3
    ae88:	18c7883a 	add	r3,r3,r3
    ae8c:	10c5883a 	add	r2,r2,r3
    ae90:	10800017 	ldw	r2,0(r2)
    ae94:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
    ae98:	e0bff817 	ldw	r2,-32(fp)
    ae9c:	1000061e 	bne	r2,zero,aeb8 <OSTaskStkChk+0xd4>
    aea0:	e0bff617 	ldw	r2,-40(fp)
    aea4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    aea8:	e0bff717 	ldw	r2,-36(fp)
    aeac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    aeb0:	008010c4 	movi	r2,67
    aeb4:	00003706 	br	af94 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
    aeb8:	e0bff817 	ldw	r2,-32(fp)
    aebc:	10800058 	cmpnei	r2,r2,1
    aec0:	1000061e 	bne	r2,zero,aedc <OSTaskStkChk+0xf8>
    aec4:	e0bff617 	ldw	r2,-40(fp)
    aec8:	e0bff915 	stw	r2,-28(fp)
    aecc:	e0bff917 	ldw	r2,-28(fp)
    aed0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    aed4:	008010c4 	movi	r2,67
    aed8:	00002e06 	br	af94 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
    aedc:	e0bff817 	ldw	r2,-32(fp)
    aee0:	1080040b 	ldhu	r2,16(r2)
    aee4:	10bfffcc 	andi	r2,r2,65535
    aee8:	1080004c 	andi	r2,r2,1
    aeec:	1000061e 	bne	r2,zero,af08 <OSTaskStkChk+0x124>
    aef0:	e0bff617 	ldw	r2,-40(fp)
    aef4:	e0bffa15 	stw	r2,-24(fp)
    aef8:	e0bffa17 	ldw	r2,-24(fp)
    aefc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    af00:	00801144 	movi	r2,69
    af04:	00002306 	br	af94 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
    af08:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
    af0c:	e0bff817 	ldw	r2,-32(fp)
    af10:	10800317 	ldw	r2,12(r2)
    af14:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
    af18:	e0bff817 	ldw	r2,-32(fp)
    af1c:	10800217 	ldw	r2,8(r2)
    af20:	e0bff415 	stw	r2,-48(fp)
    af24:	e0bff617 	ldw	r2,-40(fp)
    af28:	e0bffb15 	stw	r2,-20(fp)
    af2c:	e0bffb17 	ldw	r2,-20(fp)
    af30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    af34:	00000306 	br	af44 <OSTaskStkChk+0x160>
        nfree++;
    af38:	e0bff517 	ldw	r2,-44(fp)
    af3c:	10800044 	addi	r2,r2,1
    af40:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    af44:	e0bff417 	ldw	r2,-48(fp)
    af48:	10c00104 	addi	r3,r2,4
    af4c:	e0fff415 	stw	r3,-48(fp)
    af50:	10800017 	ldw	r2,0(r2)
    af54:	103ff826 	beq	r2,zero,af38 <__alt_mem_onchip_memory2_0+0xfc006f38>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
    af58:	e0bff517 	ldw	r2,-44(fp)
    af5c:	1085883a 	add	r2,r2,r2
    af60:	1085883a 	add	r2,r2,r2
    af64:	1007883a 	mov	r3,r2
    af68:	e0bfff17 	ldw	r2,-4(fp)
    af6c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
    af70:	e0fffc17 	ldw	r3,-16(fp)
    af74:	e0bff517 	ldw	r2,-44(fp)
    af78:	1885c83a 	sub	r2,r3,r2
    af7c:	1085883a 	add	r2,r2,r2
    af80:	1085883a 	add	r2,r2,r2
    af84:	1007883a 	mov	r3,r2
    af88:	e0bfff17 	ldw	r2,-4(fp)
    af8c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
    af90:	0005883a 	mov	r2,zero
}
    af94:	e037883a 	mov	sp,fp
    af98:	df000017 	ldw	fp,0(sp)
    af9c:	dec00104 	addi	sp,sp,4
    afa0:	f800283a 	ret

0000afa4 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    afa4:	defff504 	addi	sp,sp,-44
    afa8:	dfc00a15 	stw	ra,40(sp)
    afac:	df000915 	stw	fp,36(sp)
    afb0:	df000904 	addi	fp,sp,36
    afb4:	2005883a 	mov	r2,r4
    afb8:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    afbc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
    afc0:	e0bfff03 	ldbu	r2,-4(fp)
    afc4:	10800518 	cmpnei	r2,r2,20
    afc8:	1000021e 	bne	r2,zero,afd4 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
    afcc:	008011c4 	movi	r2,71
    afd0:	00006806 	br	b174 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    afd4:	e0bfff03 	ldbu	r2,-4(fp)
    afd8:	10800530 	cmpltui	r2,r2,20
    afdc:	1000051e 	bne	r2,zero,aff4 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
    afe0:	e0bfff03 	ldbu	r2,-4(fp)
    afe4:	10803fe0 	cmpeqi	r2,r2,255
    afe8:	1000021e 	bne	r2,zero,aff4 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
    afec:	00800a84 	movi	r2,42
    aff0:	00006006 	br	b174 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    aff4:	0005303a 	rdctl	r2,status
    aff8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    affc:	e0fffe17 	ldw	r3,-8(fp)
    b000:	00bfff84 	movi	r2,-2
    b004:	1884703a 	and	r2,r3,r2
    b008:	1001703a 	wrctl	status,r2
  
  return context;
    b00c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
    b010:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    b014:	e0bfff03 	ldbu	r2,-4(fp)
    b018:	10803fd8 	cmpnei	r2,r2,255
    b01c:	1000061e 	bne	r2,zero,b038 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
    b020:	d0a74a17 	ldw	r2,-25304(gp)
    b024:	10800c83 	ldbu	r2,50(r2)
    b028:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
    b02c:	00800044 	movi	r2,1
    b030:	e0bff705 	stb	r2,-36(fp)
    b034:	00000906 	br	b05c <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    b038:	d0a74a17 	ldw	r2,-25304(gp)
    b03c:	10800c83 	ldbu	r2,50(r2)
    b040:	10c03fcc 	andi	r3,r2,255
    b044:	e0bfff03 	ldbu	r2,-4(fp)
    b048:	1880031e 	bne	r3,r2,b058 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
    b04c:	00800044 	movi	r2,1
    b050:	e0bff705 	stb	r2,-36(fp)
    b054:	00000106 	br	b05c <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    b058:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    b05c:	e0ffff03 	ldbu	r3,-4(fp)
    b060:	00800074 	movhi	r2,1
    b064:	109ed204 	addi	r2,r2,31560
    b068:	18c7883a 	add	r3,r3,r3
    b06c:	18c7883a 	add	r3,r3,r3
    b070:	10c5883a 	add	r2,r2,r3
    b074:	10800017 	ldw	r2,0(r2)
    b078:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    b07c:	e0bffa17 	ldw	r2,-24(fp)
    b080:	1000061e 	bne	r2,zero,b09c <OSTaskSuspend+0xf8>
    b084:	e0bff817 	ldw	r2,-32(fp)
    b088:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b08c:	e0bff917 	ldw	r2,-28(fp)
    b090:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
    b094:	00801204 	movi	r2,72
    b098:	00003606 	br	b174 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    b09c:	e0bffa17 	ldw	r2,-24(fp)
    b0a0:	10800058 	cmpnei	r2,r2,1
    b0a4:	1000061e 	bne	r2,zero,b0c0 <OSTaskSuspend+0x11c>
    b0a8:	e0bff817 	ldw	r2,-32(fp)
    b0ac:	e0bffb15 	stw	r2,-20(fp)
    b0b0:	e0bffb17 	ldw	r2,-20(fp)
    b0b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    b0b8:	008010c4 	movi	r2,67
    b0bc:	00002d06 	br	b174 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
    b0c0:	e0bffa17 	ldw	r2,-24(fp)
    b0c4:	10800d03 	ldbu	r2,52(r2)
    b0c8:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    b0cc:	e0fffd03 	ldbu	r3,-12(fp)
    b0d0:	e13ffd03 	ldbu	r4,-12(fp)
    b0d4:	d0a74744 	addi	r2,gp,-25315
    b0d8:	2085883a 	add	r2,r4,r2
    b0dc:	10800003 	ldbu	r2,0(r2)
    b0e0:	1009883a 	mov	r4,r2
    b0e4:	e0bffa17 	ldw	r2,-24(fp)
    b0e8:	10800d43 	ldbu	r2,53(r2)
    b0ec:	0084303a 	nor	r2,zero,r2
    b0f0:	2084703a 	and	r2,r4,r2
    b0f4:	1009883a 	mov	r4,r2
    b0f8:	d0a74744 	addi	r2,gp,-25315
    b0fc:	1885883a 	add	r2,r3,r2
    b100:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    b104:	e0fffd03 	ldbu	r3,-12(fp)
    b108:	d0a74744 	addi	r2,gp,-25315
    b10c:	1885883a 	add	r2,r3,r2
    b110:	10800003 	ldbu	r2,0(r2)
    b114:	10803fcc 	andi	r2,r2,255
    b118:	1000071e 	bne	r2,zero,b138 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    b11c:	e0bffa17 	ldw	r2,-24(fp)
    b120:	10800d83 	ldbu	r2,54(r2)
    b124:	0084303a 	nor	r2,zero,r2
    b128:	1007883a 	mov	r3,r2
    b12c:	d0a74703 	ldbu	r2,-25316(gp)
    b130:	1884703a 	and	r2,r3,r2
    b134:	d0a74705 	stb	r2,-25316(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    b138:	e0bffa17 	ldw	r2,-24(fp)
    b13c:	10800c03 	ldbu	r2,48(r2)
    b140:	10800214 	ori	r2,r2,8
    b144:	1007883a 	mov	r3,r2
    b148:	e0bffa17 	ldw	r2,-24(fp)
    b14c:	10c00c05 	stb	r3,48(r2)
    b150:	e0bff817 	ldw	r2,-32(fp)
    b154:	e0bffc15 	stw	r2,-16(fp)
    b158:	e0bffc17 	ldw	r2,-16(fp)
    b15c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    b160:	e0bff703 	ldbu	r2,-36(fp)
    b164:	10800058 	cmpnei	r2,r2,1
    b168:	1000011e 	bne	r2,zero,b170 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
    b16c:	00059800 	call	5980 <OS_Sched>
    }
    return (OS_ERR_NONE);
    b170:	0005883a 	mov	r2,zero
}
    b174:	e037883a 	mov	sp,fp
    b178:	dfc00117 	ldw	ra,4(sp)
    b17c:	df000017 	ldw	fp,0(sp)
    b180:	dec00204 	addi	sp,sp,8
    b184:	f800283a 	ret

0000b188 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
    b188:	defff604 	addi	sp,sp,-40
    b18c:	dfc00915 	stw	ra,36(sp)
    b190:	df000815 	stw	fp,32(sp)
    b194:	df000804 	addi	fp,sp,32
    b198:	2005883a 	mov	r2,r4
    b19c:	e17fff15 	stw	r5,-4(fp)
    b1a0:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b1a4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
    b1a8:	e0bffe03 	ldbu	r2,-8(fp)
    b1ac:	10800570 	cmpltui	r2,r2,21
    b1b0:	1000051e 	bne	r2,zero,b1c8 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
    b1b4:	e0bffe03 	ldbu	r2,-8(fp)
    b1b8:	10803fe0 	cmpeqi	r2,r2,255
    b1bc:	1000021e 	bne	r2,zero,b1c8 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
    b1c0:	00800a84 	movi	r2,42
    b1c4:	00003406 	br	b298 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
    b1c8:	e0bfff17 	ldw	r2,-4(fp)
    b1cc:	1000021e 	bne	r2,zero,b1d8 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
    b1d0:	00800244 	movi	r2,9
    b1d4:	00003006 	br	b298 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b1d8:	0005303a 	rdctl	r2,status
    b1dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b1e0:	e0fffd17 	ldw	r3,-12(fp)
    b1e4:	00bfff84 	movi	r2,-2
    b1e8:	1884703a 	and	r2,r3,r2
    b1ec:	1001703a 	wrctl	status,r2
  
  return context;
    b1f0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    b1f4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    b1f8:	e0bffe03 	ldbu	r2,-8(fp)
    b1fc:	10803fd8 	cmpnei	r2,r2,255
    b200:	1000031e 	bne	r2,zero,b210 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
    b204:	d0a74a17 	ldw	r2,-25304(gp)
    b208:	10800c83 	ldbu	r2,50(r2)
    b20c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    b210:	e0fffe03 	ldbu	r3,-8(fp)
    b214:	00800074 	movhi	r2,1
    b218:	109ed204 	addi	r2,r2,31560
    b21c:	18c7883a 	add	r3,r3,r3
    b220:	18c7883a 	add	r3,r3,r3
    b224:	10c5883a 	add	r2,r2,r3
    b228:	10800017 	ldw	r2,0(r2)
    b22c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    b230:	e0bffa17 	ldw	r2,-24(fp)
    b234:	1000061e 	bne	r2,zero,b250 <OSTaskQuery+0xc8>
    b238:	e0bff817 	ldw	r2,-32(fp)
    b23c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b240:	e0bff917 	ldw	r2,-28(fp)
    b244:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
    b248:	00800a44 	movi	r2,41
    b24c:	00001206 	br	b298 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    b250:	e0bffa17 	ldw	r2,-24(fp)
    b254:	10800058 	cmpnei	r2,r2,1
    b258:	1000061e 	bne	r2,zero,b274 <OSTaskQuery+0xec>
    b25c:	e0bff817 	ldw	r2,-32(fp)
    b260:	e0bffb15 	stw	r2,-20(fp)
    b264:	e0bffb17 	ldw	r2,-20(fp)
    b268:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    b26c:	008010c4 	movi	r2,67
    b270:	00000906 	br	b298 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    b274:	01801b04 	movi	r6,108
    b278:	e17ffa17 	ldw	r5,-24(fp)
    b27c:	e13fff17 	ldw	r4,-4(fp)
    b280:	00059180 	call	5918 <OS_MemCopy>
    b284:	e0bff817 	ldw	r2,-32(fp)
    b288:	e0bffc15 	stw	r2,-16(fp)
    b28c:	e0bffc17 	ldw	r2,-16(fp)
    b290:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    b294:	0005883a 	mov	r2,zero
}
    b298:	e037883a 	mov	sp,fp
    b29c:	dfc00117 	ldw	ra,4(sp)
    b2a0:	df000017 	ldw	fp,0(sp)
    b2a4:	dec00204 	addi	sp,sp,8
    b2a8:	f800283a 	ret

0000b2ac <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    b2ac:	defffc04 	addi	sp,sp,-16
    b2b0:	df000315 	stw	fp,12(sp)
    b2b4:	df000304 	addi	fp,sp,12
    b2b8:	e13ffd15 	stw	r4,-12(fp)
    b2bc:	e17ffe15 	stw	r5,-8(fp)
    b2c0:	3005883a 	mov	r2,r6
    b2c4:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
    b2c8:	e0bfff0b 	ldhu	r2,-4(fp)
    b2cc:	1080004c 	andi	r2,r2,1
    b2d0:	10000d26 	beq	r2,zero,b308 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
    b2d4:	e0bfff0b 	ldhu	r2,-4(fp)
    b2d8:	1080008c 	andi	r2,r2,2
    b2dc:	10000a26 	beq	r2,zero,b308 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    b2e0:	00000706 	br	b300 <OS_TaskStkClr+0x54>
                size--;
    b2e4:	e0bffe17 	ldw	r2,-8(fp)
    b2e8:	10bfffc4 	addi	r2,r2,-1
    b2ec:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
    b2f0:	e0bffd17 	ldw	r2,-12(fp)
    b2f4:	10c00104 	addi	r3,r2,4
    b2f8:	e0fffd15 	stw	r3,-12(fp)
    b2fc:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    b300:	e0bffe17 	ldw	r2,-8(fp)
    b304:	103ff71e 	bne	r2,zero,b2e4 <__alt_mem_onchip_memory2_0+0xfc0072e4>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
    b308:	0001883a 	nop
    b30c:	e037883a 	mov	sp,fp
    b310:	df000017 	ldw	fp,0(sp)
    b314:	dec00104 	addi	sp,sp,4
    b318:	f800283a 	ret

0000b31c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    b31c:	defff904 	addi	sp,sp,-28
    b320:	dfc00615 	stw	ra,24(sp)
    b324:	df000515 	stw	fp,20(sp)
    b328:	df000504 	addi	fp,sp,20
    b32c:	2005883a 	mov	r2,r4
    b330:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b334:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    b338:	d0a74903 	ldbu	r2,-25308(gp)
    b33c:	10803fcc 	andi	r2,r2,255
    b340:	1000311e 	bne	r2,zero,b408 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    b344:	e0bfff0b 	ldhu	r2,-4(fp)
    b348:	10003026 	beq	r2,zero,b40c <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b34c:	0005303a 	rdctl	r2,status
    b350:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b354:	e0fffe17 	ldw	r3,-8(fp)
    b358:	00bfff84 	movi	r2,-2
    b35c:	1884703a 	and	r2,r3,r2
    b360:	1001703a 	wrctl	status,r2
  
  return context;
    b364:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    b368:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    b36c:	d0a74a17 	ldw	r2,-25304(gp)
    b370:	10800d03 	ldbu	r2,52(r2)
    b374:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    b378:	e0fffd03 	ldbu	r3,-12(fp)
    b37c:	e13ffd03 	ldbu	r4,-12(fp)
    b380:	d0a74744 	addi	r2,gp,-25315
    b384:	2085883a 	add	r2,r4,r2
    b388:	10800003 	ldbu	r2,0(r2)
    b38c:	1009883a 	mov	r4,r2
    b390:	d0a74a17 	ldw	r2,-25304(gp)
    b394:	10800d43 	ldbu	r2,53(r2)
    b398:	0084303a 	nor	r2,zero,r2
    b39c:	2084703a 	and	r2,r4,r2
    b3a0:	1009883a 	mov	r4,r2
    b3a4:	d0a74744 	addi	r2,gp,-25315
    b3a8:	1885883a 	add	r2,r3,r2
    b3ac:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
    b3b0:	e0fffd03 	ldbu	r3,-12(fp)
    b3b4:	d0a74744 	addi	r2,gp,-25315
    b3b8:	1885883a 	add	r2,r3,r2
    b3bc:	10800003 	ldbu	r2,0(r2)
    b3c0:	10803fcc 	andi	r2,r2,255
    b3c4:	1000071e 	bne	r2,zero,b3e4 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    b3c8:	d0a74a17 	ldw	r2,-25304(gp)
    b3cc:	10800d83 	ldbu	r2,54(r2)
    b3d0:	0084303a 	nor	r2,zero,r2
    b3d4:	1007883a 	mov	r3,r2
    b3d8:	d0a74703 	ldbu	r2,-25316(gp)
    b3dc:	1884703a 	and	r2,r3,r2
    b3e0:	d0a74705 	stb	r2,-25316(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    b3e4:	d0a74a17 	ldw	r2,-25304(gp)
    b3e8:	e0ffff0b 	ldhu	r3,-4(fp)
    b3ec:	10c00b8d 	sth	r3,46(r2)
    b3f0:	e0bffb17 	ldw	r2,-20(fp)
    b3f4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b3f8:	e0bffc17 	ldw	r2,-16(fp)
    b3fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    b400:	00059800 	call	5980 <OS_Sched>
    b404:	00000106 	br	b40c <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
    b408:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
    b40c:	e037883a 	mov	sp,fp
    b410:	dfc00117 	ldw	ra,4(sp)
    b414:	df000017 	ldw	fp,0(sp)
    b418:	dec00204 	addi	sp,sp,8
    b41c:	f800283a 	ret

0000b420 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    b420:	defff704 	addi	sp,sp,-36
    b424:	dfc00815 	stw	ra,32(sp)
    b428:	df000715 	stw	fp,28(sp)
    b42c:	dc000615 	stw	r16,24(sp)
    b430:	df000704 	addi	fp,sp,28
    b434:	2011883a 	mov	r8,r4
    b438:	2809883a 	mov	r4,r5
    b43c:	3007883a 	mov	r3,r6
    b440:	3805883a 	mov	r2,r7
    b444:	e23ffb05 	stb	r8,-20(fp)
    b448:	e13ffc05 	stb	r4,-16(fp)
    b44c:	e0fffd05 	stb	r3,-12(fp)
    b450:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    b454:	d0a74903 	ldbu	r2,-25308(gp)
    b458:	10803fcc 	andi	r2,r2,255
    b45c:	10000226 	beq	r2,zero,b468 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
    b460:	00801544 	movi	r2,85
    b464:	00003e06 	br	b560 <OSTimeDlyHMSM+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
    b468:	e0bffb03 	ldbu	r2,-20(fp)
    b46c:	1000081e 	bne	r2,zero,b490 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
    b470:	e0bffc03 	ldbu	r2,-16(fp)
    b474:	1000061e 	bne	r2,zero,b490 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
    b478:	e0bffd03 	ldbu	r2,-12(fp)
    b47c:	1000041e 	bne	r2,zero,b490 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
    b480:	e0bffe0b 	ldhu	r2,-8(fp)
    b484:	1000021e 	bne	r2,zero,b490 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
    b488:	00801504 	movi	r2,84
    b48c:	00003406 	br	b560 <OSTimeDlyHMSM+0x140>
                }
            }
        }
    }
    if (minutes > 59) {
    b490:	e0bffc03 	ldbu	r2,-16(fp)
    b494:	10800f30 	cmpltui	r2,r2,60
    b498:	1000021e 	bne	r2,zero,b4a4 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    b49c:	00801444 	movi	r2,81
    b4a0:	00002f06 	br	b560 <OSTimeDlyHMSM+0x140>
    }
    if (seconds > 59) {
    b4a4:	e0bffd03 	ldbu	r2,-12(fp)
    b4a8:	10800f30 	cmpltui	r2,r2,60
    b4ac:	1000021e 	bne	r2,zero,b4b8 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
    b4b0:	00801484 	movi	r2,82
    b4b4:	00002a06 	br	b560 <OSTimeDlyHMSM+0x140>
    }
    if (ms > 999) {
    b4b8:	e0bffe0b 	ldhu	r2,-8(fp)
    b4bc:	1080fa30 	cmpltui	r2,r2,1000
    b4c0:	1000021e 	bne	r2,zero,b4cc <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
    b4c4:	008014c4 	movi	r2,83
    b4c8:	00002506 	br	b560 <OSTimeDlyHMSM+0x140>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    b4cc:	e0bffb03 	ldbu	r2,-20(fp)
    b4d0:	10c38424 	muli	r3,r2,3600
    b4d4:	e0bffc03 	ldbu	r2,-16(fp)
    b4d8:	10800f24 	muli	r2,r2,60
    b4dc:	1887883a 	add	r3,r3,r2
    b4e0:	e0bffd03 	ldbu	r2,-12(fp)
    b4e4:	1885883a 	add	r2,r3,r2
    b4e8:	14001924 	muli	r16,r2,100
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    b4ec:	e0bffe0b 	ldhu	r2,-8(fp)
    b4f0:	10801924 	muli	r2,r2,100
    b4f4:	10807d04 	addi	r2,r2,500
    b4f8:	0140fa04 	movi	r5,1000
    b4fc:	1009883a 	mov	r4,r2
    b500:	00006ac0 	call	6ac <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    b504:	8085883a 	add	r2,r16,r2
    b508:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    b50c:	e0bffa17 	ldw	r2,-24(fp)
    b510:	1004d43a 	srli	r2,r2,16
    b514:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    b518:	e0bffa17 	ldw	r2,-24(fp)
    b51c:	10bfffcc 	andi	r2,r2,65535
    b520:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
    b524:	e0bffa17 	ldw	r2,-24(fp)
    b528:	10bfffcc 	andi	r2,r2,65535
    b52c:	1009883a 	mov	r4,r2
    b530:	000b31c0 	call	b31c <OSTimeDly>
    while (loops > 0) {
    b534:	00000706 	br	b554 <OSTimeDlyHMSM+0x134>
        OSTimeDly((INT16U)32768u);
    b538:	01200014 	movui	r4,32768
    b53c:	000b31c0 	call	b31c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
    b540:	01200014 	movui	r4,32768
    b544:	000b31c0 	call	b31c <OSTimeDly>
        loops--;
    b548:	e0bff90b 	ldhu	r2,-28(fp)
    b54c:	10bfffc4 	addi	r2,r2,-1
    b550:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
    b554:	e0bff90b 	ldhu	r2,-28(fp)
    b558:	103ff71e 	bne	r2,zero,b538 <__alt_mem_onchip_memory2_0+0xfc007538>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
    b55c:	0005883a 	mov	r2,zero
}
    b560:	e6ffff04 	addi	sp,fp,-4
    b564:	dfc00217 	ldw	ra,8(sp)
    b568:	df000117 	ldw	fp,4(sp)
    b56c:	dc000017 	ldw	r16,0(sp)
    b570:	dec00304 	addi	sp,sp,12
    b574:	f800283a 	ret

0000b578 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
    b578:	defff504 	addi	sp,sp,-44
    b57c:	dfc00a15 	stw	ra,40(sp)
    b580:	df000915 	stw	fp,36(sp)
    b584:	df000904 	addi	fp,sp,36
    b588:	2005883a 	mov	r2,r4
    b58c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    b590:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
    b594:	e0bfff03 	ldbu	r2,-4(fp)
    b598:	10800530 	cmpltui	r2,r2,20
    b59c:	1000021e 	bne	r2,zero,b5a8 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    b5a0:	00800a84 	movi	r2,42
    b5a4:	00006406 	br	b738 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b5a8:	0005303a 	rdctl	r2,status
    b5ac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b5b0:	e0fffe17 	ldw	r3,-8(fp)
    b5b4:	00bfff84 	movi	r2,-2
    b5b8:	1884703a 	and	r2,r3,r2
    b5bc:	1001703a 	wrctl	status,r2
  
  return context;
    b5c0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    b5c4:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    b5c8:	e0ffff03 	ldbu	r3,-4(fp)
    b5cc:	00800074 	movhi	r2,1
    b5d0:	109ed204 	addi	r2,r2,31560
    b5d4:	18c7883a 	add	r3,r3,r3
    b5d8:	18c7883a 	add	r3,r3,r3
    b5dc:	10c5883a 	add	r2,r2,r3
    b5e0:	10800017 	ldw	r2,0(r2)
    b5e4:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
    b5e8:	e0bff917 	ldw	r2,-28(fp)
    b5ec:	1000061e 	bne	r2,zero,b608 <OSTimeDlyResume+0x90>
    b5f0:	e0bff717 	ldw	r2,-36(fp)
    b5f4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b5f8:	e0bff817 	ldw	r2,-32(fp)
    b5fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    b600:	008010c4 	movi	r2,67
    b604:	00004c06 	br	b738 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
    b608:	e0bff917 	ldw	r2,-28(fp)
    b60c:	10800058 	cmpnei	r2,r2,1
    b610:	1000061e 	bne	r2,zero,b62c <OSTimeDlyResume+0xb4>
    b614:	e0bff717 	ldw	r2,-36(fp)
    b618:	e0bffa15 	stw	r2,-24(fp)
    b61c:	e0bffa17 	ldw	r2,-24(fp)
    b620:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    b624:	008010c4 	movi	r2,67
    b628:	00004306 	br	b738 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    b62c:	e0bff917 	ldw	r2,-28(fp)
    b630:	10800b8b 	ldhu	r2,46(r2)
    b634:	10bfffcc 	andi	r2,r2,65535
    b638:	1000061e 	bne	r2,zero,b654 <OSTimeDlyResume+0xdc>
    b63c:	e0bff717 	ldw	r2,-36(fp)
    b640:	e0bffb15 	stw	r2,-20(fp)
    b644:	e0bffb17 	ldw	r2,-20(fp)
    b648:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    b64c:	00801404 	movi	r2,80
    b650:	00003906 	br	b738 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    b654:	e0bff917 	ldw	r2,-28(fp)
    b658:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    b65c:	e0bff917 	ldw	r2,-28(fp)
    b660:	10800c03 	ldbu	r2,48(r2)
    b664:	10803fcc 	andi	r2,r2,255
    b668:	10800dcc 	andi	r2,r2,55
    b66c:	10000b26 	beq	r2,zero,b69c <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    b670:	e0bff917 	ldw	r2,-28(fp)
    b674:	10c00c03 	ldbu	r3,48(r2)
    b678:	00bff204 	movi	r2,-56
    b67c:	1884703a 	and	r2,r3,r2
    b680:	1007883a 	mov	r3,r2
    b684:	e0bff917 	ldw	r2,-28(fp)
    b688:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    b68c:	e0bff917 	ldw	r2,-28(fp)
    b690:	00c00044 	movi	r3,1
    b694:	10c00c45 	stb	r3,49(r2)
    b698:	00000206 	br	b6a4 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    b69c:	e0bff917 	ldw	r2,-28(fp)
    b6a0:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    b6a4:	e0bff917 	ldw	r2,-28(fp)
    b6a8:	10800c03 	ldbu	r2,48(r2)
    b6ac:	10803fcc 	andi	r2,r2,255
    b6b0:	1080020c 	andi	r2,r2,8
    b6b4:	10001b1e 	bne	r2,zero,b724 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    b6b8:	e0bff917 	ldw	r2,-28(fp)
    b6bc:	10c00d83 	ldbu	r3,54(r2)
    b6c0:	d0a74703 	ldbu	r2,-25316(gp)
    b6c4:	1884b03a 	or	r2,r3,r2
    b6c8:	d0a74705 	stb	r2,-25316(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    b6cc:	e0bff917 	ldw	r2,-28(fp)
    b6d0:	10800d03 	ldbu	r2,52(r2)
    b6d4:	10c03fcc 	andi	r3,r2,255
    b6d8:	e0bff917 	ldw	r2,-28(fp)
    b6dc:	10800d03 	ldbu	r2,52(r2)
    b6e0:	11003fcc 	andi	r4,r2,255
    b6e4:	d0a74744 	addi	r2,gp,-25315
    b6e8:	2085883a 	add	r2,r4,r2
    b6ec:	11000003 	ldbu	r4,0(r2)
    b6f0:	e0bff917 	ldw	r2,-28(fp)
    b6f4:	10800d43 	ldbu	r2,53(r2)
    b6f8:	2084b03a 	or	r2,r4,r2
    b6fc:	1009883a 	mov	r4,r2
    b700:	d0a74744 	addi	r2,gp,-25315
    b704:	1885883a 	add	r2,r3,r2
    b708:	11000005 	stb	r4,0(r2)
    b70c:	e0bff717 	ldw	r2,-36(fp)
    b710:	e0bffc15 	stw	r2,-16(fp)
    b714:	e0bffc17 	ldw	r2,-16(fp)
    b718:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
    b71c:	00059800 	call	5980 <OS_Sched>
    b720:	00000406 	br	b734 <OSTimeDlyResume+0x1bc>
    b724:	e0bff717 	ldw	r2,-36(fp)
    b728:	e0bffd15 	stw	r2,-12(fp)
    b72c:	e0bffd17 	ldw	r2,-12(fp)
    b730:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
    b734:	0005883a 	mov	r2,zero
}
    b738:	e037883a 	mov	sp,fp
    b73c:	dfc00117 	ldw	ra,4(sp)
    b740:	df000017 	ldw	fp,0(sp)
    b744:	dec00204 	addi	sp,sp,8
    b748:	f800283a 	ret

0000b74c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
    b74c:	defffb04 	addi	sp,sp,-20
    b750:	df000415 	stw	fp,16(sp)
    b754:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b758:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b75c:	0005303a 	rdctl	r2,status
    b760:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b764:	e0fffe17 	ldw	r3,-8(fp)
    b768:	00bfff84 	movi	r2,-2
    b76c:	1884703a 	and	r2,r3,r2
    b770:	1001703a 	wrctl	status,r2
  
  return context;
    b774:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    b778:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
    b77c:	d0a74b17 	ldw	r2,-25300(gp)
    b780:	e0bffd15 	stw	r2,-12(fp)
    b784:	e0bffc17 	ldw	r2,-16(fp)
    b788:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b78c:	e0bfff17 	ldw	r2,-4(fp)
    b790:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
    b794:	e0bffd17 	ldw	r2,-12(fp)
}
    b798:	e037883a 	mov	sp,fp
    b79c:	df000017 	ldw	fp,0(sp)
    b7a0:	dec00104 	addi	sp,sp,4
    b7a4:	f800283a 	ret

0000b7a8 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
    b7a8:	defffb04 	addi	sp,sp,-20
    b7ac:	df000415 	stw	fp,16(sp)
    b7b0:	df000404 	addi	fp,sp,16
    b7b4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b7b8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b7bc:	0005303a 	rdctl	r2,status
    b7c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b7c4:	e0fffd17 	ldw	r3,-12(fp)
    b7c8:	00bfff84 	movi	r2,-2
    b7cc:	1884703a 	and	r2,r3,r2
    b7d0:	1001703a 	wrctl	status,r2
  
  return context;
    b7d4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    b7d8:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
    b7dc:	e0bfff17 	ldw	r2,-4(fp)
    b7e0:	d0a74b15 	stw	r2,-25300(gp)
    b7e4:	e0bffc17 	ldw	r2,-16(fp)
    b7e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b7ec:	e0bffe17 	ldw	r2,-8(fp)
    b7f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    b7f4:	0001883a 	nop
    b7f8:	e037883a 	mov	sp,fp
    b7fc:	df000017 	ldw	fp,0(sp)
    b800:	dec00104 	addi	sp,sp,4
    b804:	f800283a 	ret

0000b808 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    b808:	defffd04 	addi	sp,sp,-12
    b80c:	dfc00215 	stw	ra,8(sp)
    b810:	df000115 	stw	fp,4(sp)
    b814:	df000104 	addi	fp,sp,4
    b818:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    b81c:	d1600d04 	addi	r5,gp,-32716
    b820:	e13fff17 	ldw	r4,-4(fp)
    b824:	000d4180 	call	d418 <alt_dev_llist_insert>
}
    b828:	e037883a 	mov	sp,fp
    b82c:	dfc00117 	ldw	ra,4(sp)
    b830:	df000017 	ldw	fp,0(sp)
    b834:	dec00204 	addi	sp,sp,8
    b838:	f800283a 	ret

0000b83c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b83c:	defffd04 	addi	sp,sp,-12
    b840:	dfc00215 	stw	ra,8(sp)
    b844:	df000115 	stw	fp,4(sp)
    b848:	df000104 	addi	fp,sp,4
    b84c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    b850:	000dd880 	call	dd88 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b854:	00800044 	movi	r2,1
    b858:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    b85c:	0001883a 	nop
    b860:	e037883a 	mov	sp,fp
    b864:	dfc00117 	ldw	ra,4(sp)
    b868:	df000017 	ldw	fp,0(sp)
    b86c:	dec00204 	addi	sp,sp,8
    b870:	f800283a 	ret

0000b874 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b874:	defffe04 	addi	sp,sp,-8
    b878:	dfc00115 	stw	ra,4(sp)
    b87c:	df000015 	stw	fp,0(sp)
    b880:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    b884:	01c01904 	movi	r7,100
    b888:	000d883a 	mov	r6,zero
    b88c:	000b883a 	mov	r5,zero
    b890:	01010074 	movhi	r4,1025
    b894:	21240004 	addi	r4,r4,-28672
    b898:	000c6980 	call	c698 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    b89c:	01800084 	movi	r6,2
    b8a0:	000b883a 	mov	r5,zero
    b8a4:	01000074 	movhi	r4,1
    b8a8:	213e8c04 	addi	r4,r4,-1488
    b8ac:	000ba580 	call	ba58 <altera_avalon_jtag_uart_init>
    b8b0:	01000074 	movhi	r4,1
    b8b4:	213e8204 	addi	r4,r4,-1528
    b8b8:	000b8080 	call	b808 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    b8bc:	018000c4 	movi	r6,3
    b8c0:	000b883a 	mov	r5,zero
    b8c4:	01000074 	movhi	r4,1
    b8c8:	2102a704 	addi	r4,r4,2716
    b8cc:	000c8240 	call	c824 <altera_avalon_uart_init>
    b8d0:	01000074 	movhi	r4,1
    b8d4:	21029d04 	addi	r4,r4,2676
    b8d8:	000b8080 	call	b808 <alt_dev_reg>
}
    b8dc:	0001883a 	nop
    b8e0:	e037883a 	mov	sp,fp
    b8e4:	dfc00117 	ldw	ra,4(sp)
    b8e8:	df000017 	ldw	fp,0(sp)
    b8ec:	dec00204 	addi	sp,sp,8
    b8f0:	f800283a 	ret

0000b8f4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    b8f4:	defffa04 	addi	sp,sp,-24
    b8f8:	dfc00515 	stw	ra,20(sp)
    b8fc:	df000415 	stw	fp,16(sp)
    b900:	df000404 	addi	fp,sp,16
    b904:	e13ffd15 	stw	r4,-12(fp)
    b908:	e17ffe15 	stw	r5,-8(fp)
    b90c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b910:	e0bffd17 	ldw	r2,-12(fp)
    b914:	10800017 	ldw	r2,0(r2)
    b918:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    b91c:	e0bffc17 	ldw	r2,-16(fp)
    b920:	10c00a04 	addi	r3,r2,40
    b924:	e0bffd17 	ldw	r2,-12(fp)
    b928:	10800217 	ldw	r2,8(r2)
    b92c:	100f883a 	mov	r7,r2
    b930:	e1bfff17 	ldw	r6,-4(fp)
    b934:	e17ffe17 	ldw	r5,-8(fp)
    b938:	1809883a 	mov	r4,r3
    b93c:	000c0a00 	call	c0a0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    b940:	e037883a 	mov	sp,fp
    b944:	dfc00117 	ldw	ra,4(sp)
    b948:	df000017 	ldw	fp,0(sp)
    b94c:	dec00204 	addi	sp,sp,8
    b950:	f800283a 	ret

0000b954 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    b954:	defffa04 	addi	sp,sp,-24
    b958:	dfc00515 	stw	ra,20(sp)
    b95c:	df000415 	stw	fp,16(sp)
    b960:	df000404 	addi	fp,sp,16
    b964:	e13ffd15 	stw	r4,-12(fp)
    b968:	e17ffe15 	stw	r5,-8(fp)
    b96c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b970:	e0bffd17 	ldw	r2,-12(fp)
    b974:	10800017 	ldw	r2,0(r2)
    b978:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    b97c:	e0bffc17 	ldw	r2,-16(fp)
    b980:	10c00a04 	addi	r3,r2,40
    b984:	e0bffd17 	ldw	r2,-12(fp)
    b988:	10800217 	ldw	r2,8(r2)
    b98c:	100f883a 	mov	r7,r2
    b990:	e1bfff17 	ldw	r6,-4(fp)
    b994:	e17ffe17 	ldw	r5,-8(fp)
    b998:	1809883a 	mov	r4,r3
    b99c:	000c35c0 	call	c35c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    b9a0:	e037883a 	mov	sp,fp
    b9a4:	dfc00117 	ldw	ra,4(sp)
    b9a8:	df000017 	ldw	fp,0(sp)
    b9ac:	dec00204 	addi	sp,sp,8
    b9b0:	f800283a 	ret

0000b9b4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    b9b4:	defffc04 	addi	sp,sp,-16
    b9b8:	dfc00315 	stw	ra,12(sp)
    b9bc:	df000215 	stw	fp,8(sp)
    b9c0:	df000204 	addi	fp,sp,8
    b9c4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b9c8:	e0bfff17 	ldw	r2,-4(fp)
    b9cc:	10800017 	ldw	r2,0(r2)
    b9d0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    b9d4:	e0bffe17 	ldw	r2,-8(fp)
    b9d8:	10c00a04 	addi	r3,r2,40
    b9dc:	e0bfff17 	ldw	r2,-4(fp)
    b9e0:	10800217 	ldw	r2,8(r2)
    b9e4:	100b883a 	mov	r5,r2
    b9e8:	1809883a 	mov	r4,r3
    b9ec:	000bf480 	call	bf48 <altera_avalon_jtag_uart_close>
}
    b9f0:	e037883a 	mov	sp,fp
    b9f4:	dfc00117 	ldw	ra,4(sp)
    b9f8:	df000017 	ldw	fp,0(sp)
    b9fc:	dec00204 	addi	sp,sp,8
    ba00:	f800283a 	ret

0000ba04 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    ba04:	defffa04 	addi	sp,sp,-24
    ba08:	dfc00515 	stw	ra,20(sp)
    ba0c:	df000415 	stw	fp,16(sp)
    ba10:	df000404 	addi	fp,sp,16
    ba14:	e13ffd15 	stw	r4,-12(fp)
    ba18:	e17ffe15 	stw	r5,-8(fp)
    ba1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    ba20:	e0bffd17 	ldw	r2,-12(fp)
    ba24:	10800017 	ldw	r2,0(r2)
    ba28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    ba2c:	e0bffc17 	ldw	r2,-16(fp)
    ba30:	10800a04 	addi	r2,r2,40
    ba34:	e1bfff17 	ldw	r6,-4(fp)
    ba38:	e17ffe17 	ldw	r5,-8(fp)
    ba3c:	1009883a 	mov	r4,r2
    ba40:	000bfb00 	call	bfb0 <altera_avalon_jtag_uart_ioctl>
}
    ba44:	e037883a 	mov	sp,fp
    ba48:	dfc00117 	ldw	ra,4(sp)
    ba4c:	df000017 	ldw	fp,0(sp)
    ba50:	dec00204 	addi	sp,sp,8
    ba54:	f800283a 	ret

0000ba58 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ba58:	defff104 	addi	sp,sp,-60
    ba5c:	dfc00e15 	stw	ra,56(sp)
    ba60:	df000d15 	stw	fp,52(sp)
    ba64:	df000d04 	addi	fp,sp,52
    ba68:	e13ff915 	stw	r4,-28(fp)
    ba6c:	e17ffa15 	stw	r5,-24(fp)
    ba70:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
    ba74:	e0bff917 	ldw	r2,-28(fp)
    ba78:	10800c04 	addi	r2,r2,48
    ba7c:	e0bff415 	stw	r2,-48(fp)
    ba80:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
    ba84:	e0bff80b 	ldhu	r2,-32(fp)
    ba88:	e0fff884 	addi	r3,fp,-30
    ba8c:	180b883a 	mov	r5,r3
    ba90:	1009883a 	mov	r4,r2
    ba94:	00064ec0 	call	64ec <OSFlagCreate>
    ba98:	1007883a 	mov	r3,r2
    ba9c:	e0bff417 	ldw	r2,-48(fp)
    baa0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
    baa4:	e0bff917 	ldw	r2,-28(fp)
    baa8:	10800a04 	addi	r2,r2,40
    baac:	e0bff515 	stw	r2,-44(fp)
    bab0:	00800044 	movi	r2,1
    bab4:	e0bff78d 	sth	r2,-34(fp)
    bab8:	e0bff78b 	ldhu	r2,-34(fp)
    babc:	1009883a 	mov	r4,r2
    bac0:	00092000 	call	9200 <OSSemCreate>
    bac4:	1007883a 	mov	r3,r2
    bac8:	e0bff517 	ldw	r2,-44(fp)
    bacc:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
    bad0:	e0bff917 	ldw	r2,-28(fp)
    bad4:	10800b04 	addi	r2,r2,44
    bad8:	e0bff615 	stw	r2,-40(fp)
    badc:	00800044 	movi	r2,1
    bae0:	e0bff70d 	sth	r2,-36(fp)
    bae4:	e0bff70b 	ldhu	r2,-36(fp)
    bae8:	1009883a 	mov	r4,r2
    baec:	00092000 	call	9200 <OSSemCreate>
    baf0:	1007883a 	mov	r3,r2
    baf4:	e0bff617 	ldw	r2,-40(fp)
    baf8:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    bafc:	e0bff917 	ldw	r2,-28(fp)
    bb00:	00c00044 	movi	r3,1
    bb04:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    bb08:	e0bff917 	ldw	r2,-28(fp)
    bb0c:	10800017 	ldw	r2,0(r2)
    bb10:	10800104 	addi	r2,r2,4
    bb14:	1007883a 	mov	r3,r2
    bb18:	e0bff917 	ldw	r2,-28(fp)
    bb1c:	10800817 	ldw	r2,32(r2)
    bb20:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    bb24:	e0bffa17 	ldw	r2,-24(fp)
    bb28:	e0fffb17 	ldw	r3,-20(fp)
    bb2c:	d8000015 	stw	zero,0(sp)
    bb30:	e1fff917 	ldw	r7,-28(fp)
    bb34:	01800074 	movhi	r6,1
    bb38:	31aee804 	addi	r6,r6,-17504
    bb3c:	180b883a 	mov	r5,r3
    bb40:	1009883a 	mov	r4,r2
    bb44:	000d5b00 	call	d5b0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    bb48:	e0bff917 	ldw	r2,-28(fp)
    bb4c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    bb50:	e0bff917 	ldw	r2,-28(fp)
    bb54:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    bb58:	d0e75017 	ldw	r3,-25280(gp)
    bb5c:	e1fff917 	ldw	r7,-28(fp)
    bb60:	01800074 	movhi	r6,1
    bb64:	31af9104 	addi	r6,r6,-16828
    bb68:	180b883a 	mov	r5,r3
    bb6c:	1009883a 	mov	r4,r2
    bb70:	000d2680 	call	d268 <alt_alarm_start>
    bb74:	1000040e 	bge	r2,zero,bb88 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    bb78:	e0fff917 	ldw	r3,-28(fp)
    bb7c:	00a00034 	movhi	r2,32768
    bb80:	10bfffc4 	addi	r2,r2,-1
    bb84:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    bb88:	0001883a 	nop
    bb8c:	e037883a 	mov	sp,fp
    bb90:	dfc00117 	ldw	ra,4(sp)
    bb94:	df000017 	ldw	fp,0(sp)
    bb98:	dec00204 	addi	sp,sp,8
    bb9c:	f800283a 	ret

0000bba0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    bba0:	defff204 	addi	sp,sp,-56
    bba4:	dfc00d15 	stw	ra,52(sp)
    bba8:	df000c15 	stw	fp,48(sp)
    bbac:	df000c04 	addi	fp,sp,48
    bbb0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    bbb4:	e0bfff17 	ldw	r2,-4(fp)
    bbb8:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
    bbbc:	e0bff617 	ldw	r2,-40(fp)
    bbc0:	10800017 	ldw	r2,0(r2)
    bbc4:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    bbc8:	e0bff717 	ldw	r2,-36(fp)
    bbcc:	10800104 	addi	r2,r2,4
    bbd0:	10800037 	ldwio	r2,0(r2)
    bbd4:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    bbd8:	e0bff817 	ldw	r2,-32(fp)
    bbdc:	1080c00c 	andi	r2,r2,768
    bbe0:	10009126 	beq	r2,zero,be28 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    bbe4:	e0bff817 	ldw	r2,-32(fp)
    bbe8:	1080400c 	andi	r2,r2,256
    bbec:	10004726 	beq	r2,zero,bd0c <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    bbf0:	00800074 	movhi	r2,1
    bbf4:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bbf8:	e0bff617 	ldw	r2,-40(fp)
    bbfc:	10800d17 	ldw	r2,52(r2)
    bc00:	10800044 	addi	r2,r2,1
    bc04:	1081ffcc 	andi	r2,r2,2047
    bc08:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
    bc0c:	e0bff617 	ldw	r2,-40(fp)
    bc10:	10c00e17 	ldw	r3,56(r2)
    bc14:	e0bff917 	ldw	r2,-28(fp)
    bc18:	18802726 	beq	r3,r2,bcb8 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    bc1c:	e0bff717 	ldw	r2,-36(fp)
    bc20:	10800037 	ldwio	r2,0(r2)
    bc24:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    bc28:	e0bff417 	ldw	r2,-48(fp)
    bc2c:	10a0000c 	andi	r2,r2,32768
    bc30:	10002326 	beq	r2,zero,bcc0 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    bc34:	e0bff617 	ldw	r2,-40(fp)
    bc38:	10800d17 	ldw	r2,52(r2)
    bc3c:	e0fff417 	ldw	r3,-48(fp)
    bc40:	1809883a 	mov	r4,r3
    bc44:	e0fff617 	ldw	r3,-40(fp)
    bc48:	1885883a 	add	r2,r3,r2
    bc4c:	10801104 	addi	r2,r2,68
    bc50:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bc54:	e0bff617 	ldw	r2,-40(fp)
    bc58:	10800d17 	ldw	r2,52(r2)
    bc5c:	10800044 	addi	r2,r2,1
    bc60:	10c1ffcc 	andi	r3,r2,2047
    bc64:	e0bff617 	ldw	r2,-40(fp)
    bc68:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
    bc6c:	e0bff617 	ldw	r2,-40(fp)
    bc70:	10800c17 	ldw	r2,48(r2)
    bc74:	e0bffb15 	stw	r2,-20(fp)
    bc78:	00800044 	movi	r2,1
    bc7c:	e0bffc0d 	sth	r2,-16(fp)
    bc80:	00800044 	movi	r2,1
    bc84:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    bc88:	d0a73b43 	ldbu	r2,-25363(gp)
    bc8c:	10803fcc 	andi	r2,r2,255
    bc90:	103fd926 	beq	r2,zero,bbf8 <__alt_mem_onchip_memory2_0+0xfc007bf8>
  {
    OSFlagPost (group, flags, opt, &err);
    bc94:	e0bffc0b 	ldhu	r2,-16(fp)
    bc98:	e0fffc83 	ldbu	r3,-14(fp)
    bc9c:	e13ffdc4 	addi	r4,fp,-9
    bca0:	200f883a 	mov	r7,r4
    bca4:	180d883a 	mov	r6,r3
    bca8:	100b883a 	mov	r5,r2
    bcac:	e13ffb17 	ldw	r4,-20(fp)
    bcb0:	00070c80 	call	70c8 <OSFlagPost>
      }
    bcb4:	003fd006 	br	bbf8 <__alt_mem_onchip_memory2_0+0xfc007bf8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    bcb8:	0001883a 	nop
    bcbc:	00000106 	br	bcc4 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    bcc0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    bcc4:	e0bff417 	ldw	r2,-48(fp)
    bcc8:	10bfffec 	andhi	r2,r2,65535
    bccc:	10000f26 	beq	r2,zero,bd0c <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    bcd0:	e0bff617 	ldw	r2,-40(fp)
    bcd4:	10c00817 	ldw	r3,32(r2)
    bcd8:	00bfff84 	movi	r2,-2
    bcdc:	1886703a 	and	r3,r3,r2
    bce0:	e0bff617 	ldw	r2,-40(fp)
    bce4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    bce8:	e0bff717 	ldw	r2,-36(fp)
    bcec:	10800104 	addi	r2,r2,4
    bcf0:	1007883a 	mov	r3,r2
    bcf4:	e0bff617 	ldw	r2,-40(fp)
    bcf8:	10800817 	ldw	r2,32(r2)
    bcfc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    bd00:	e0bff717 	ldw	r2,-36(fp)
    bd04:	10800104 	addi	r2,r2,4
    bd08:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    bd0c:	e0bff817 	ldw	r2,-32(fp)
    bd10:	1080800c 	andi	r2,r2,512
    bd14:	103fac26 	beq	r2,zero,bbc8 <__alt_mem_onchip_memory2_0+0xfc007bc8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    bd18:	e0bff817 	ldw	r2,-32(fp)
    bd1c:	1004d43a 	srli	r2,r2,16
    bd20:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    bd24:	00002606 	br	bdc0 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    bd28:	e0bff717 	ldw	r2,-36(fp)
    bd2c:	e0fff617 	ldw	r3,-40(fp)
    bd30:	18c01017 	ldw	r3,64(r3)
    bd34:	e13ff617 	ldw	r4,-40(fp)
    bd38:	20c7883a 	add	r3,r4,r3
    bd3c:	18c21104 	addi	r3,r3,2116
    bd40:	18c00003 	ldbu	r3,0(r3)
    bd44:	18c03fcc 	andi	r3,r3,255
    bd48:	18c0201c 	xori	r3,r3,128
    bd4c:	18ffe004 	addi	r3,r3,-128
    bd50:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bd54:	e0bff617 	ldw	r2,-40(fp)
    bd58:	10801017 	ldw	r2,64(r2)
    bd5c:	10800044 	addi	r2,r2,1
    bd60:	10c1ffcc 	andi	r3,r2,2047
    bd64:	e0bff617 	ldw	r2,-40(fp)
    bd68:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
    bd6c:	e0bff617 	ldw	r2,-40(fp)
    bd70:	10800c17 	ldw	r2,48(r2)
    bd74:	e0bffa15 	stw	r2,-24(fp)
    bd78:	00800084 	movi	r2,2
    bd7c:	e0bffd0d 	sth	r2,-12(fp)
    bd80:	00800044 	movi	r2,1
    bd84:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    bd88:	d0a73b43 	ldbu	r2,-25363(gp)
    bd8c:	10803fcc 	andi	r2,r2,255
    bd90:	10000826 	beq	r2,zero,bdb4 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
    bd94:	e0bffd0b 	ldhu	r2,-12(fp)
    bd98:	e0fffd83 	ldbu	r3,-10(fp)
    bd9c:	e13ffe04 	addi	r4,fp,-8
    bda0:	200f883a 	mov	r7,r4
    bda4:	180d883a 	mov	r6,r3
    bda8:	100b883a 	mov	r5,r2
    bdac:	e13ffa17 	ldw	r4,-24(fp)
    bdb0:	00070c80 	call	70c8 <OSFlagPost>

        space--;
    bdb4:	e0bff517 	ldw	r2,-44(fp)
    bdb8:	10bfffc4 	addi	r2,r2,-1
    bdbc:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    bdc0:	e0bff517 	ldw	r2,-44(fp)
    bdc4:	10000526 	beq	r2,zero,bddc <altera_avalon_jtag_uart_irq+0x23c>
    bdc8:	e0bff617 	ldw	r2,-40(fp)
    bdcc:	10c01017 	ldw	r3,64(r2)
    bdd0:	e0bff617 	ldw	r2,-40(fp)
    bdd4:	10800f17 	ldw	r2,60(r2)
    bdd8:	18bfd31e 	bne	r3,r2,bd28 <__alt_mem_onchip_memory2_0+0xfc007d28>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    bddc:	e0bff517 	ldw	r2,-44(fp)
    bde0:	103f7926 	beq	r2,zero,bbc8 <__alt_mem_onchip_memory2_0+0xfc007bc8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    bde4:	e0bff617 	ldw	r2,-40(fp)
    bde8:	10c00817 	ldw	r3,32(r2)
    bdec:	00bfff44 	movi	r2,-3
    bdf0:	1886703a 	and	r3,r3,r2
    bdf4:	e0bff617 	ldw	r2,-40(fp)
    bdf8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    bdfc:	e0bff617 	ldw	r2,-40(fp)
    be00:	10800017 	ldw	r2,0(r2)
    be04:	10800104 	addi	r2,r2,4
    be08:	1007883a 	mov	r3,r2
    be0c:	e0bff617 	ldw	r2,-40(fp)
    be10:	10800817 	ldw	r2,32(r2)
    be14:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    be18:	e0bff717 	ldw	r2,-36(fp)
    be1c:	10800104 	addi	r2,r2,4
    be20:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    be24:	003f6806 	br	bbc8 <__alt_mem_onchip_memory2_0+0xfc007bc8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    be28:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    be2c:	0001883a 	nop
    be30:	e037883a 	mov	sp,fp
    be34:	dfc00117 	ldw	ra,4(sp)
    be38:	df000017 	ldw	fp,0(sp)
    be3c:	dec00204 	addi	sp,sp,8
    be40:	f800283a 	ret

0000be44 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    be44:	defff904 	addi	sp,sp,-28
    be48:	dfc00615 	stw	ra,24(sp)
    be4c:	df000515 	stw	fp,20(sp)
    be50:	df000504 	addi	fp,sp,20
    be54:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    be58:	e0bfff17 	ldw	r2,-4(fp)
    be5c:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    be60:	e0bffb17 	ldw	r2,-20(fp)
    be64:	10800017 	ldw	r2,0(r2)
    be68:	10800104 	addi	r2,r2,4
    be6c:	10800037 	ldwio	r2,0(r2)
    be70:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    be74:	e0bffc17 	ldw	r2,-16(fp)
    be78:	1081000c 	andi	r2,r2,1024
    be7c:	10000b26 	beq	r2,zero,beac <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    be80:	e0bffb17 	ldw	r2,-20(fp)
    be84:	10800017 	ldw	r2,0(r2)
    be88:	10800104 	addi	r2,r2,4
    be8c:	1007883a 	mov	r3,r2
    be90:	e0bffb17 	ldw	r2,-20(fp)
    be94:	10800817 	ldw	r2,32(r2)
    be98:	10810014 	ori	r2,r2,1024
    be9c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    bea0:	e0bffb17 	ldw	r2,-20(fp)
    bea4:	10000915 	stw	zero,36(r2)
    bea8:	00002106 	br	bf30 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    beac:	e0bffb17 	ldw	r2,-20(fp)
    beb0:	10c00917 	ldw	r3,36(r2)
    beb4:	00a00034 	movhi	r2,32768
    beb8:	10bfff04 	addi	r2,r2,-4
    bebc:	10c01c36 	bltu	r2,r3,bf30 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
    bec0:	e0bffb17 	ldw	r2,-20(fp)
    bec4:	10800917 	ldw	r2,36(r2)
    bec8:	10c00044 	addi	r3,r2,1
    becc:	e0bffb17 	ldw	r2,-20(fp)
    bed0:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
    bed4:	e0bffb17 	ldw	r2,-20(fp)
    bed8:	10c00917 	ldw	r3,36(r2)
    bedc:	e0bffb17 	ldw	r2,-20(fp)
    bee0:	10800117 	ldw	r2,4(r2)
    bee4:	18801236 	bltu	r3,r2,bf30 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    bee8:	e0bffb17 	ldw	r2,-20(fp)
    beec:	10800c17 	ldw	r2,48(r2)
    bef0:	e0bffd15 	stw	r2,-12(fp)
    bef4:	00800104 	movi	r2,4
    bef8:	e0bffe0d 	sth	r2,-8(fp)
    befc:	00800044 	movi	r2,1
    bf00:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    bf04:	d0a73b43 	ldbu	r2,-25363(gp)
    bf08:	10803fcc 	andi	r2,r2,255
    bf0c:	10000826 	beq	r2,zero,bf30 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
    bf10:	e0bffe0b 	ldhu	r2,-8(fp)
    bf14:	e0fffe83 	ldbu	r3,-6(fp)
    bf18:	e13ffec4 	addi	r4,fp,-5
    bf1c:	200f883a 	mov	r7,r4
    bf20:	180d883a 	mov	r6,r3
    bf24:	100b883a 	mov	r5,r2
    bf28:	e13ffd17 	ldw	r4,-12(fp)
    bf2c:	00070c80 	call	70c8 <OSFlagPost>
    bf30:	d0a75017 	ldw	r2,-25280(gp)
    }
  }

  return alt_ticks_per_second();
}
    bf34:	e037883a 	mov	sp,fp
    bf38:	dfc00117 	ldw	ra,4(sp)
    bf3c:	df000017 	ldw	fp,0(sp)
    bf40:	dec00204 	addi	sp,sp,8
    bf44:	f800283a 	ret

0000bf48 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    bf48:	defffd04 	addi	sp,sp,-12
    bf4c:	df000215 	stw	fp,8(sp)
    bf50:	df000204 	addi	fp,sp,8
    bf54:	e13ffe15 	stw	r4,-8(fp)
    bf58:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    bf5c:	00000506 	br	bf74 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    bf60:	e0bfff17 	ldw	r2,-4(fp)
    bf64:	1090000c 	andi	r2,r2,16384
    bf68:	10000226 	beq	r2,zero,bf74 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    bf6c:	00bffd44 	movi	r2,-11
    bf70:	00000b06 	br	bfa0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    bf74:	e0bffe17 	ldw	r2,-8(fp)
    bf78:	10c01017 	ldw	r3,64(r2)
    bf7c:	e0bffe17 	ldw	r2,-8(fp)
    bf80:	10800f17 	ldw	r2,60(r2)
    bf84:	18800526 	beq	r3,r2,bf9c <altera_avalon_jtag_uart_close+0x54>
    bf88:	e0bffe17 	ldw	r2,-8(fp)
    bf8c:	10c00917 	ldw	r3,36(r2)
    bf90:	e0bffe17 	ldw	r2,-8(fp)
    bf94:	10800117 	ldw	r2,4(r2)
    bf98:	18bff136 	bltu	r3,r2,bf60 <__alt_mem_onchip_memory2_0+0xfc007f60>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    bf9c:	0005883a 	mov	r2,zero
}
    bfa0:	e037883a 	mov	sp,fp
    bfa4:	df000017 	ldw	fp,0(sp)
    bfa8:	dec00104 	addi	sp,sp,4
    bfac:	f800283a 	ret

0000bfb0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    bfb0:	defffa04 	addi	sp,sp,-24
    bfb4:	df000515 	stw	fp,20(sp)
    bfb8:	df000504 	addi	fp,sp,20
    bfbc:	e13ffd15 	stw	r4,-12(fp)
    bfc0:	e17ffe15 	stw	r5,-8(fp)
    bfc4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    bfc8:	00bff9c4 	movi	r2,-25
    bfcc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    bfd0:	e0bffe17 	ldw	r2,-8(fp)
    bfd4:	10da8060 	cmpeqi	r3,r2,27137
    bfd8:	1800031e 	bne	r3,zero,bfe8 <altera_avalon_jtag_uart_ioctl+0x38>
    bfdc:	109a80a0 	cmpeqi	r2,r2,27138
    bfe0:	1000181e 	bne	r2,zero,c044 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    bfe4:	00002906 	br	c08c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    bfe8:	e0bffd17 	ldw	r2,-12(fp)
    bfec:	10c00117 	ldw	r3,4(r2)
    bff0:	00a00034 	movhi	r2,32768
    bff4:	10bfffc4 	addi	r2,r2,-1
    bff8:	18802126 	beq	r3,r2,c080 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    bffc:	e0bfff17 	ldw	r2,-4(fp)
    c000:	10800017 	ldw	r2,0(r2)
    c004:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    c008:	e0bffc17 	ldw	r2,-16(fp)
    c00c:	10800090 	cmplti	r2,r2,2
    c010:	1000061e 	bne	r2,zero,c02c <altera_avalon_jtag_uart_ioctl+0x7c>
    c014:	e0fffc17 	ldw	r3,-16(fp)
    c018:	00a00034 	movhi	r2,32768
    c01c:	10bfffc4 	addi	r2,r2,-1
    c020:	18800226 	beq	r3,r2,c02c <altera_avalon_jtag_uart_ioctl+0x7c>
    c024:	e0bffc17 	ldw	r2,-16(fp)
    c028:	00000206 	br	c034 <altera_avalon_jtag_uart_ioctl+0x84>
    c02c:	00a00034 	movhi	r2,32768
    c030:	10bfff84 	addi	r2,r2,-2
    c034:	e0fffd17 	ldw	r3,-12(fp)
    c038:	18800115 	stw	r2,4(r3)
      rc = 0;
    c03c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    c040:	00000f06 	br	c080 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    c044:	e0bffd17 	ldw	r2,-12(fp)
    c048:	10c00117 	ldw	r3,4(r2)
    c04c:	00a00034 	movhi	r2,32768
    c050:	10bfffc4 	addi	r2,r2,-1
    c054:	18800c26 	beq	r3,r2,c088 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    c058:	e0bffd17 	ldw	r2,-12(fp)
    c05c:	10c00917 	ldw	r3,36(r2)
    c060:	e0bffd17 	ldw	r2,-12(fp)
    c064:	10800117 	ldw	r2,4(r2)
    c068:	1885803a 	cmpltu	r2,r3,r2
    c06c:	10c03fcc 	andi	r3,r2,255
    c070:	e0bfff17 	ldw	r2,-4(fp)
    c074:	10c00015 	stw	r3,0(r2)
      rc = 0;
    c078:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    c07c:	00000206 	br	c088 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    c080:	0001883a 	nop
    c084:	00000106 	br	c08c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    c088:	0001883a 	nop

  default:
    break;
  }

  return rc;
    c08c:	e0bffb17 	ldw	r2,-20(fp)
}
    c090:	e037883a 	mov	sp,fp
    c094:	df000017 	ldw	fp,0(sp)
    c098:	dec00104 	addi	sp,sp,4
    c09c:	f800283a 	ret

0000c0a0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    c0a0:	deffed04 	addi	sp,sp,-76
    c0a4:	dfc01215 	stw	ra,72(sp)
    c0a8:	df001115 	stw	fp,68(sp)
    c0ac:	df001104 	addi	fp,sp,68
    c0b0:	e13ffc15 	stw	r4,-16(fp)
    c0b4:	e17ffd15 	stw	r5,-12(fp)
    c0b8:	e1bffe15 	stw	r6,-8(fp)
    c0bc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    c0c0:	e0bffd17 	ldw	r2,-12(fp)
    c0c4:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
    c0c8:	e0bffc17 	ldw	r2,-16(fp)
    c0cc:	10800a17 	ldw	r2,40(r2)
    c0d0:	e0bff815 	stw	r2,-32(fp)
    c0d4:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
    c0d8:	e0bff90b 	ldhu	r2,-28(fp)
    c0dc:	e0fffb04 	addi	r3,fp,-20
    c0e0:	180d883a 	mov	r6,r3
    c0e4:	100b883a 	mov	r5,r2
    c0e8:	e13ff817 	ldw	r4,-32(fp)
    c0ec:	00095180 	call	9518 <OSSemPend>

  while (space > 0)
    c0f0:	00006106 	br	c278 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    c0f4:	e0bffc17 	ldw	r2,-16(fp)
    c0f8:	10800d17 	ldw	r2,52(r2)
    c0fc:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
    c100:	e0bffc17 	ldw	r2,-16(fp)
    c104:	10800e17 	ldw	r2,56(r2)
    c108:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
    c10c:	e0fff317 	ldw	r3,-52(fp)
    c110:	e0bff417 	ldw	r2,-48(fp)
    c114:	18800536 	bltu	r3,r2,c12c <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
    c118:	e0fff317 	ldw	r3,-52(fp)
    c11c:	e0bff417 	ldw	r2,-48(fp)
    c120:	1885c83a 	sub	r2,r3,r2
    c124:	e0bff115 	stw	r2,-60(fp)
    c128:	00000406 	br	c13c <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    c12c:	00c20004 	movi	r3,2048
    c130:	e0bff417 	ldw	r2,-48(fp)
    c134:	1885c83a 	sub	r2,r3,r2
    c138:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
    c13c:	e0bff117 	ldw	r2,-60(fp)
    c140:	10001e26 	beq	r2,zero,c1bc <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
    c144:	e0fffe17 	ldw	r3,-8(fp)
    c148:	e0bff117 	ldw	r2,-60(fp)
    c14c:	1880022e 	bgeu	r3,r2,c158 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
    c150:	e0bffe17 	ldw	r2,-8(fp)
    c154:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    c158:	e0bffc17 	ldw	r2,-16(fp)
    c15c:	10c01104 	addi	r3,r2,68
    c160:	e0bff417 	ldw	r2,-48(fp)
    c164:	1885883a 	add	r2,r3,r2
    c168:	e1bff117 	ldw	r6,-60(fp)
    c16c:	100b883a 	mov	r5,r2
    c170:	e13ff017 	ldw	r4,-64(fp)
    c174:	0001ba80 	call	1ba8 <memcpy>
      ptr   += n;
    c178:	e0fff017 	ldw	r3,-64(fp)
    c17c:	e0bff117 	ldw	r2,-60(fp)
    c180:	1885883a 	add	r2,r3,r2
    c184:	e0bff015 	stw	r2,-64(fp)
      space -= n;
    c188:	e0fffe17 	ldw	r3,-8(fp)
    c18c:	e0bff117 	ldw	r2,-60(fp)
    c190:	1885c83a 	sub	r2,r3,r2
    c194:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c198:	e0fff417 	ldw	r3,-48(fp)
    c19c:	e0bff117 	ldw	r2,-60(fp)
    c1a0:	1885883a 	add	r2,r3,r2
    c1a4:	10c1ffcc 	andi	r3,r2,2047
    c1a8:	e0bffc17 	ldw	r2,-16(fp)
    c1ac:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
    c1b0:	e0bffe17 	ldw	r2,-8(fp)
    c1b4:	00bfcf16 	blt	zero,r2,c0f4 <__alt_mem_onchip_memory2_0+0xfc0080f4>
    c1b8:	00000106 	br	c1c0 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    c1bc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    c1c0:	e0fff017 	ldw	r3,-64(fp)
    c1c4:	e0bffd17 	ldw	r2,-12(fp)
    c1c8:	18802e1e 	bne	r3,r2,c284 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    c1cc:	e0bfff17 	ldw	r2,-4(fp)
    c1d0:	1090000c 	andi	r2,r2,16384
    c1d4:	10002d1e 	bne	r2,zero,c28c <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
    c1d8:	d0a73b43 	ldbu	r2,-25363(gp)
    c1dc:	10803fcc 	andi	r2,r2,255
    c1e0:	10800058 	cmpnei	r2,r2,1
    c1e4:	1000161e 	bne	r2,zero,c240 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
    c1e8:	e0bffc17 	ldw	r2,-16(fp)
    c1ec:	10800c17 	ldw	r2,48(r2)
    c1f0:	e0bff215 	stw	r2,-56(fp)
    c1f4:	00800144 	movi	r2,5
    c1f8:	e0bff98d 	sth	r2,-26(fp)
    c1fc:	00bfe0c4 	movi	r2,-125
    c200:	e0bffa05 	stb	r2,-24(fp)
    c204:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    c208:	d0a73b43 	ldbu	r2,-25363(gp)
    c20c:	10803fcc 	andi	r2,r2,255
    c210:	10001526 	beq	r2,zero,c268 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    c214:	e0fff98b 	ldhu	r3,-26(fp)
    c218:	e13ffa03 	ldbu	r4,-24(fp)
    c21c:	e17ffa8b 	ldhu	r5,-22(fp)
    c220:	e0bffb44 	addi	r2,fp,-19
    c224:	d8800015 	stw	r2,0(sp)
    c228:	280f883a 	mov	r7,r5
    c22c:	200d883a 	mov	r6,r4
    c230:	180b883a 	mov	r5,r3
    c234:	e13ff217 	ldw	r4,-56(fp)
    c238:	0006ab00 	call	6ab0 <OSFlagPend>
    c23c:	00000a06 	br	c268 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    c240:	0001883a 	nop
    c244:	e0bffc17 	ldw	r2,-16(fp)
    c248:	10c00d17 	ldw	r3,52(r2)
    c24c:	e0bff317 	ldw	r2,-52(fp)
    c250:	1880051e 	bne	r3,r2,c268 <altera_avalon_jtag_uart_read+0x1c8>
    c254:	e0bffc17 	ldw	r2,-16(fp)
    c258:	10c00917 	ldw	r3,36(r2)
    c25c:	e0bffc17 	ldw	r2,-16(fp)
    c260:	10800117 	ldw	r2,4(r2)
    c264:	18bff736 	bltu	r3,r2,c244 <__alt_mem_onchip_memory2_0+0xfc008244>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    c268:	e0bffc17 	ldw	r2,-16(fp)
    c26c:	10c00d17 	ldw	r3,52(r2)
    c270:	e0bff317 	ldw	r2,-52(fp)
    c274:	18800726 	beq	r3,r2,c294 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c278:	e0bffe17 	ldw	r2,-8(fp)
    c27c:	00bf9d16 	blt	zero,r2,c0f4 <__alt_mem_onchip_memory2_0+0xfc0080f4>
    c280:	00000506 	br	c298 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    c284:	0001883a 	nop
    c288:	00000306 	br	c298 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    c28c:	0001883a 	nop
    c290:	00000106 	br	c298 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    c294:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
    c298:	e0bffc17 	ldw	r2,-16(fp)
    c29c:	10800a17 	ldw	r2,40(r2)
    c2a0:	1009883a 	mov	r4,r2
    c2a4:	00098900 	call	9890 <OSSemPost>

  if (ptr != buffer)
    c2a8:	e0fff017 	ldw	r3,-64(fp)
    c2ac:	e0bffd17 	ldw	r2,-12(fp)
    c2b0:	18801826 	beq	r3,r2,c314 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c2b4:	0005303a 	rdctl	r2,status
    c2b8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c2bc:	e0fff717 	ldw	r3,-36(fp)
    c2c0:	00bfff84 	movi	r2,-2
    c2c4:	1884703a 	and	r2,r3,r2
    c2c8:	1001703a 	wrctl	status,r2
  
  return context;
    c2cc:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    c2d0:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c2d4:	e0bffc17 	ldw	r2,-16(fp)
    c2d8:	10800817 	ldw	r2,32(r2)
    c2dc:	10c00054 	ori	r3,r2,1
    c2e0:	e0bffc17 	ldw	r2,-16(fp)
    c2e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c2e8:	e0bffc17 	ldw	r2,-16(fp)
    c2ec:	10800017 	ldw	r2,0(r2)
    c2f0:	10800104 	addi	r2,r2,4
    c2f4:	1007883a 	mov	r3,r2
    c2f8:	e0bffc17 	ldw	r2,-16(fp)
    c2fc:	10800817 	ldw	r2,32(r2)
    c300:	18800035 	stwio	r2,0(r3)
    c304:	e0bff617 	ldw	r2,-40(fp)
    c308:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c30c:	e0bff517 	ldw	r2,-44(fp)
    c310:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    c314:	e0fff017 	ldw	r3,-64(fp)
    c318:	e0bffd17 	ldw	r2,-12(fp)
    c31c:	18800426 	beq	r3,r2,c330 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
    c320:	e0fff017 	ldw	r3,-64(fp)
    c324:	e0bffd17 	ldw	r2,-12(fp)
    c328:	1885c83a 	sub	r2,r3,r2
    c32c:	00000606 	br	c348 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
    c330:	e0bfff17 	ldw	r2,-4(fp)
    c334:	1090000c 	andi	r2,r2,16384
    c338:	10000226 	beq	r2,zero,c344 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
    c33c:	00bffd44 	movi	r2,-11
    c340:	00000106 	br	c348 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
    c344:	00bffec4 	movi	r2,-5
}
    c348:	e037883a 	mov	sp,fp
    c34c:	dfc00117 	ldw	ra,4(sp)
    c350:	df000017 	ldw	fp,0(sp)
    c354:	dec00204 	addi	sp,sp,8
    c358:	f800283a 	ret

0000c35c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    c35c:	deffed04 	addi	sp,sp,-76
    c360:	dfc01215 	stw	ra,72(sp)
    c364:	df001115 	stw	fp,68(sp)
    c368:	df001104 	addi	fp,sp,68
    c36c:	e13ffc15 	stw	r4,-16(fp)
    c370:	e17ffd15 	stw	r5,-12(fp)
    c374:	e1bffe15 	stw	r6,-8(fp)
    c378:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    c37c:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    c380:	e0bffd17 	ldw	r2,-12(fp)
    c384:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
    c388:	e0bffc17 	ldw	r2,-16(fp)
    c38c:	10800b17 	ldw	r2,44(r2)
    c390:	e0bff815 	stw	r2,-32(fp)
    c394:	e03ff90d 	sth	zero,-28(fp)
    c398:	e0bff90b 	ldhu	r2,-28(fp)
    c39c:	e0fffb44 	addi	r3,fp,-19
    c3a0:	180d883a 	mov	r6,r3
    c3a4:	100b883a 	mov	r5,r2
    c3a8:	e13ff817 	ldw	r4,-32(fp)
    c3ac:	00095180 	call	9518 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c3b0:	00003706 	br	c490 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    c3b4:	e0bffc17 	ldw	r2,-16(fp)
    c3b8:	10800f17 	ldw	r2,60(r2)
    c3bc:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
    c3c0:	e0bffc17 	ldw	r2,-16(fp)
    c3c4:	10801017 	ldw	r2,64(r2)
    c3c8:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
    c3cc:	e0fff417 	ldw	r3,-48(fp)
    c3d0:	e0bff017 	ldw	r2,-64(fp)
    c3d4:	1880062e 	bgeu	r3,r2,c3f0 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
    c3d8:	e0fff017 	ldw	r3,-64(fp)
    c3dc:	e0bff417 	ldw	r2,-48(fp)
    c3e0:	1885c83a 	sub	r2,r3,r2
    c3e4:	10bfffc4 	addi	r2,r2,-1
    c3e8:	e0bff115 	stw	r2,-60(fp)
    c3ec:	00000b06 	br	c41c <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
    c3f0:	e0bff017 	ldw	r2,-64(fp)
    c3f4:	10000526 	beq	r2,zero,c40c <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    c3f8:	00c20004 	movi	r3,2048
    c3fc:	e0bff417 	ldw	r2,-48(fp)
    c400:	1885c83a 	sub	r2,r3,r2
    c404:	e0bff115 	stw	r2,-60(fp)
    c408:	00000406 	br	c41c <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    c40c:	00c1ffc4 	movi	r3,2047
    c410:	e0bff417 	ldw	r2,-48(fp)
    c414:	1885c83a 	sub	r2,r3,r2
    c418:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
    c41c:	e0bff117 	ldw	r2,-60(fp)
    c420:	10001e26 	beq	r2,zero,c49c <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
    c424:	e0fffe17 	ldw	r3,-8(fp)
    c428:	e0bff117 	ldw	r2,-60(fp)
    c42c:	1880022e 	bgeu	r3,r2,c438 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
    c430:	e0bffe17 	ldw	r2,-8(fp)
    c434:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    c438:	e0bffc17 	ldw	r2,-16(fp)
    c43c:	10c21104 	addi	r3,r2,2116
    c440:	e0bff417 	ldw	r2,-48(fp)
    c444:	1885883a 	add	r2,r3,r2
    c448:	e1bff117 	ldw	r6,-60(fp)
    c44c:	e17ffd17 	ldw	r5,-12(fp)
    c450:	1009883a 	mov	r4,r2
    c454:	0001ba80 	call	1ba8 <memcpy>
      ptr   += n;
    c458:	e0fffd17 	ldw	r3,-12(fp)
    c45c:	e0bff117 	ldw	r2,-60(fp)
    c460:	1885883a 	add	r2,r3,r2
    c464:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    c468:	e0fffe17 	ldw	r3,-8(fp)
    c46c:	e0bff117 	ldw	r2,-60(fp)
    c470:	1885c83a 	sub	r2,r3,r2
    c474:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c478:	e0fff417 	ldw	r3,-48(fp)
    c47c:	e0bff117 	ldw	r2,-60(fp)
    c480:	1885883a 	add	r2,r3,r2
    c484:	10c1ffcc 	andi	r3,r2,2047
    c488:	e0bffc17 	ldw	r2,-16(fp)
    c48c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c490:	e0bffe17 	ldw	r2,-8(fp)
    c494:	00bfc716 	blt	zero,r2,c3b4 <__alt_mem_onchip_memory2_0+0xfc0083b4>
    c498:	00000106 	br	c4a0 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    c49c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c4a0:	0005303a 	rdctl	r2,status
    c4a4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c4a8:	e0fff717 	ldw	r3,-36(fp)
    c4ac:	00bfff84 	movi	r2,-2
    c4b0:	1884703a 	and	r2,r3,r2
    c4b4:	1001703a 	wrctl	status,r2
  
  return context;
    c4b8:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    c4bc:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c4c0:	e0bffc17 	ldw	r2,-16(fp)
    c4c4:	10800817 	ldw	r2,32(r2)
    c4c8:	10c00094 	ori	r3,r2,2
    c4cc:	e0bffc17 	ldw	r2,-16(fp)
    c4d0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c4d4:	e0bffc17 	ldw	r2,-16(fp)
    c4d8:	10800017 	ldw	r2,0(r2)
    c4dc:	10800104 	addi	r2,r2,4
    c4e0:	1007883a 	mov	r3,r2
    c4e4:	e0bffc17 	ldw	r2,-16(fp)
    c4e8:	10800817 	ldw	r2,32(r2)
    c4ec:	18800035 	stwio	r2,0(r3)
    c4f0:	e0bff617 	ldw	r2,-40(fp)
    c4f4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c4f8:	e0bff317 	ldw	r2,-52(fp)
    c4fc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    c500:	e0bffe17 	ldw	r2,-8(fp)
    c504:	00802a0e 	bge	zero,r2,c5b0 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
    c508:	e0bfff17 	ldw	r2,-4(fp)
    c50c:	1090000c 	andi	r2,r2,16384
    c510:	10002a1e 	bne	r2,zero,c5bc <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
    c514:	d0a73b43 	ldbu	r2,-25363(gp)
    c518:	10803fcc 	andi	r2,r2,255
    c51c:	10800058 	cmpnei	r2,r2,1
    c520:	1000161e 	bne	r2,zero,c57c <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
    c524:	e0bffc17 	ldw	r2,-16(fp)
    c528:	10800c17 	ldw	r2,48(r2)
    c52c:	e0bff515 	stw	r2,-44(fp)
    c530:	00800184 	movi	r2,6
    c534:	e0bff98d 	sth	r2,-26(fp)
    c538:	00bfe0c4 	movi	r2,-125
    c53c:	e0bffa05 	stb	r2,-24(fp)
    c540:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    c544:	d0a73b43 	ldbu	r2,-25363(gp)
    c548:	10803fcc 	andi	r2,r2,255
    c54c:	10001526 	beq	r2,zero,c5a4 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    c550:	e0fff98b 	ldhu	r3,-26(fp)
    c554:	e13ffa03 	ldbu	r4,-24(fp)
    c558:	e17ffa8b 	ldhu	r5,-22(fp)
    c55c:	e0bffb04 	addi	r2,fp,-20
    c560:	d8800015 	stw	r2,0(sp)
    c564:	280f883a 	mov	r7,r5
    c568:	200d883a 	mov	r6,r4
    c56c:	180b883a 	mov	r5,r3
    c570:	e13ff517 	ldw	r4,-44(fp)
    c574:	0006ab00 	call	6ab0 <OSFlagPend>
    c578:	00000a06 	br	c5a4 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    c57c:	0001883a 	nop
    c580:	e0bffc17 	ldw	r2,-16(fp)
    c584:	10c01017 	ldw	r3,64(r2)
    c588:	e0bff017 	ldw	r2,-64(fp)
    c58c:	1880051e 	bne	r3,r2,c5a4 <altera_avalon_jtag_uart_write+0x248>
    c590:	e0bffc17 	ldw	r2,-16(fp)
    c594:	10c00917 	ldw	r3,36(r2)
    c598:	e0bffc17 	ldw	r2,-16(fp)
    c59c:	10800117 	ldw	r2,4(r2)
    c5a0:	18bff736 	bltu	r3,r2,c580 <__alt_mem_onchip_memory2_0+0xfc008580>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    c5a4:	e0bffc17 	ldw	r2,-16(fp)
    c5a8:	10800917 	ldw	r2,36(r2)
    c5ac:	1000051e 	bne	r2,zero,c5c4 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
    c5b0:	e0bffe17 	ldw	r2,-8(fp)
    c5b4:	00bfb616 	blt	zero,r2,c490 <__alt_mem_onchip_memory2_0+0xfc008490>
    c5b8:	00000306 	br	c5c8 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    c5bc:	0001883a 	nop
    c5c0:	00000106 	br	c5c8 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    c5c4:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
    c5c8:	e0bffc17 	ldw	r2,-16(fp)
    c5cc:	10800b17 	ldw	r2,44(r2)
    c5d0:	1009883a 	mov	r4,r2
    c5d4:	00098900 	call	9890 <OSSemPost>

  if (ptr != start)
    c5d8:	e0fffd17 	ldw	r3,-12(fp)
    c5dc:	e0bff217 	ldw	r2,-56(fp)
    c5e0:	18800426 	beq	r3,r2,c5f4 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
    c5e4:	e0fffd17 	ldw	r3,-12(fp)
    c5e8:	e0bff217 	ldw	r2,-56(fp)
    c5ec:	1885c83a 	sub	r2,r3,r2
    c5f0:	00000606 	br	c60c <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
    c5f4:	e0bfff17 	ldw	r2,-4(fp)
    c5f8:	1090000c 	andi	r2,r2,16384
    c5fc:	10000226 	beq	r2,zero,c608 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
    c600:	00bffd44 	movi	r2,-11
    c604:	00000106 	br	c60c <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    c608:	00bffec4 	movi	r2,-5
}
    c60c:	e037883a 	mov	sp,fp
    c610:	dfc00117 	ldw	ra,4(sp)
    c614:	df000017 	ldw	fp,0(sp)
    c618:	dec00204 	addi	sp,sp,8
    c61c:	f800283a 	ret

0000c620 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    c620:	defffa04 	addi	sp,sp,-24
    c624:	dfc00515 	stw	ra,20(sp)
    c628:	df000415 	stw	fp,16(sp)
    c62c:	df000404 	addi	fp,sp,16
    c630:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    c634:	0007883a 	mov	r3,zero
    c638:	e0bfff17 	ldw	r2,-4(fp)
    c63c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    c640:	e0bfff17 	ldw	r2,-4(fp)
    c644:	10800104 	addi	r2,r2,4
    c648:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c64c:	0005303a 	rdctl	r2,status
    c650:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c654:	e0fffd17 	ldw	r3,-12(fp)
    c658:	00bfff84 	movi	r2,-2
    c65c:	1884703a 	and	r2,r3,r2
    c660:	1001703a 	wrctl	status,r2
  
  return context;
    c664:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    c668:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    c66c:	000dc800 	call	dc80 <alt_tick>
    c670:	e0bffc17 	ldw	r2,-16(fp)
    c674:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c678:	e0bffe17 	ldw	r2,-8(fp)
    c67c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    c680:	0001883a 	nop
    c684:	e037883a 	mov	sp,fp
    c688:	dfc00117 	ldw	ra,4(sp)
    c68c:	df000017 	ldw	fp,0(sp)
    c690:	dec00204 	addi	sp,sp,8
    c694:	f800283a 	ret

0000c698 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    c698:	defff804 	addi	sp,sp,-32
    c69c:	dfc00715 	stw	ra,28(sp)
    c6a0:	df000615 	stw	fp,24(sp)
    c6a4:	df000604 	addi	fp,sp,24
    c6a8:	e13ffc15 	stw	r4,-16(fp)
    c6ac:	e17ffd15 	stw	r5,-12(fp)
    c6b0:	e1bffe15 	stw	r6,-8(fp)
    c6b4:	e1ffff15 	stw	r7,-4(fp)
    c6b8:	e0bfff17 	ldw	r2,-4(fp)
    c6bc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    c6c0:	d0a75017 	ldw	r2,-25280(gp)
    c6c4:	1000021e 	bne	r2,zero,c6d0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    c6c8:	e0bffb17 	ldw	r2,-20(fp)
    c6cc:	d0a75015 	stw	r2,-25280(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    c6d0:	e0bffc17 	ldw	r2,-16(fp)
    c6d4:	10800104 	addi	r2,r2,4
    c6d8:	00c001c4 	movi	r3,7
    c6dc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    c6e0:	d8000015 	stw	zero,0(sp)
    c6e4:	e1fffc17 	ldw	r7,-16(fp)
    c6e8:	01800074 	movhi	r6,1
    c6ec:	31b18804 	addi	r6,r6,-14816
    c6f0:	e17ffe17 	ldw	r5,-8(fp)
    c6f4:	e13ffd17 	ldw	r4,-12(fp)
    c6f8:	000d5b00 	call	d5b0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    c6fc:	0001883a 	nop
    c700:	e037883a 	mov	sp,fp
    c704:	dfc00117 	ldw	ra,4(sp)
    c708:	df000017 	ldw	fp,0(sp)
    c70c:	dec00204 	addi	sp,sp,8
    c710:	f800283a 	ret

0000c714 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    c714:	defffa04 	addi	sp,sp,-24
    c718:	dfc00515 	stw	ra,20(sp)
    c71c:	df000415 	stw	fp,16(sp)
    c720:	df000404 	addi	fp,sp,16
    c724:	e13ffd15 	stw	r4,-12(fp)
    c728:	e17ffe15 	stw	r5,-8(fp)
    c72c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    c730:	e0bffd17 	ldw	r2,-12(fp)
    c734:	10800017 	ldw	r2,0(r2)
    c738:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    c73c:	e0bffc17 	ldw	r2,-16(fp)
    c740:	10c00a04 	addi	r3,r2,40
    c744:	e0bffd17 	ldw	r2,-12(fp)
    c748:	10800217 	ldw	r2,8(r2)
    c74c:	100f883a 	mov	r7,r2
    c750:	e1bfff17 	ldw	r6,-4(fp)
    c754:	e17ffe17 	ldw	r5,-8(fp)
    c758:	1809883a 	mov	r4,r3
    c75c:	000cd8c0 	call	cd8c <altera_avalon_uart_read>
      fd->fd_flags);
}
    c760:	e037883a 	mov	sp,fp
    c764:	dfc00117 	ldw	ra,4(sp)
    c768:	df000017 	ldw	fp,0(sp)
    c76c:	dec00204 	addi	sp,sp,8
    c770:	f800283a 	ret

0000c774 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    c774:	defffa04 	addi	sp,sp,-24
    c778:	dfc00515 	stw	ra,20(sp)
    c77c:	df000415 	stw	fp,16(sp)
    c780:	df000404 	addi	fp,sp,16
    c784:	e13ffd15 	stw	r4,-12(fp)
    c788:	e17ffe15 	stw	r5,-8(fp)
    c78c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    c790:	e0bffd17 	ldw	r2,-12(fp)
    c794:	10800017 	ldw	r2,0(r2)
    c798:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    c79c:	e0bffc17 	ldw	r2,-16(fp)
    c7a0:	10c00a04 	addi	r3,r2,40
    c7a4:	e0bffd17 	ldw	r2,-12(fp)
    c7a8:	10800217 	ldw	r2,8(r2)
    c7ac:	100f883a 	mov	r7,r2
    c7b0:	e1bfff17 	ldw	r6,-4(fp)
    c7b4:	e17ffe17 	ldw	r5,-8(fp)
    c7b8:	1809883a 	mov	r4,r3
    c7bc:	000d0300 	call	d030 <altera_avalon_uart_write>
      fd->fd_flags);
}
    c7c0:	e037883a 	mov	sp,fp
    c7c4:	dfc00117 	ldw	ra,4(sp)
    c7c8:	df000017 	ldw	fp,0(sp)
    c7cc:	dec00204 	addi	sp,sp,8
    c7d0:	f800283a 	ret

0000c7d4 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    c7d4:	defffc04 	addi	sp,sp,-16
    c7d8:	dfc00315 	stw	ra,12(sp)
    c7dc:	df000215 	stw	fp,8(sp)
    c7e0:	df000204 	addi	fp,sp,8
    c7e4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    c7e8:	e0bfff17 	ldw	r2,-4(fp)
    c7ec:	10800017 	ldw	r2,0(r2)
    c7f0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
    c7f4:	e0bffe17 	ldw	r2,-8(fp)
    c7f8:	10c00a04 	addi	r3,r2,40
    c7fc:	e0bfff17 	ldw	r2,-4(fp)
    c800:	10800217 	ldw	r2,8(r2)
    c804:	100b883a 	mov	r5,r2
    c808:	1809883a 	mov	r4,r3
    c80c:	000ccfc0 	call	ccfc <altera_avalon_uart_close>
}
    c810:	e037883a 	mov	sp,fp
    c814:	dfc00117 	ldw	ra,4(sp)
    c818:	df000017 	ldw	fp,0(sp)
    c81c:	dec00204 	addi	sp,sp,8
    c820:	f800283a 	ret

0000c824 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    c824:	defff304 	addi	sp,sp,-52
    c828:	dfc00c15 	stw	ra,48(sp)
    c82c:	df000b15 	stw	fp,44(sp)
    c830:	df000b04 	addi	fp,sp,44
    c834:	e13ffd15 	stw	r4,-12(fp)
    c838:	e17ffe15 	stw	r5,-8(fp)
    c83c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
    c840:	e0bffd17 	ldw	r2,-12(fp)
    c844:	10800017 	ldw	r2,0(r2)
    c848:	e0bff615 	stw	r2,-40(fp)
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    c84c:	e0bffd17 	ldw	r2,-12(fp)
    c850:	10800704 	addi	r2,r2,28
    c854:	e0bffa15 	stw	r2,-24(fp)
    c858:	e03ffb0d 	sth	zero,-20(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
    c85c:	e0bffb0b 	ldhu	r2,-20(fp)
    c860:	e0fffc84 	addi	r3,fp,-14
    c864:	180b883a 	mov	r5,r3
    c868:	1009883a 	mov	r4,r2
    c86c:	00064ec0 	call	64ec <OSFlagCreate>
    c870:	1007883a 	mov	r3,r2
    c874:	e0bffa17 	ldw	r2,-24(fp)
    c878:	10c00015 	stw	r3,0(r2)
  return err;
    c87c:	e0bffc83 	ldbu	r2,-14(fp)
    c880:	10803fcc 	andi	r2,r2,255
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
    c884:	1000241e 	bne	r2,zero,c918 <altera_avalon_uart_init+0xf4>
    c888:	e0bffd17 	ldw	r2,-12(fp)
    c88c:	10800804 	addi	r2,r2,32
    c890:	e0bff715 	stw	r2,-36(fp)
    c894:	00800044 	movi	r2,1
    c898:	e0bffb8d 	sth	r2,-18(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    c89c:	e0bffb8b 	ldhu	r2,-18(fp)
    c8a0:	1009883a 	mov	r4,r2
    c8a4:	00092000 	call	9200 <OSSemCreate>
    c8a8:	1007883a 	mov	r3,r2
    c8ac:	e0bff717 	ldw	r2,-36(fp)
    c8b0:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
    c8b4:	e0bff717 	ldw	r2,-36(fp)
    c8b8:	10800017 	ldw	r2,0(r2)
    c8bc:	10000226 	beq	r2,zero,c8c8 <altera_avalon_uart_init+0xa4>
    c8c0:	0005883a 	mov	r2,zero
    c8c4:	00000106 	br	c8cc <altera_avalon_uart_init+0xa8>
    c8c8:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    c8cc:	1000121e 	bne	r2,zero,c918 <altera_avalon_uart_init+0xf4>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
    c8d0:	e0bffd17 	ldw	r2,-12(fp)
    c8d4:	10800904 	addi	r2,r2,36
    c8d8:	e0bff815 	stw	r2,-32(fp)
    c8dc:	00800044 	movi	r2,1
    c8e0:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    c8e4:	e0bffc0b 	ldhu	r2,-16(fp)
    c8e8:	1009883a 	mov	r4,r2
    c8ec:	00092000 	call	9200 <OSSemCreate>
    c8f0:	1007883a 	mov	r3,r2
    c8f4:	e0bff817 	ldw	r2,-32(fp)
    c8f8:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
    c8fc:	e0bff817 	ldw	r2,-32(fp)
    c900:	10800017 	ldw	r2,0(r2)
    c904:	10000226 	beq	r2,zero,c910 <altera_avalon_uart_init+0xec>
    c908:	0005883a 	mov	r2,zero
    c90c:	00000106 	br	c914 <altera_avalon_uart_init+0xf0>
    c910:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
    c914:	10000226 	beq	r2,zero,c920 <altera_avalon_uart_init+0xfc>
    c918:	00800044 	movi	r2,1
    c91c:	00000106 	br	c924 <altera_avalon_uart_init+0x100>
    c920:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    c924:	e0bff915 	stw	r2,-28(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
    c928:	e0bff917 	ldw	r2,-28(fp)
    c92c:	10000f1e 	bne	r2,zero,c96c <altera_avalon_uart_init+0x148>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    c930:	e0bffd17 	ldw	r2,-12(fp)
    c934:	00c32004 	movi	r3,3200
    c938:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    c93c:	e0bff617 	ldw	r2,-40(fp)
    c940:	10800304 	addi	r2,r2,12
    c944:	e0fffd17 	ldw	r3,-12(fp)
    c948:	18c00117 	ldw	r3,4(r3)
    c94c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    c950:	d8000015 	stw	zero,0(sp)
    c954:	e1fffd17 	ldw	r7,-12(fp)
    c958:	01800074 	movhi	r6,1
    c95c:	31b26104 	addi	r6,r6,-13948
    c960:	e17fff17 	ldw	r5,-4(fp)
    c964:	e13ffe17 	ldw	r4,-8(fp)
    c968:	000d5b00 	call	d5b0 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    c96c:	0001883a 	nop
    c970:	e037883a 	mov	sp,fp
    c974:	dfc00117 	ldw	ra,4(sp)
    c978:	df000017 	ldw	fp,0(sp)
    c97c:	dec00204 	addi	sp,sp,8
    c980:	f800283a 	ret

0000c984 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
    c984:	defffa04 	addi	sp,sp,-24
    c988:	dfc00515 	stw	ra,20(sp)
    c98c:	df000415 	stw	fp,16(sp)
    c990:	df000404 	addi	fp,sp,16
    c994:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
    c998:	e0bfff17 	ldw	r2,-4(fp)
    c99c:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
    c9a0:	e0bffc17 	ldw	r2,-16(fp)
    c9a4:	10800017 	ldw	r2,0(r2)
    c9a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
    c9ac:	e0bffd17 	ldw	r2,-12(fp)
    c9b0:	10800204 	addi	r2,r2,8
    c9b4:	10800037 	ldwio	r2,0(r2)
    c9b8:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
    c9bc:	e0bffd17 	ldw	r2,-12(fp)
    c9c0:	10800204 	addi	r2,r2,8
    c9c4:	0007883a 	mov	r3,zero
    c9c8:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
    c9cc:	e0bffd17 	ldw	r2,-12(fp)
    c9d0:	10800204 	addi	r2,r2,8
    c9d4:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    c9d8:	e0bffe17 	ldw	r2,-8(fp)
    c9dc:	1080200c 	andi	r2,r2,128
    c9e0:	10000326 	beq	r2,zero,c9f0 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
    c9e4:	e17ffe17 	ldw	r5,-8(fp)
    c9e8:	e13ffc17 	ldw	r4,-16(fp)
    c9ec:	000ca200 	call	ca20 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
    c9f0:	e0bffe17 	ldw	r2,-8(fp)
    c9f4:	1081100c 	andi	r2,r2,1088
    c9f8:	10000326 	beq	r2,zero,ca08 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
    c9fc:	e17ffe17 	ldw	r5,-8(fp)
    ca00:	e13ffc17 	ldw	r4,-16(fp)
    ca04:	000cb580 	call	cb58 <altera_avalon_uart_txirq>
  }
  

}
    ca08:	0001883a 	nop
    ca0c:	e037883a 	mov	sp,fp
    ca10:	dfc00117 	ldw	ra,4(sp)
    ca14:	df000017 	ldw	fp,0(sp)
    ca18:	dec00204 	addi	sp,sp,8
    ca1c:	f800283a 	ret

0000ca20 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    ca20:	defff904 	addi	sp,sp,-28
    ca24:	dfc00615 	stw	ra,24(sp)
    ca28:	df000515 	stw	fp,20(sp)
    ca2c:	df000504 	addi	fp,sp,20
    ca30:	e13ffe15 	stw	r4,-8(fp)
    ca34:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    ca38:	e0bfff17 	ldw	r2,-4(fp)
    ca3c:	108000cc 	andi	r2,r2,3
    ca40:	10003f1e 	bne	r2,zero,cb40 <altera_avalon_uart_rxirq+0x120>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    ca44:	e0bffe17 	ldw	r2,-8(fp)
    ca48:	10c00317 	ldw	r3,12(r2)
    ca4c:	e0bffe17 	ldw	r2,-8(fp)
    ca50:	10800217 	ldw	r2,8(r2)
    ca54:	1880121e 	bne	r3,r2,caa0 <altera_avalon_uart_rxirq+0x80>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
    ca58:	e0bffe17 	ldw	r2,-8(fp)
    ca5c:	10800717 	ldw	r2,28(r2)
    ca60:	e0bffc15 	stw	r2,-16(fp)
    ca64:	00800044 	movi	r2,1
    ca68:	e0bffd0d 	sth	r2,-12(fp)
    ca6c:	00800044 	movi	r2,1
    ca70:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    ca74:	d0a73b43 	ldbu	r2,-25363(gp)
    ca78:	10803fcc 	andi	r2,r2,255
    ca7c:	10000826 	beq	r2,zero,caa0 <altera_avalon_uart_rxirq+0x80>
  {
    OSFlagPost (group, flags, opt, &err);
    ca80:	e0bffd0b 	ldhu	r2,-12(fp)
    ca84:	e0fffd83 	ldbu	r3,-10(fp)
    ca88:	e13ffdc4 	addi	r4,fp,-9
    ca8c:	200f883a 	mov	r7,r4
    ca90:	180d883a 	mov	r6,r3
    ca94:	100b883a 	mov	r5,r2
    ca98:	e13ffc17 	ldw	r4,-16(fp)
    ca9c:	00070c80 	call	70c8 <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    caa0:	e0bffe17 	ldw	r2,-8(fp)
    caa4:	10800317 	ldw	r2,12(r2)
    caa8:	10800044 	addi	r2,r2,1
    caac:	10800fcc 	andi	r2,r2,63
    cab0:	e0bffb15 	stw	r2,-20(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    cab4:	e0bffe17 	ldw	r2,-8(fp)
    cab8:	10800317 	ldw	r2,12(r2)
    cabc:	e0fffe17 	ldw	r3,-8(fp)
    cac0:	18c00017 	ldw	r3,0(r3)
    cac4:	18c00037 	ldwio	r3,0(r3)
    cac8:	1809883a 	mov	r4,r3
    cacc:	e0fffe17 	ldw	r3,-8(fp)
    cad0:	1885883a 	add	r2,r3,r2
    cad4:	10800a04 	addi	r2,r2,40
    cad8:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
    cadc:	e0bffe17 	ldw	r2,-8(fp)
    cae0:	e0fffb17 	ldw	r3,-20(fp)
    cae4:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    cae8:	e0bffe17 	ldw	r2,-8(fp)
    caec:	10800317 	ldw	r2,12(r2)
    caf0:	10800044 	addi	r2,r2,1
    caf4:	10800fcc 	andi	r2,r2,63
    caf8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    cafc:	e0bffe17 	ldw	r2,-8(fp)
    cb00:	10c00217 	ldw	r3,8(r2)
    cb04:	e0bffb17 	ldw	r2,-20(fp)
    cb08:	18800e1e 	bne	r3,r2,cb44 <altera_avalon_uart_rxirq+0x124>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    cb0c:	e0bffe17 	ldw	r2,-8(fp)
    cb10:	10c00117 	ldw	r3,4(r2)
    cb14:	00bfdfc4 	movi	r2,-129
    cb18:	1886703a 	and	r3,r3,r2
    cb1c:	e0bffe17 	ldw	r2,-8(fp)
    cb20:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    cb24:	e0bffe17 	ldw	r2,-8(fp)
    cb28:	10800017 	ldw	r2,0(r2)
    cb2c:	10800304 	addi	r2,r2,12
    cb30:	e0fffe17 	ldw	r3,-8(fp)
    cb34:	18c00117 	ldw	r3,4(r3)
    cb38:	10c00035 	stwio	r3,0(r2)
    cb3c:	00000106 	br	cb44 <altera_avalon_uart_rxirq+0x124>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
    cb40:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
    cb44:	e037883a 	mov	sp,fp
    cb48:	dfc00117 	ldw	ra,4(sp)
    cb4c:	df000017 	ldw	fp,0(sp)
    cb50:	dec00204 	addi	sp,sp,8
    cb54:	f800283a 	ret

0000cb58 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    cb58:	defffa04 	addi	sp,sp,-24
    cb5c:	dfc00515 	stw	ra,20(sp)
    cb60:	df000415 	stw	fp,16(sp)
    cb64:	df000404 	addi	fp,sp,16
    cb68:	e13ffe15 	stw	r4,-8(fp)
    cb6c:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    cb70:	e0bffe17 	ldw	r2,-8(fp)
    cb74:	10c00417 	ldw	r3,16(r2)
    cb78:	e0bffe17 	ldw	r2,-8(fp)
    cb7c:	10800517 	ldw	r2,20(r2)
    cb80:	18804726 	beq	r3,r2,cca0 <altera_avalon_uart_txirq+0x148>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    cb84:	e0bffe17 	ldw	r2,-8(fp)
    cb88:	10800617 	ldw	r2,24(r2)
    cb8c:	1080008c 	andi	r2,r2,2
    cb90:	10000326 	beq	r2,zero,cba0 <altera_avalon_uart_txirq+0x48>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    cb94:	e0bfff17 	ldw	r2,-4(fp)
    cb98:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    cb9c:	10003226 	beq	r2,zero,cc68 <altera_avalon_uart_txirq+0x110>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
    cba0:	e0bffe17 	ldw	r2,-8(fp)
    cba4:	10c00417 	ldw	r3,16(r2)
    cba8:	e0bffe17 	ldw	r2,-8(fp)
    cbac:	10800517 	ldw	r2,20(r2)
    cbb0:	10800044 	addi	r2,r2,1
    cbb4:	10800fcc 	andi	r2,r2,63
    cbb8:	1880121e 	bne	r3,r2,cc04 <altera_avalon_uart_txirq+0xac>
      { 
        ALT_FLAG_POST (sp->events, 
    cbbc:	e0bffe17 	ldw	r2,-8(fp)
    cbc0:	10800717 	ldw	r2,28(r2)
    cbc4:	e0bffc15 	stw	r2,-16(fp)
    cbc8:	00800084 	movi	r2,2
    cbcc:	e0bffd0d 	sth	r2,-12(fp)
    cbd0:	00800044 	movi	r2,1
    cbd4:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    cbd8:	d0a73b43 	ldbu	r2,-25363(gp)
    cbdc:	10803fcc 	andi	r2,r2,255
    cbe0:	10000826 	beq	r2,zero,cc04 <altera_avalon_uart_txirq+0xac>
  {
    OSFlagPost (group, flags, opt, &err);
    cbe4:	e0bffd0b 	ldhu	r2,-12(fp)
    cbe8:	e0fffd83 	ldbu	r3,-10(fp)
    cbec:	e13ffdc4 	addi	r4,fp,-9
    cbf0:	200f883a 	mov	r7,r4
    cbf4:	180d883a 	mov	r6,r3
    cbf8:	100b883a 	mov	r5,r2
    cbfc:	e13ffc17 	ldw	r4,-16(fp)
    cc00:	00070c80 	call	70c8 <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    cc04:	e0bffe17 	ldw	r2,-8(fp)
    cc08:	10800017 	ldw	r2,0(r2)
    cc0c:	10800104 	addi	r2,r2,4
    cc10:	e0fffe17 	ldw	r3,-8(fp)
    cc14:	18c00417 	ldw	r3,16(r3)
    cc18:	e13ffe17 	ldw	r4,-8(fp)
    cc1c:	20c7883a 	add	r3,r4,r3
    cc20:	18c01a04 	addi	r3,r3,104
    cc24:	18c00003 	ldbu	r3,0(r3)
    cc28:	18c03fcc 	andi	r3,r3,255
    cc2c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
    cc30:	e0bffe17 	ldw	r2,-8(fp)
    cc34:	10800417 	ldw	r2,16(r2)
    cc38:	10800044 	addi	r2,r2,1
    cc3c:	e0fffe17 	ldw	r3,-8(fp)
    cc40:	18800415 	stw	r2,16(r3)
    cc44:	10c00fcc 	andi	r3,r2,63
    cc48:	e0bffe17 	ldw	r2,-8(fp)
    cc4c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    cc50:	e0bffe17 	ldw	r2,-8(fp)
    cc54:	10800117 	ldw	r2,4(r2)
    cc58:	10c01014 	ori	r3,r2,64
    cc5c:	e0bffe17 	ldw	r2,-8(fp)
    cc60:	10c00115 	stw	r3,4(r2)
    cc64:	00000e06 	br	cca0 <altera_avalon_uart_txirq+0x148>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
    cc68:	e0bffe17 	ldw	r2,-8(fp)
    cc6c:	10800017 	ldw	r2,0(r2)
    cc70:	10800204 	addi	r2,r2,8
    cc74:	10800037 	ldwio	r2,0(r2)
    cc78:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    cc7c:	e0bfff17 	ldw	r2,-4(fp)
    cc80:	1082000c 	andi	r2,r2,2048
    cc84:	1000061e 	bne	r2,zero,cca0 <altera_avalon_uart_txirq+0x148>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    cc88:	e0bffe17 	ldw	r2,-8(fp)
    cc8c:	10c00117 	ldw	r3,4(r2)
    cc90:	00bfefc4 	movi	r2,-65
    cc94:	1886703a 	and	r3,r3,r2
    cc98:	e0bffe17 	ldw	r2,-8(fp)
    cc9c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    cca0:	e0bffe17 	ldw	r2,-8(fp)
    cca4:	10c00417 	ldw	r3,16(r2)
    cca8:	e0bffe17 	ldw	r2,-8(fp)
    ccac:	10800517 	ldw	r2,20(r2)
    ccb0:	1880061e 	bne	r3,r2,cccc <altera_avalon_uart_txirq+0x174>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    ccb4:	e0bffe17 	ldw	r2,-8(fp)
    ccb8:	10c00117 	ldw	r3,4(r2)
    ccbc:	00beefc4 	movi	r2,-1089
    ccc0:	1886703a 	and	r3,r3,r2
    ccc4:	e0bffe17 	ldw	r2,-8(fp)
    ccc8:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    cccc:	e0bffe17 	ldw	r2,-8(fp)
    ccd0:	10800017 	ldw	r2,0(r2)
    ccd4:	10800304 	addi	r2,r2,12
    ccd8:	e0fffe17 	ldw	r3,-8(fp)
    ccdc:	18c00117 	ldw	r3,4(r3)
    cce0:	10c00035 	stwio	r3,0(r2)
}
    cce4:	0001883a 	nop
    cce8:	e037883a 	mov	sp,fp
    ccec:	dfc00117 	ldw	ra,4(sp)
    ccf0:	df000017 	ldw	fp,0(sp)
    ccf4:	dec00204 	addi	sp,sp,8
    ccf8:	f800283a 	ret

0000ccfc <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
    ccfc:	defffd04 	addi	sp,sp,-12
    cd00:	df000215 	stw	fp,8(sp)
    cd04:	df000204 	addi	fp,sp,8
    cd08:	e13ffe15 	stw	r4,-8(fp)
    cd0c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    cd10:	00000506 	br	cd28 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    cd14:	e0bfff17 	ldw	r2,-4(fp)
    cd18:	1090000c 	andi	r2,r2,16384
    cd1c:	10000226 	beq	r2,zero,cd28 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
    cd20:	00bffd44 	movi	r2,-11
    cd24:	00000606 	br	cd40 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    cd28:	e0bffe17 	ldw	r2,-8(fp)
    cd2c:	10c00417 	ldw	r3,16(r2)
    cd30:	e0bffe17 	ldw	r2,-8(fp)
    cd34:	10800517 	ldw	r2,20(r2)
    cd38:	18bff61e 	bne	r3,r2,cd14 <__alt_mem_onchip_memory2_0+0xfc008d14>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    cd3c:	0005883a 	mov	r2,zero
}
    cd40:	e037883a 	mov	sp,fp
    cd44:	df000017 	ldw	fp,0(sp)
    cd48:	dec00104 	addi	sp,sp,4
    cd4c:	f800283a 	ret

0000cd50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cd50:	defffe04 	addi	sp,sp,-8
    cd54:	dfc00115 	stw	ra,4(sp)
    cd58:	df000015 	stw	fp,0(sp)
    cd5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cd60:	d0a01017 	ldw	r2,-32704(gp)
    cd64:	10000326 	beq	r2,zero,cd74 <alt_get_errno+0x24>
    cd68:	d0a01017 	ldw	r2,-32704(gp)
    cd6c:	103ee83a 	callr	r2
    cd70:	00000106 	br	cd78 <alt_get_errno+0x28>
    cd74:	d0a73204 	addi	r2,gp,-25400
}
    cd78:	e037883a 	mov	sp,fp
    cd7c:	dfc00117 	ldw	ra,4(sp)
    cd80:	df000017 	ldw	fp,0(sp)
    cd84:	dec00204 	addi	sp,sp,8
    cd88:	f800283a 	ret

0000cd8c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    cd8c:	deffec04 	addi	sp,sp,-80
    cd90:	dfc01315 	stw	ra,76(sp)
    cd94:	df001215 	stw	fp,72(sp)
    cd98:	df001204 	addi	fp,sp,72
    cd9c:	e13ffc15 	stw	r4,-16(fp)
    cda0:	e17ffd15 	stw	r5,-12(fp)
    cda4:	e1bffe15 	stw	r6,-8(fp)
    cda8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
    cdac:	e03fef05 	stb	zero,-68(fp)
  int             count = 0;
    cdb0:	e03ff015 	stw	zero,-64(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
    cdb4:	e0bfff17 	ldw	r2,-4(fp)
    cdb8:	1090000c 	andi	r2,r2,16384
    cdbc:	1005003a 	cmpeq	r2,r2,zero
    cdc0:	10803fcc 	andi	r2,r2,255
    cdc4:	e0bff115 	stw	r2,-60(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
    cdc8:	e0bffc17 	ldw	r2,-16(fp)
    cdcc:	10800817 	ldw	r2,32(r2)
    cdd0:	e0bff815 	stw	r2,-32(fp)
    cdd4:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
    cdd8:	e0bff90b 	ldhu	r2,-28(fp)
    cddc:	e0fffb44 	addi	r3,fp,-19
    cde0:	180d883a 	mov	r6,r3
    cde4:	100b883a 	mov	r5,r2
    cde8:	e13ff817 	ldw	r4,-32(fp)
    cdec:	00095180 	call	9518 <OSSemPend>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    cdf0:	00001306 	br	ce40 <altera_avalon_uart_read+0xb4>
    {
      count++;
    cdf4:	e0bff017 	ldw	r2,-64(fp)
    cdf8:	10800044 	addi	r2,r2,1
    cdfc:	e0bff015 	stw	r2,-64(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
    ce00:	e0bffd17 	ldw	r2,-12(fp)
    ce04:	10c00044 	addi	r3,r2,1
    ce08:	e0fffd15 	stw	r3,-12(fp)
    ce0c:	e0fffc17 	ldw	r3,-16(fp)
    ce10:	18c00217 	ldw	r3,8(r3)
    ce14:	e13ffc17 	ldw	r4,-16(fp)
    ce18:	20c7883a 	add	r3,r4,r3
    ce1c:	18c00a04 	addi	r3,r3,40
    ce20:	18c00003 	ldbu	r3,0(r3)
    ce24:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
    ce28:	e0bffc17 	ldw	r2,-16(fp)
    ce2c:	10800217 	ldw	r2,8(r2)
    ce30:	10800044 	addi	r2,r2,1
    ce34:	10c00fcc 	andi	r3,r2,63
    ce38:	e0bffc17 	ldw	r2,-16(fp)
    ce3c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    ce40:	e0fff017 	ldw	r3,-64(fp)
    ce44:	e0bffe17 	ldw	r2,-8(fp)
    ce48:	1880050e 	bge	r3,r2,ce60 <altera_avalon_uart_read+0xd4>
    ce4c:	e0bffc17 	ldw	r2,-16(fp)
    ce50:	10c00217 	ldw	r3,8(r2)
    ce54:	e0bffc17 	ldw	r2,-16(fp)
    ce58:	10800317 	ldw	r2,12(r2)
    ce5c:	18bfe51e 	bne	r3,r2,cdf4 <__alt_mem_onchip_memory2_0+0xfc008df4>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    ce60:	e0bff017 	ldw	r2,-64(fp)
    ce64:	10003a1e 	bne	r2,zero,cf50 <altera_avalon_uart_read+0x1c4>
    ce68:	e0bffc17 	ldw	r2,-16(fp)
    ce6c:	10c00217 	ldw	r3,8(r2)
    ce70:	e0bffc17 	ldw	r2,-16(fp)
    ce74:	10800317 	ldw	r2,12(r2)
    ce78:	1880351e 	bne	r3,r2,cf50 <altera_avalon_uart_read+0x1c4>
    {
      if (!block)
    ce7c:	e0bff117 	ldw	r2,-60(fp)
    ce80:	1000071e 	bne	r2,zero,cea0 <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
    ce84:	000cd500 	call	cd50 <alt_get_errno>
    ce88:	1007883a 	mov	r3,r2
    ce8c:	008002c4 	movi	r2,11
    ce90:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
    ce94:	00800044 	movi	r2,1
    ce98:	e0bfef05 	stb	r2,-68(fp)
        break;
    ce9c:	00003006 	br	cf60 <altera_avalon_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cea0:	0005303a 	rdctl	r2,status
    cea4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cea8:	e0fff517 	ldw	r3,-44(fp)
    ceac:	00bfff84 	movi	r2,-2
    ceb0:	1884703a 	and	r2,r3,r2
    ceb4:	1001703a 	wrctl	status,r2
  
  return context;
    ceb8:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
    cebc:	e0bff415 	stw	r2,-48(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    cec0:	e0bffc17 	ldw	r2,-16(fp)
    cec4:	10800117 	ldw	r2,4(r2)
    cec8:	10c02014 	ori	r3,r2,128
    cecc:	e0bffc17 	ldw	r2,-16(fp)
    ced0:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    ced4:	e0bffc17 	ldw	r2,-16(fp)
    ced8:	10800017 	ldw	r2,0(r2)
    cedc:	10800304 	addi	r2,r2,12
    cee0:	e0fffc17 	ldw	r3,-16(fp)
    cee4:	18c00117 	ldw	r3,4(r3)
    cee8:	10c00035 	stwio	r3,0(r2)
    ceec:	e0bff417 	ldw	r2,-48(fp)
    cef0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cef4:	e0bff617 	ldw	r2,-40(fp)
    cef8:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
    cefc:	e0bffc17 	ldw	r2,-16(fp)
    cf00:	10800717 	ldw	r2,28(r2)
    cf04:	e0bff215 	stw	r2,-56(fp)
    cf08:	00800044 	movi	r2,1
    cf0c:	e0bff98d 	sth	r2,-26(fp)
    cf10:	00bfe0c4 	movi	r2,-125
    cf14:	e0bffa05 	stb	r2,-24(fp)
    cf18:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    cf1c:	d0a73b43 	ldbu	r2,-25363(gp)
    cf20:	10803fcc 	andi	r2,r2,255
    cf24:	10000a26 	beq	r2,zero,cf50 <altera_avalon_uart_read+0x1c4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    cf28:	e0fff98b 	ldhu	r3,-26(fp)
    cf2c:	e13ffa03 	ldbu	r4,-24(fp)
    cf30:	e17ffa8b 	ldhu	r5,-22(fp)
    cf34:	e0bffb04 	addi	r2,fp,-20
    cf38:	d8800015 	stw	r2,0(sp)
    cf3c:	280f883a 	mov	r7,r5
    cf40:	200d883a 	mov	r6,r4
    cf44:	180b883a 	mov	r5,r3
    cf48:	e13ff217 	ldw	r4,-56(fp)
    cf4c:	0006ab00 	call	6ab0 <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
    cf50:	e0bff017 	ldw	r2,-64(fp)
    cf54:	1000021e 	bne	r2,zero,cf60 <altera_avalon_uart_read+0x1d4>
    cf58:	e0bffe17 	ldw	r2,-8(fp)
    cf5c:	103fb81e 	bne	r2,zero,ce40 <__alt_mem_onchip_memory2_0+0xfc008e40>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
    cf60:	e0bffc17 	ldw	r2,-16(fp)
    cf64:	10800817 	ldw	r2,32(r2)
    cf68:	1009883a 	mov	r4,r2
    cf6c:	00098900 	call	9890 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cf70:	0005303a 	rdctl	r2,status
    cf74:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cf78:	e0fff717 	ldw	r3,-36(fp)
    cf7c:	00bfff84 	movi	r2,-2
    cf80:	1884703a 	and	r2,r3,r2
    cf84:	1001703a 	wrctl	status,r2
  
  return context;
    cf88:	e0bff717 	ldw	r2,-36(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
    cf8c:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    cf90:	e0bffc17 	ldw	r2,-16(fp)
    cf94:	10800117 	ldw	r2,4(r2)
    cf98:	10c02014 	ori	r3,r2,128
    cf9c:	e0bffc17 	ldw	r2,-16(fp)
    cfa0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    cfa4:	e0bffc17 	ldw	r2,-16(fp)
    cfa8:	10800017 	ldw	r2,0(r2)
    cfac:	10800304 	addi	r2,r2,12
    cfb0:	e0fffc17 	ldw	r3,-16(fp)
    cfb4:	18c00117 	ldw	r3,4(r3)
    cfb8:	10c00035 	stwio	r3,0(r2)
    cfbc:	e0bff417 	ldw	r2,-48(fp)
    cfc0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cfc4:	e0bff317 	ldw	r2,-52(fp)
    cfc8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
    cfcc:	e0bfef03 	ldbu	r2,-68(fp)
    cfd0:	10000226 	beq	r2,zero,cfdc <altera_avalon_uart_read+0x250>
    return -EWOULDBLOCK;
    cfd4:	00bffd44 	movi	r2,-11
    cfd8:	00000106 	br	cfe0 <altera_avalon_uart_read+0x254>
  }
  else {
    return count;
    cfdc:	e0bff017 	ldw	r2,-64(fp)
  }
}
    cfe0:	e037883a 	mov	sp,fp
    cfe4:	dfc00117 	ldw	ra,4(sp)
    cfe8:	df000017 	ldw	fp,0(sp)
    cfec:	dec00204 	addi	sp,sp,8
    cff0:	f800283a 	ret

0000cff4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cff4:	defffe04 	addi	sp,sp,-8
    cff8:	dfc00115 	stw	ra,4(sp)
    cffc:	df000015 	stw	fp,0(sp)
    d000:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d004:	d0a01017 	ldw	r2,-32704(gp)
    d008:	10000326 	beq	r2,zero,d018 <alt_get_errno+0x24>
    d00c:	d0a01017 	ldw	r2,-32704(gp)
    d010:	103ee83a 	callr	r2
    d014:	00000106 	br	d01c <alt_get_errno+0x28>
    d018:	d0a73204 	addi	r2,gp,-25400
}
    d01c:	e037883a 	mov	sp,fp
    d020:	dfc00117 	ldw	ra,4(sp)
    d024:	df000017 	ldw	fp,0(sp)
    d028:	dec00204 	addi	sp,sp,8
    d02c:	f800283a 	ret

0000d030 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    d030:	deffec04 	addi	sp,sp,-80
    d034:	dfc01315 	stw	ra,76(sp)
    d038:	df001215 	stw	fp,72(sp)
    d03c:	df001204 	addi	fp,sp,72
    d040:	e13ffc15 	stw	r4,-16(fp)
    d044:	e17ffd15 	stw	r5,-12(fp)
    d048:	e1bffe15 	stw	r6,-8(fp)
    d04c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
    d050:	e0bffe17 	ldw	r2,-8(fp)
    d054:	e0bfef15 	stw	r2,-68(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
    d058:	e0bfff17 	ldw	r2,-4(fp)
    d05c:	1090000c 	andi	r2,r2,16384
    d060:	e0bff015 	stw	r2,-64(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
    d064:	e0bffc17 	ldw	r2,-16(fp)
    d068:	10800917 	ldw	r2,36(r2)
    d06c:	e0bff815 	stw	r2,-32(fp)
    d070:	e03ff90d 	sth	zero,-28(fp)
    d074:	e0bff90b 	ldhu	r2,-28(fp)
    d078:	e0fffb44 	addi	r3,fp,-19
    d07c:	180d883a 	mov	r6,r3
    d080:	100b883a 	mov	r5,r2
    d084:	e13ff817 	ldw	r4,-32(fp)
    d088:	00095180 	call	9518 <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    d08c:	00005106 	br	d1d4 <altera_avalon_uart_write+0x1a4>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    d090:	e0bffc17 	ldw	r2,-16(fp)
    d094:	10800517 	ldw	r2,20(r2)
    d098:	10800044 	addi	r2,r2,1
    d09c:	10800fcc 	andi	r2,r2,63
    d0a0:	e0bff215 	stw	r2,-56(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
    d0a4:	e0bffc17 	ldw	r2,-16(fp)
    d0a8:	10c00417 	ldw	r3,16(r2)
    d0ac:	e0bff217 	ldw	r2,-56(fp)
    d0b0:	1880371e 	bne	r3,r2,d190 <altera_avalon_uart_write+0x160>
    {
      if (no_block)
    d0b4:	e0bff017 	ldw	r2,-64(fp)
    d0b8:	10000526 	beq	r2,zero,d0d0 <altera_avalon_uart_write+0xa0>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
    d0bc:	000cff40 	call	cff4 <alt_get_errno>
    d0c0:	1007883a 	mov	r3,r2
    d0c4:	008002c4 	movi	r2,11
    d0c8:	18800015 	stw	r2,0(r3)
        break;
    d0cc:	00004306 	br	d1dc <altera_avalon_uart_write+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d0d0:	0005303a 	rdctl	r2,status
    d0d4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d0d8:	e0fff517 	ldw	r3,-44(fp)
    d0dc:	00bfff84 	movi	r2,-2
    d0e0:	1884703a 	and	r2,r3,r2
    d0e4:	1001703a 	wrctl	status,r2
  
  return context;
    d0e8:	e0bff517 	ldw	r2,-44(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
    d0ec:	e0bff415 	stw	r2,-48(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    d0f0:	e0bffc17 	ldw	r2,-16(fp)
    d0f4:	10800117 	ldw	r2,4(r2)
    d0f8:	10c11014 	ori	r3,r2,1088
    d0fc:	e0bffc17 	ldw	r2,-16(fp)
    d100:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    d104:	e0bffc17 	ldw	r2,-16(fp)
    d108:	10800017 	ldw	r2,0(r2)
    d10c:	10800304 	addi	r2,r2,12
    d110:	e0fffc17 	ldw	r3,-16(fp)
    d114:	18c00117 	ldw	r3,4(r3)
    d118:	10c00035 	stwio	r3,0(r2)
    d11c:	e0bff417 	ldw	r2,-48(fp)
    d120:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d124:	e0bff117 	ldw	r2,-60(fp)
    d128:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
    d12c:	e0bffc17 	ldw	r2,-16(fp)
    d130:	10800717 	ldw	r2,28(r2)
    d134:	e0bff315 	stw	r2,-52(fp)
    d138:	00800084 	movi	r2,2
    d13c:	e0bff98d 	sth	r2,-26(fp)
    d140:	00bfe0c4 	movi	r2,-125
    d144:	e0bffa05 	stb	r2,-24(fp)
    d148:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    d14c:	d0a73b43 	ldbu	r2,-25363(gp)
    d150:	10803fcc 	andi	r2,r2,255
    d154:	10000a26 	beq	r2,zero,d180 <altera_avalon_uart_write+0x150>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    d158:	e0fff98b 	ldhu	r3,-26(fp)
    d15c:	e13ffa03 	ldbu	r4,-24(fp)
    d160:	e17ffa8b 	ldhu	r5,-22(fp)
    d164:	e0bffb04 	addi	r2,fp,-20
    d168:	d8800015 	stw	r2,0(sp)
    d16c:	280f883a 	mov	r7,r5
    d170:	200d883a 	mov	r6,r4
    d174:	180b883a 	mov	r5,r3
    d178:	e13ff317 	ldw	r4,-52(fp)
    d17c:	0006ab00 	call	6ab0 <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
    d180:	e0bffc17 	ldw	r2,-16(fp)
    d184:	10c00417 	ldw	r3,16(r2)
    d188:	e0bff217 	ldw	r2,-56(fp)
    d18c:	18bfe726 	beq	r3,r2,d12c <__alt_mem_onchip_memory2_0+0xfc00912c>
      }
    }

    count--;
    d190:	e0bfef17 	ldw	r2,-68(fp)
    d194:	10bfffc4 	addi	r2,r2,-1
    d198:	e0bfef15 	stw	r2,-68(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    d19c:	e0bffc17 	ldw	r2,-16(fp)
    d1a0:	10c00517 	ldw	r3,20(r2)
    d1a4:	e0bffd17 	ldw	r2,-12(fp)
    d1a8:	11000044 	addi	r4,r2,1
    d1ac:	e13ffd15 	stw	r4,-12(fp)
    d1b0:	10800003 	ldbu	r2,0(r2)
    d1b4:	1009883a 	mov	r4,r2
    d1b8:	e0bffc17 	ldw	r2,-16(fp)
    d1bc:	10c5883a 	add	r2,r2,r3
    d1c0:	10801a04 	addi	r2,r2,104
    d1c4:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
    d1c8:	e0bffc17 	ldw	r2,-16(fp)
    d1cc:	e0fff217 	ldw	r3,-56(fp)
    d1d0:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    d1d4:	e0bfef17 	ldw	r2,-68(fp)
    d1d8:	103fad1e 	bne	r2,zero,d090 <__alt_mem_onchip_memory2_0+0xfc009090>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
    d1dc:	e0bffc17 	ldw	r2,-16(fp)
    d1e0:	10800917 	ldw	r2,36(r2)
    d1e4:	1009883a 	mov	r4,r2
    d1e8:	00098900 	call	9890 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d1ec:	0005303a 	rdctl	r2,status
    d1f0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d1f4:	e0fff717 	ldw	r3,-36(fp)
    d1f8:	00bfff84 	movi	r2,-2
    d1fc:	1884703a 	and	r2,r3,r2
    d200:	1001703a 	wrctl	status,r2
  
  return context;
    d204:	e0bff717 	ldw	r2,-36(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
    d208:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    d20c:	e0bffc17 	ldw	r2,-16(fp)
    d210:	10800117 	ldw	r2,4(r2)
    d214:	10c11014 	ori	r3,r2,1088
    d218:	e0bffc17 	ldw	r2,-16(fp)
    d21c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    d220:	e0bffc17 	ldw	r2,-16(fp)
    d224:	10800017 	ldw	r2,0(r2)
    d228:	10800304 	addi	r2,r2,12
    d22c:	e0fffc17 	ldw	r3,-16(fp)
    d230:	18c00117 	ldw	r3,4(r3)
    d234:	10c00035 	stwio	r3,0(r2)
    d238:	e0bff417 	ldw	r2,-48(fp)
    d23c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d240:	e0bff617 	ldw	r2,-40(fp)
    d244:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
    d248:	e0fffe17 	ldw	r3,-8(fp)
    d24c:	e0bfef17 	ldw	r2,-68(fp)
    d250:	1885c83a 	sub	r2,r3,r2
}
    d254:	e037883a 	mov	sp,fp
    d258:	dfc00117 	ldw	ra,4(sp)
    d25c:	df000017 	ldw	fp,0(sp)
    d260:	dec00204 	addi	sp,sp,8
    d264:	f800283a 	ret

0000d268 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    d268:	defff504 	addi	sp,sp,-44
    d26c:	df000a15 	stw	fp,40(sp)
    d270:	df000a04 	addi	fp,sp,40
    d274:	e13ffc15 	stw	r4,-16(fp)
    d278:	e17ffd15 	stw	r5,-12(fp)
    d27c:	e1bffe15 	stw	r6,-8(fp)
    d280:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    d284:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    d288:	d0a75017 	ldw	r2,-25280(gp)
  
  if (alt_ticks_per_second ())
    d28c:	10003c26 	beq	r2,zero,d380 <alt_alarm_start+0x118>
  {
    if (alarm)
    d290:	e0bffc17 	ldw	r2,-16(fp)
    d294:	10003826 	beq	r2,zero,d378 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    d298:	e0bffc17 	ldw	r2,-16(fp)
    d29c:	e0fffe17 	ldw	r3,-8(fp)
    d2a0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    d2a4:	e0bffc17 	ldw	r2,-16(fp)
    d2a8:	e0ffff17 	ldw	r3,-4(fp)
    d2ac:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d2b0:	0005303a 	rdctl	r2,status
    d2b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d2b8:	e0fff917 	ldw	r3,-28(fp)
    d2bc:	00bfff84 	movi	r2,-2
    d2c0:	1884703a 	and	r2,r3,r2
    d2c4:	1001703a 	wrctl	status,r2
  
  return context;
    d2c8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    d2cc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    d2d0:	d0a75117 	ldw	r2,-25276(gp)
      
      current_nticks = alt_nticks();
    d2d4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    d2d8:	e0fffd17 	ldw	r3,-12(fp)
    d2dc:	e0bff617 	ldw	r2,-40(fp)
    d2e0:	1885883a 	add	r2,r3,r2
    d2e4:	10c00044 	addi	r3,r2,1
    d2e8:	e0bffc17 	ldw	r2,-16(fp)
    d2ec:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    d2f0:	e0bffc17 	ldw	r2,-16(fp)
    d2f4:	10c00217 	ldw	r3,8(r2)
    d2f8:	e0bff617 	ldw	r2,-40(fp)
    d2fc:	1880042e 	bgeu	r3,r2,d310 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    d300:	e0bffc17 	ldw	r2,-16(fp)
    d304:	00c00044 	movi	r3,1
    d308:	10c00405 	stb	r3,16(r2)
    d30c:	00000206 	br	d318 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    d310:	e0bffc17 	ldw	r2,-16(fp)
    d314:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    d318:	e0bffc17 	ldw	r2,-16(fp)
    d31c:	d0e03204 	addi	r3,gp,-32568
    d320:	e0fffa15 	stw	r3,-24(fp)
    d324:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    d328:	e0bffb17 	ldw	r2,-20(fp)
    d32c:	e0fffa17 	ldw	r3,-24(fp)
    d330:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    d334:	e0bffa17 	ldw	r2,-24(fp)
    d338:	10c00017 	ldw	r3,0(r2)
    d33c:	e0bffb17 	ldw	r2,-20(fp)
    d340:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    d344:	e0bffa17 	ldw	r2,-24(fp)
    d348:	10800017 	ldw	r2,0(r2)
    d34c:	e0fffb17 	ldw	r3,-20(fp)
    d350:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    d354:	e0bffa17 	ldw	r2,-24(fp)
    d358:	e0fffb17 	ldw	r3,-20(fp)
    d35c:	10c00015 	stw	r3,0(r2)
    d360:	e0bff817 	ldw	r2,-32(fp)
    d364:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d368:	e0bff717 	ldw	r2,-36(fp)
    d36c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    d370:	0005883a 	mov	r2,zero
    d374:	00000306 	br	d384 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    d378:	00bffa84 	movi	r2,-22
    d37c:	00000106 	br	d384 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    d380:	00bfde84 	movi	r2,-134
  }
}
    d384:	e037883a 	mov	sp,fp
    d388:	df000017 	ldw	fp,0(sp)
    d38c:	dec00104 	addi	sp,sp,4
    d390:	f800283a 	ret

0000d394 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    d394:	defffe04 	addi	sp,sp,-8
    d398:	df000115 	stw	fp,4(sp)
    d39c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    d3a0:	e03fff15 	stw	zero,-4(fp)
    d3a4:	00000506 	br	d3bc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    d3a8:	e0bfff17 	ldw	r2,-4(fp)
    d3ac:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    d3b0:	e0bfff17 	ldw	r2,-4(fp)
    d3b4:	10800804 	addi	r2,r2,32
    d3b8:	e0bfff15 	stw	r2,-4(fp)
    d3bc:	e0bfff17 	ldw	r2,-4(fp)
    d3c0:	10820030 	cmpltui	r2,r2,2048
    d3c4:	103ff81e 	bne	r2,zero,d3a8 <__alt_mem_onchip_memory2_0+0xfc0093a8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    d3c8:	0001883a 	nop
    d3cc:	e037883a 	mov	sp,fp
    d3d0:	df000017 	ldw	fp,0(sp)
    d3d4:	dec00104 	addi	sp,sp,4
    d3d8:	f800283a 	ret

0000d3dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d3dc:	defffe04 	addi	sp,sp,-8
    d3e0:	dfc00115 	stw	ra,4(sp)
    d3e4:	df000015 	stw	fp,0(sp)
    d3e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d3ec:	d0a01017 	ldw	r2,-32704(gp)
    d3f0:	10000326 	beq	r2,zero,d400 <alt_get_errno+0x24>
    d3f4:	d0a01017 	ldw	r2,-32704(gp)
    d3f8:	103ee83a 	callr	r2
    d3fc:	00000106 	br	d404 <alt_get_errno+0x28>
    d400:	d0a73204 	addi	r2,gp,-25400
}
    d404:	e037883a 	mov	sp,fp
    d408:	dfc00117 	ldw	ra,4(sp)
    d40c:	df000017 	ldw	fp,0(sp)
    d410:	dec00204 	addi	sp,sp,8
    d414:	f800283a 	ret

0000d418 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    d418:	defffa04 	addi	sp,sp,-24
    d41c:	dfc00515 	stw	ra,20(sp)
    d420:	df000415 	stw	fp,16(sp)
    d424:	df000404 	addi	fp,sp,16
    d428:	e13ffe15 	stw	r4,-8(fp)
    d42c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    d430:	e0bffe17 	ldw	r2,-8(fp)
    d434:	10000326 	beq	r2,zero,d444 <alt_dev_llist_insert+0x2c>
    d438:	e0bffe17 	ldw	r2,-8(fp)
    d43c:	10800217 	ldw	r2,8(r2)
    d440:	1000061e 	bne	r2,zero,d45c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    d444:	000d3dc0 	call	d3dc <alt_get_errno>
    d448:	1007883a 	mov	r3,r2
    d44c:	00800584 	movi	r2,22
    d450:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    d454:	00bffa84 	movi	r2,-22
    d458:	00001306 	br	d4a8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    d45c:	e0bffe17 	ldw	r2,-8(fp)
    d460:	e0ffff17 	ldw	r3,-4(fp)
    d464:	e0fffc15 	stw	r3,-16(fp)
    d468:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    d46c:	e0bffd17 	ldw	r2,-12(fp)
    d470:	e0fffc17 	ldw	r3,-16(fp)
    d474:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    d478:	e0bffc17 	ldw	r2,-16(fp)
    d47c:	10c00017 	ldw	r3,0(r2)
    d480:	e0bffd17 	ldw	r2,-12(fp)
    d484:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    d488:	e0bffc17 	ldw	r2,-16(fp)
    d48c:	10800017 	ldw	r2,0(r2)
    d490:	e0fffd17 	ldw	r3,-12(fp)
    d494:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    d498:	e0bffc17 	ldw	r2,-16(fp)
    d49c:	e0fffd17 	ldw	r3,-12(fp)
    d4a0:	10c00015 	stw	r3,0(r2)

  return 0;  
    d4a4:	0005883a 	mov	r2,zero
}
    d4a8:	e037883a 	mov	sp,fp
    d4ac:	dfc00117 	ldw	ra,4(sp)
    d4b0:	df000017 	ldw	fp,0(sp)
    d4b4:	dec00204 	addi	sp,sp,8
    d4b8:	f800283a 	ret

0000d4bc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    d4bc:	defffd04 	addi	sp,sp,-12
    d4c0:	dfc00215 	stw	ra,8(sp)
    d4c4:	df000115 	stw	fp,4(sp)
    d4c8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    d4cc:	00800074 	movhi	r2,1
    d4d0:	10baea04 	addi	r2,r2,-5208
    d4d4:	e0bfff15 	stw	r2,-4(fp)
    d4d8:	00000606 	br	d4f4 <_do_ctors+0x38>
        (*ctor) (); 
    d4dc:	e0bfff17 	ldw	r2,-4(fp)
    d4e0:	10800017 	ldw	r2,0(r2)
    d4e4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    d4e8:	e0bfff17 	ldw	r2,-4(fp)
    d4ec:	10bfff04 	addi	r2,r2,-4
    d4f0:	e0bfff15 	stw	r2,-4(fp)
    d4f4:	e0ffff17 	ldw	r3,-4(fp)
    d4f8:	00800074 	movhi	r2,1
    d4fc:	10baeb04 	addi	r2,r2,-5204
    d500:	18bff62e 	bgeu	r3,r2,d4dc <__alt_mem_onchip_memory2_0+0xfc0094dc>
        (*ctor) (); 
}
    d504:	0001883a 	nop
    d508:	e037883a 	mov	sp,fp
    d50c:	dfc00117 	ldw	ra,4(sp)
    d510:	df000017 	ldw	fp,0(sp)
    d514:	dec00204 	addi	sp,sp,8
    d518:	f800283a 	ret

0000d51c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    d51c:	defffd04 	addi	sp,sp,-12
    d520:	dfc00215 	stw	ra,8(sp)
    d524:	df000115 	stw	fp,4(sp)
    d528:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    d52c:	00800074 	movhi	r2,1
    d530:	10baea04 	addi	r2,r2,-5208
    d534:	e0bfff15 	stw	r2,-4(fp)
    d538:	00000606 	br	d554 <_do_dtors+0x38>
        (*dtor) (); 
    d53c:	e0bfff17 	ldw	r2,-4(fp)
    d540:	10800017 	ldw	r2,0(r2)
    d544:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    d548:	e0bfff17 	ldw	r2,-4(fp)
    d54c:	10bfff04 	addi	r2,r2,-4
    d550:	e0bfff15 	stw	r2,-4(fp)
    d554:	e0ffff17 	ldw	r3,-4(fp)
    d558:	00800074 	movhi	r2,1
    d55c:	10baeb04 	addi	r2,r2,-5204
    d560:	18bff62e 	bgeu	r3,r2,d53c <__alt_mem_onchip_memory2_0+0xfc00953c>
        (*dtor) (); 
}
    d564:	0001883a 	nop
    d568:	e037883a 	mov	sp,fp
    d56c:	dfc00117 	ldw	ra,4(sp)
    d570:	df000017 	ldw	fp,0(sp)
    d574:	dec00204 	addi	sp,sp,8
    d578:	f800283a 	ret

0000d57c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    d57c:	defffe04 	addi	sp,sp,-8
    d580:	dfc00115 	stw	ra,4(sp)
    d584:	df000015 	stw	fp,0(sp)
    d588:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    d58c:	01440004 	movi	r5,4096
    d590:	0009883a 	mov	r4,zero
    d594:	000e3780 	call	e378 <alt_icache_flush>
#endif
}
    d598:	0001883a 	nop
    d59c:	e037883a 	mov	sp,fp
    d5a0:	dfc00117 	ldw	ra,4(sp)
    d5a4:	df000017 	ldw	fp,0(sp)
    d5a8:	dec00204 	addi	sp,sp,8
    d5ac:	f800283a 	ret

0000d5b0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d5b0:	defff904 	addi	sp,sp,-28
    d5b4:	dfc00615 	stw	ra,24(sp)
    d5b8:	df000515 	stw	fp,20(sp)
    d5bc:	df000504 	addi	fp,sp,20
    d5c0:	e13ffc15 	stw	r4,-16(fp)
    d5c4:	e17ffd15 	stw	r5,-12(fp)
    d5c8:	e1bffe15 	stw	r6,-8(fp)
    d5cc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    d5d0:	e0800217 	ldw	r2,8(fp)
    d5d4:	d8800015 	stw	r2,0(sp)
    d5d8:	e1ffff17 	ldw	r7,-4(fp)
    d5dc:	e1bffe17 	ldw	r6,-8(fp)
    d5e0:	e17ffd17 	ldw	r5,-12(fp)
    d5e4:	e13ffc17 	ldw	r4,-16(fp)
    d5e8:	000d7600 	call	d760 <alt_iic_isr_register>
}  
    d5ec:	e037883a 	mov	sp,fp
    d5f0:	dfc00117 	ldw	ra,4(sp)
    d5f4:	df000017 	ldw	fp,0(sp)
    d5f8:	dec00204 	addi	sp,sp,8
    d5fc:	f800283a 	ret

0000d600 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    d600:	defff904 	addi	sp,sp,-28
    d604:	df000615 	stw	fp,24(sp)
    d608:	df000604 	addi	fp,sp,24
    d60c:	e13ffe15 	stw	r4,-8(fp)
    d610:	e17fff15 	stw	r5,-4(fp)
    d614:	e0bfff17 	ldw	r2,-4(fp)
    d618:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d61c:	0005303a 	rdctl	r2,status
    d620:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d624:	e0fffb17 	ldw	r3,-20(fp)
    d628:	00bfff84 	movi	r2,-2
    d62c:	1884703a 	and	r2,r3,r2
    d630:	1001703a 	wrctl	status,r2
  
  return context;
    d634:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d638:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    d63c:	00c00044 	movi	r3,1
    d640:	e0bffa17 	ldw	r2,-24(fp)
    d644:	1884983a 	sll	r2,r3,r2
    d648:	1007883a 	mov	r3,r2
    d64c:	d0a74f17 	ldw	r2,-25284(gp)
    d650:	1884b03a 	or	r2,r3,r2
    d654:	d0a74f15 	stw	r2,-25284(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d658:	d0a74f17 	ldw	r2,-25284(gp)
    d65c:	100170fa 	wrctl	ienable,r2
    d660:	e0bffc17 	ldw	r2,-16(fp)
    d664:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d668:	e0bffd17 	ldw	r2,-12(fp)
    d66c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d670:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    d674:	0001883a 	nop
}
    d678:	e037883a 	mov	sp,fp
    d67c:	df000017 	ldw	fp,0(sp)
    d680:	dec00104 	addi	sp,sp,4
    d684:	f800283a 	ret

0000d688 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    d688:	defff904 	addi	sp,sp,-28
    d68c:	df000615 	stw	fp,24(sp)
    d690:	df000604 	addi	fp,sp,24
    d694:	e13ffe15 	stw	r4,-8(fp)
    d698:	e17fff15 	stw	r5,-4(fp)
    d69c:	e0bfff17 	ldw	r2,-4(fp)
    d6a0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d6a4:	0005303a 	rdctl	r2,status
    d6a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d6ac:	e0fffb17 	ldw	r3,-20(fp)
    d6b0:	00bfff84 	movi	r2,-2
    d6b4:	1884703a 	and	r2,r3,r2
    d6b8:	1001703a 	wrctl	status,r2
  
  return context;
    d6bc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d6c0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    d6c4:	00c00044 	movi	r3,1
    d6c8:	e0bffa17 	ldw	r2,-24(fp)
    d6cc:	1884983a 	sll	r2,r3,r2
    d6d0:	0084303a 	nor	r2,zero,r2
    d6d4:	1007883a 	mov	r3,r2
    d6d8:	d0a74f17 	ldw	r2,-25284(gp)
    d6dc:	1884703a 	and	r2,r3,r2
    d6e0:	d0a74f15 	stw	r2,-25284(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d6e4:	d0a74f17 	ldw	r2,-25284(gp)
    d6e8:	100170fa 	wrctl	ienable,r2
    d6ec:	e0bffc17 	ldw	r2,-16(fp)
    d6f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d6f4:	e0bffd17 	ldw	r2,-12(fp)
    d6f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d6fc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    d700:	0001883a 	nop
}
    d704:	e037883a 	mov	sp,fp
    d708:	df000017 	ldw	fp,0(sp)
    d70c:	dec00104 	addi	sp,sp,4
    d710:	f800283a 	ret

0000d714 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    d714:	defffc04 	addi	sp,sp,-16
    d718:	df000315 	stw	fp,12(sp)
    d71c:	df000304 	addi	fp,sp,12
    d720:	e13ffe15 	stw	r4,-8(fp)
    d724:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    d728:	000530fa 	rdctl	r2,ienable
    d72c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    d730:	00c00044 	movi	r3,1
    d734:	e0bfff17 	ldw	r2,-4(fp)
    d738:	1884983a 	sll	r2,r3,r2
    d73c:	1007883a 	mov	r3,r2
    d740:	e0bffd17 	ldw	r2,-12(fp)
    d744:	1884703a 	and	r2,r3,r2
    d748:	1004c03a 	cmpne	r2,r2,zero
    d74c:	10803fcc 	andi	r2,r2,255
}
    d750:	e037883a 	mov	sp,fp
    d754:	df000017 	ldw	fp,0(sp)
    d758:	dec00104 	addi	sp,sp,4
    d75c:	f800283a 	ret

0000d760 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d760:	defff504 	addi	sp,sp,-44
    d764:	dfc00a15 	stw	ra,40(sp)
    d768:	df000915 	stw	fp,36(sp)
    d76c:	df000904 	addi	fp,sp,36
    d770:	e13ffc15 	stw	r4,-16(fp)
    d774:	e17ffd15 	stw	r5,-12(fp)
    d778:	e1bffe15 	stw	r6,-8(fp)
    d77c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    d780:	00bffa84 	movi	r2,-22
    d784:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    d788:	e0bffd17 	ldw	r2,-12(fp)
    d78c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    d790:	e0bff817 	ldw	r2,-32(fp)
    d794:	10800808 	cmpgei	r2,r2,32
    d798:	1000271e 	bne	r2,zero,d838 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d79c:	0005303a 	rdctl	r2,status
    d7a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d7a4:	e0fffb17 	ldw	r3,-20(fp)
    d7a8:	00bfff84 	movi	r2,-2
    d7ac:	1884703a 	and	r2,r3,r2
    d7b0:	1001703a 	wrctl	status,r2
  
  return context;
    d7b4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    d7b8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    d7bc:	00800074 	movhi	r2,1
    d7c0:	109ee704 	addi	r2,r2,31644
    d7c4:	e0fff817 	ldw	r3,-32(fp)
    d7c8:	180690fa 	slli	r3,r3,3
    d7cc:	10c5883a 	add	r2,r2,r3
    d7d0:	e0fffe17 	ldw	r3,-8(fp)
    d7d4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    d7d8:	00800074 	movhi	r2,1
    d7dc:	109ee704 	addi	r2,r2,31644
    d7e0:	e0fff817 	ldw	r3,-32(fp)
    d7e4:	180690fa 	slli	r3,r3,3
    d7e8:	10c5883a 	add	r2,r2,r3
    d7ec:	10800104 	addi	r2,r2,4
    d7f0:	e0ffff17 	ldw	r3,-4(fp)
    d7f4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    d7f8:	e0bffe17 	ldw	r2,-8(fp)
    d7fc:	10000526 	beq	r2,zero,d814 <alt_iic_isr_register+0xb4>
    d800:	e0bff817 	ldw	r2,-32(fp)
    d804:	100b883a 	mov	r5,r2
    d808:	e13ffc17 	ldw	r4,-16(fp)
    d80c:	000d6000 	call	d600 <alt_ic_irq_enable>
    d810:	00000406 	br	d824 <alt_iic_isr_register+0xc4>
    d814:	e0bff817 	ldw	r2,-32(fp)
    d818:	100b883a 	mov	r5,r2
    d81c:	e13ffc17 	ldw	r4,-16(fp)
    d820:	000d6880 	call	d688 <alt_ic_irq_disable>
    d824:	e0bff715 	stw	r2,-36(fp)
    d828:	e0bffa17 	ldw	r2,-24(fp)
    d82c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d830:	e0bff917 	ldw	r2,-28(fp)
    d834:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    d838:	e0bff717 	ldw	r2,-36(fp)
}
    d83c:	e037883a 	mov	sp,fp
    d840:	dfc00117 	ldw	ra,4(sp)
    d844:	df000017 	ldw	fp,0(sp)
    d848:	dec00204 	addi	sp,sp,8
    d84c:	f800283a 	ret

0000d850 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    d850:	defff904 	addi	sp,sp,-28
    d854:	dfc00615 	stw	ra,24(sp)
    d858:	df000515 	stw	fp,20(sp)
    d85c:	df000504 	addi	fp,sp,20
    d860:	e13ffc15 	stw	r4,-16(fp)
    d864:	e17ffd15 	stw	r5,-12(fp)
    d868:	e1bffe15 	stw	r6,-8(fp)
    d86c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    d870:	e1bfff17 	ldw	r6,-4(fp)
    d874:	e17ffe17 	ldw	r5,-8(fp)
    d878:	e13ffd17 	ldw	r4,-12(fp)
    d87c:	000da900 	call	da90 <open>
    d880:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    d884:	e0bffb17 	ldw	r2,-20(fp)
    d888:	10001c16 	blt	r2,zero,d8fc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    d88c:	00800074 	movhi	r2,1
    d890:	10be2204 	addi	r2,r2,-1912
    d894:	e0fffb17 	ldw	r3,-20(fp)
    d898:	18c00324 	muli	r3,r3,12
    d89c:	10c5883a 	add	r2,r2,r3
    d8a0:	10c00017 	ldw	r3,0(r2)
    d8a4:	e0bffc17 	ldw	r2,-16(fp)
    d8a8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    d8ac:	00800074 	movhi	r2,1
    d8b0:	10be2204 	addi	r2,r2,-1912
    d8b4:	e0fffb17 	ldw	r3,-20(fp)
    d8b8:	18c00324 	muli	r3,r3,12
    d8bc:	10c5883a 	add	r2,r2,r3
    d8c0:	10800104 	addi	r2,r2,4
    d8c4:	10c00017 	ldw	r3,0(r2)
    d8c8:	e0bffc17 	ldw	r2,-16(fp)
    d8cc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    d8d0:	00800074 	movhi	r2,1
    d8d4:	10be2204 	addi	r2,r2,-1912
    d8d8:	e0fffb17 	ldw	r3,-20(fp)
    d8dc:	18c00324 	muli	r3,r3,12
    d8e0:	10c5883a 	add	r2,r2,r3
    d8e4:	10800204 	addi	r2,r2,8
    d8e8:	10c00017 	ldw	r3,0(r2)
    d8ec:	e0bffc17 	ldw	r2,-16(fp)
    d8f0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    d8f4:	e13ffb17 	ldw	r4,-20(fp)
    d8f8:	0003ae80 	call	3ae8 <alt_release_fd>
  }
} 
    d8fc:	0001883a 	nop
    d900:	e037883a 	mov	sp,fp
    d904:	dfc00117 	ldw	ra,4(sp)
    d908:	df000017 	ldw	fp,0(sp)
    d90c:	dec00204 	addi	sp,sp,8
    d910:	f800283a 	ret

0000d914 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    d914:	defffb04 	addi	sp,sp,-20
    d918:	dfc00415 	stw	ra,16(sp)
    d91c:	df000315 	stw	fp,12(sp)
    d920:	df000304 	addi	fp,sp,12
    d924:	e13ffd15 	stw	r4,-12(fp)
    d928:	e17ffe15 	stw	r5,-8(fp)
    d92c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    d930:	01c07fc4 	movi	r7,511
    d934:	01800044 	movi	r6,1
    d938:	e17ffd17 	ldw	r5,-12(fp)
    d93c:	01000074 	movhi	r4,1
    d940:	213e2504 	addi	r4,r4,-1900
    d944:	000d8500 	call	d850 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    d948:	01c07fc4 	movi	r7,511
    d94c:	000d883a 	mov	r6,zero
    d950:	e17ffe17 	ldw	r5,-8(fp)
    d954:	01000074 	movhi	r4,1
    d958:	213e2204 	addi	r4,r4,-1912
    d95c:	000d8500 	call	d850 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    d960:	01c07fc4 	movi	r7,511
    d964:	01800044 	movi	r6,1
    d968:	e17fff17 	ldw	r5,-4(fp)
    d96c:	01000074 	movhi	r4,1
    d970:	213e2804 	addi	r4,r4,-1888
    d974:	000d8500 	call	d850 <alt_open_fd>
}  
    d978:	0001883a 	nop
    d97c:	e037883a 	mov	sp,fp
    d980:	dfc00117 	ldw	ra,4(sp)
    d984:	df000017 	ldw	fp,0(sp)
    d988:	dec00204 	addi	sp,sp,8
    d98c:	f800283a 	ret

0000d990 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d990:	defffe04 	addi	sp,sp,-8
    d994:	dfc00115 	stw	ra,4(sp)
    d998:	df000015 	stw	fp,0(sp)
    d99c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d9a0:	d0a01017 	ldw	r2,-32704(gp)
    d9a4:	10000326 	beq	r2,zero,d9b4 <alt_get_errno+0x24>
    d9a8:	d0a01017 	ldw	r2,-32704(gp)
    d9ac:	103ee83a 	callr	r2
    d9b0:	00000106 	br	d9b8 <alt_get_errno+0x28>
    d9b4:	d0a73204 	addi	r2,gp,-25400
}
    d9b8:	e037883a 	mov	sp,fp
    d9bc:	dfc00117 	ldw	ra,4(sp)
    d9c0:	df000017 	ldw	fp,0(sp)
    d9c4:	dec00204 	addi	sp,sp,8
    d9c8:	f800283a 	ret

0000d9cc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    d9cc:	defffd04 	addi	sp,sp,-12
    d9d0:	df000215 	stw	fp,8(sp)
    d9d4:	df000204 	addi	fp,sp,8
    d9d8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    d9dc:	e0bfff17 	ldw	r2,-4(fp)
    d9e0:	10800217 	ldw	r2,8(r2)
    d9e4:	10d00034 	orhi	r3,r2,16384
    d9e8:	e0bfff17 	ldw	r2,-4(fp)
    d9ec:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d9f0:	e03ffe15 	stw	zero,-8(fp)
    d9f4:	00001d06 	br	da6c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    d9f8:	00800074 	movhi	r2,1
    d9fc:	10be2204 	addi	r2,r2,-1912
    da00:	e0fffe17 	ldw	r3,-8(fp)
    da04:	18c00324 	muli	r3,r3,12
    da08:	10c5883a 	add	r2,r2,r3
    da0c:	10c00017 	ldw	r3,0(r2)
    da10:	e0bfff17 	ldw	r2,-4(fp)
    da14:	10800017 	ldw	r2,0(r2)
    da18:	1880111e 	bne	r3,r2,da60 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    da1c:	00800074 	movhi	r2,1
    da20:	10be2204 	addi	r2,r2,-1912
    da24:	e0fffe17 	ldw	r3,-8(fp)
    da28:	18c00324 	muli	r3,r3,12
    da2c:	10c5883a 	add	r2,r2,r3
    da30:	10800204 	addi	r2,r2,8
    da34:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    da38:	1000090e 	bge	r2,zero,da60 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    da3c:	e0bffe17 	ldw	r2,-8(fp)
    da40:	10c00324 	muli	r3,r2,12
    da44:	00800074 	movhi	r2,1
    da48:	10be2204 	addi	r2,r2,-1912
    da4c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    da50:	e0bfff17 	ldw	r2,-4(fp)
    da54:	18800226 	beq	r3,r2,da60 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    da58:	00bffcc4 	movi	r2,-13
    da5c:	00000806 	br	da80 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    da60:	e0bffe17 	ldw	r2,-8(fp)
    da64:	10800044 	addi	r2,r2,1
    da68:	e0bffe15 	stw	r2,-8(fp)
    da6c:	d0a00f17 	ldw	r2,-32708(gp)
    da70:	1007883a 	mov	r3,r2
    da74:	e0bffe17 	ldw	r2,-8(fp)
    da78:	18bfdf2e 	bgeu	r3,r2,d9f8 <__alt_mem_onchip_memory2_0+0xfc0099f8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    da7c:	0005883a 	mov	r2,zero
}
    da80:	e037883a 	mov	sp,fp
    da84:	df000017 	ldw	fp,0(sp)
    da88:	dec00104 	addi	sp,sp,4
    da8c:	f800283a 	ret

0000da90 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    da90:	defff604 	addi	sp,sp,-40
    da94:	dfc00915 	stw	ra,36(sp)
    da98:	df000815 	stw	fp,32(sp)
    da9c:	df000804 	addi	fp,sp,32
    daa0:	e13ffd15 	stw	r4,-12(fp)
    daa4:	e17ffe15 	stw	r5,-8(fp)
    daa8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    daac:	00bfffc4 	movi	r2,-1
    dab0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    dab4:	00bffb44 	movi	r2,-19
    dab8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    dabc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    dac0:	d1600d04 	addi	r5,gp,-32716
    dac4:	e13ffd17 	ldw	r4,-12(fp)
    dac8:	000e1040 	call	e104 <alt_find_dev>
    dacc:	e0bff815 	stw	r2,-32(fp)
    dad0:	e0bff817 	ldw	r2,-32(fp)
    dad4:	1000051e 	bne	r2,zero,daec <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    dad8:	e13ffd17 	ldw	r4,-12(fp)
    dadc:	000e1940 	call	e194 <alt_find_file>
    dae0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    dae4:	00800044 	movi	r2,1
    dae8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    daec:	e0bff817 	ldw	r2,-32(fp)
    daf0:	10002926 	beq	r2,zero,db98 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    daf4:	e13ff817 	ldw	r4,-32(fp)
    daf8:	000e29c0 	call	e29c <alt_get_fd>
    dafc:	e0bff915 	stw	r2,-28(fp)
    db00:	e0bff917 	ldw	r2,-28(fp)
    db04:	1000030e 	bge	r2,zero,db14 <open+0x84>
    {
      status = index;
    db08:	e0bff917 	ldw	r2,-28(fp)
    db0c:	e0bffa15 	stw	r2,-24(fp)
    db10:	00002306 	br	dba0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    db14:	e0bff917 	ldw	r2,-28(fp)
    db18:	10c00324 	muli	r3,r2,12
    db1c:	00800074 	movhi	r2,1
    db20:	10be2204 	addi	r2,r2,-1912
    db24:	1885883a 	add	r2,r3,r2
    db28:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    db2c:	e0fffe17 	ldw	r3,-8(fp)
    db30:	00900034 	movhi	r2,16384
    db34:	10bfffc4 	addi	r2,r2,-1
    db38:	1886703a 	and	r3,r3,r2
    db3c:	e0bffc17 	ldw	r2,-16(fp)
    db40:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    db44:	e0bffb17 	ldw	r2,-20(fp)
    db48:	1000051e 	bne	r2,zero,db60 <open+0xd0>
    db4c:	e13ffc17 	ldw	r4,-16(fp)
    db50:	000d9cc0 	call	d9cc <alt_file_locked>
    db54:	e0bffa15 	stw	r2,-24(fp)
    db58:	e0bffa17 	ldw	r2,-24(fp)
    db5c:	10001016 	blt	r2,zero,dba0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    db60:	e0bff817 	ldw	r2,-32(fp)
    db64:	10800317 	ldw	r2,12(r2)
    db68:	10000826 	beq	r2,zero,db8c <open+0xfc>
    db6c:	e0bff817 	ldw	r2,-32(fp)
    db70:	10800317 	ldw	r2,12(r2)
    db74:	e1ffff17 	ldw	r7,-4(fp)
    db78:	e1bffe17 	ldw	r6,-8(fp)
    db7c:	e17ffd17 	ldw	r5,-12(fp)
    db80:	e13ffc17 	ldw	r4,-16(fp)
    db84:	103ee83a 	callr	r2
    db88:	00000106 	br	db90 <open+0x100>
    db8c:	0005883a 	mov	r2,zero
    db90:	e0bffa15 	stw	r2,-24(fp)
    db94:	00000206 	br	dba0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    db98:	00bffb44 	movi	r2,-19
    db9c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    dba0:	e0bffa17 	ldw	r2,-24(fp)
    dba4:	1000090e 	bge	r2,zero,dbcc <open+0x13c>
  {
    alt_release_fd (index);  
    dba8:	e13ff917 	ldw	r4,-28(fp)
    dbac:	0003ae80 	call	3ae8 <alt_release_fd>
    ALT_ERRNO = -status;
    dbb0:	000d9900 	call	d990 <alt_get_errno>
    dbb4:	1007883a 	mov	r3,r2
    dbb8:	e0bffa17 	ldw	r2,-24(fp)
    dbbc:	0085c83a 	sub	r2,zero,r2
    dbc0:	18800015 	stw	r2,0(r3)
    return -1;
    dbc4:	00bfffc4 	movi	r2,-1
    dbc8:	00000106 	br	dbd0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    dbcc:	e0bff917 	ldw	r2,-28(fp)
}
    dbd0:	e037883a 	mov	sp,fp
    dbd4:	dfc00117 	ldw	ra,4(sp)
    dbd8:	df000017 	ldw	fp,0(sp)
    dbdc:	dec00204 	addi	sp,sp,8
    dbe0:	f800283a 	ret

0000dbe4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    dbe4:	defffa04 	addi	sp,sp,-24
    dbe8:	df000515 	stw	fp,20(sp)
    dbec:	df000504 	addi	fp,sp,20
    dbf0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dbf4:	0005303a 	rdctl	r2,status
    dbf8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dbfc:	e0fffc17 	ldw	r3,-16(fp)
    dc00:	00bfff84 	movi	r2,-2
    dc04:	1884703a 	and	r2,r3,r2
    dc08:	1001703a 	wrctl	status,r2
  
  return context;
    dc0c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    dc10:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    dc14:	e0bfff17 	ldw	r2,-4(fp)
    dc18:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    dc1c:	e0bffd17 	ldw	r2,-12(fp)
    dc20:	10800017 	ldw	r2,0(r2)
    dc24:	e0fffd17 	ldw	r3,-12(fp)
    dc28:	18c00117 	ldw	r3,4(r3)
    dc2c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    dc30:	e0bffd17 	ldw	r2,-12(fp)
    dc34:	10800117 	ldw	r2,4(r2)
    dc38:	e0fffd17 	ldw	r3,-12(fp)
    dc3c:	18c00017 	ldw	r3,0(r3)
    dc40:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    dc44:	e0bffd17 	ldw	r2,-12(fp)
    dc48:	e0fffd17 	ldw	r3,-12(fp)
    dc4c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    dc50:	e0bffd17 	ldw	r2,-12(fp)
    dc54:	e0fffd17 	ldw	r3,-12(fp)
    dc58:	10c00015 	stw	r3,0(r2)
    dc5c:	e0bffb17 	ldw	r2,-20(fp)
    dc60:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dc64:	e0bffe17 	ldw	r2,-8(fp)
    dc68:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    dc6c:	0001883a 	nop
    dc70:	e037883a 	mov	sp,fp
    dc74:	df000017 	ldw	fp,0(sp)
    dc78:	dec00104 	addi	sp,sp,4
    dc7c:	f800283a 	ret

0000dc80 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    dc80:	defffb04 	addi	sp,sp,-20
    dc84:	dfc00415 	stw	ra,16(sp)
    dc88:	df000315 	stw	fp,12(sp)
    dc8c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    dc90:	d0a03217 	ldw	r2,-32568(gp)
    dc94:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    dc98:	d0a75117 	ldw	r2,-25276(gp)
    dc9c:	10800044 	addi	r2,r2,1
    dca0:	d0a75115 	stw	r2,-25276(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    dca4:	00002e06 	br	dd60 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    dca8:	e0bffd17 	ldw	r2,-12(fp)
    dcac:	10800017 	ldw	r2,0(r2)
    dcb0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    dcb4:	e0bffd17 	ldw	r2,-12(fp)
    dcb8:	10800403 	ldbu	r2,16(r2)
    dcbc:	10803fcc 	andi	r2,r2,255
    dcc0:	10000426 	beq	r2,zero,dcd4 <alt_tick+0x54>
    dcc4:	d0a75117 	ldw	r2,-25276(gp)
    dcc8:	1000021e 	bne	r2,zero,dcd4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    dccc:	e0bffd17 	ldw	r2,-12(fp)
    dcd0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    dcd4:	e0bffd17 	ldw	r2,-12(fp)
    dcd8:	10800217 	ldw	r2,8(r2)
    dcdc:	d0e75117 	ldw	r3,-25276(gp)
    dce0:	18801d36 	bltu	r3,r2,dd58 <alt_tick+0xd8>
    dce4:	e0bffd17 	ldw	r2,-12(fp)
    dce8:	10800403 	ldbu	r2,16(r2)
    dcec:	10803fcc 	andi	r2,r2,255
    dcf0:	1000191e 	bne	r2,zero,dd58 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    dcf4:	e0bffd17 	ldw	r2,-12(fp)
    dcf8:	10800317 	ldw	r2,12(r2)
    dcfc:	e0fffd17 	ldw	r3,-12(fp)
    dd00:	18c00517 	ldw	r3,20(r3)
    dd04:	1809883a 	mov	r4,r3
    dd08:	103ee83a 	callr	r2
    dd0c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    dd10:	e0bfff17 	ldw	r2,-4(fp)
    dd14:	1000031e 	bne	r2,zero,dd24 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    dd18:	e13ffd17 	ldw	r4,-12(fp)
    dd1c:	000dbe40 	call	dbe4 <alt_alarm_stop>
    dd20:	00000d06 	br	dd58 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    dd24:	e0bffd17 	ldw	r2,-12(fp)
    dd28:	10c00217 	ldw	r3,8(r2)
    dd2c:	e0bfff17 	ldw	r2,-4(fp)
    dd30:	1887883a 	add	r3,r3,r2
    dd34:	e0bffd17 	ldw	r2,-12(fp)
    dd38:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    dd3c:	e0bffd17 	ldw	r2,-12(fp)
    dd40:	10c00217 	ldw	r3,8(r2)
    dd44:	d0a75117 	ldw	r2,-25276(gp)
    dd48:	1880032e 	bgeu	r3,r2,dd58 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    dd4c:	e0bffd17 	ldw	r2,-12(fp)
    dd50:	00c00044 	movi	r3,1
    dd54:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    dd58:	e0bffe17 	ldw	r2,-8(fp)
    dd5c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    dd60:	e0fffd17 	ldw	r3,-12(fp)
    dd64:	d0a03204 	addi	r2,gp,-32568
    dd68:	18bfcf1e 	bne	r3,r2,dca8 <__alt_mem_onchip_memory2_0+0xfc009ca8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    dd6c:	0004cd40 	call	4cd4 <OSTimeTick>
}
    dd70:	0001883a 	nop
    dd74:	e037883a 	mov	sp,fp
    dd78:	dfc00117 	ldw	ra,4(sp)
    dd7c:	df000017 	ldw	fp,0(sp)
    dd80:	dec00204 	addi	sp,sp,8
    dd84:	f800283a 	ret

0000dd88 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    dd88:	deffff04 	addi	sp,sp,-4
    dd8c:	df000015 	stw	fp,0(sp)
    dd90:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    dd94:	000170fa 	wrctl	ienable,zero
}
    dd98:	0001883a 	nop
    dd9c:	e037883a 	mov	sp,fp
    dda0:	df000017 	ldw	fp,0(sp)
    dda4:	dec00104 	addi	sp,sp,4
    dda8:	f800283a 	ret

0000ddac <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
    ddac:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
    ddb0:	d0e00817 	ldw	r3,-32736(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
    ddb4:	d1274a17 	ldw	r4,-25304(gp)

      stw ra,  0(sp)
    ddb8:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
    ddbc:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
    ddc0:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
    ddc4:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
    ddc8:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
    ddcc:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
    ddd0:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
    ddd4:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
    ddd8:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
    dddc:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
    dde0:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
    dde4:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    dde8:	000e0200 	call	e020 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
    ddec:	d1274517 	ldw	r4,-25324(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
    ddf0:	d1673d07 	ldb	r5,-25356(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
    ddf4:	d1274a15 	stw	r4,-25304(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
    ddf8:	d1673d45 	stb	r5,-25355(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
    ddfc:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
    de00:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
    de04:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
    de08:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
    de0c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
    de10:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
    de14:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
    de18:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
    de1c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
    de20:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
    de24:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
    de28:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
    de2c:	d0e00815 	stw	r3,-32736(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
    de30:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
    de34:	f800283a 	ret

0000de38 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
    de38:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
    de3c:	047fff84 	movi	r17,-2
      and   r18, r18, r17
    de40:	9464703a 	and	r18,r18,r17
      wrctl status, r18
    de44:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    de48:	000e0200 	call	e020 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
    de4c:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
    de50:	d4a73b45 	stb	r18,-25363(gp)

      /*
       * start execution of the new task.
       */

      br 9b
    de54:	003fe506 	br	ddec <__alt_mem_onchip_memory2_0+0xfc009dec>

0000de58 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
    de58:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
    de5c:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
    de60:	10800054 	ori	r2,r2,1
      wrctl status, r2
    de64:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
    de68:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
    de6c:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
    de70:	dec00204 	addi	sp,sp,8

      callr r2
    de74:	103ee83a 	callr	r2

      nop
    de78:	0001883a 	nop

0000de7c <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
    de7c:	defff704 	addi	sp,sp,-36
    de80:	dfc00815 	stw	ra,32(sp)
    de84:	df000715 	stw	fp,28(sp)
    de88:	df000704 	addi	fp,sp,28
    de8c:	e13ffc15 	stw	r4,-16(fp)
    de90:	e17ffd15 	stw	r5,-12(fp)
    de94:	e1bffe15 	stw	r6,-8(fp)
    de98:	3805883a 	mov	r2,r7
    de9c:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
    dea0:	e0fffe17 	ldw	r3,-8(fp)
    dea4:	00bfff04 	movi	r2,-4
    dea8:	1884703a 	and	r2,r3,r2
    deac:	10bef704 	addi	r2,r2,-1060
    deb0:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
    deb4:	01810904 	movi	r6,1060
    deb8:	000b883a 	mov	r5,zero
    debc:	e13ff917 	ldw	r4,-28(fp)
    dec0:	0001e4c0 	call	1e4c <memset>
    dec4:	e0bff917 	ldw	r2,-28(fp)
    dec8:	10c0bb04 	addi	r3,r2,748
    decc:	e0bff917 	ldw	r2,-28(fp)
    ded0:	10c00115 	stw	r3,4(r2)
    ded4:	e0bff917 	ldw	r2,-28(fp)
    ded8:	10c0d504 	addi	r3,r2,852
    dedc:	e0bff917 	ldw	r2,-28(fp)
    dee0:	10c00215 	stw	r3,8(r2)
    dee4:	e0bff917 	ldw	r2,-28(fp)
    dee8:	10c0ef04 	addi	r3,r2,956
    deec:	e0bff917 	ldw	r2,-28(fp)
    def0:	10c00315 	stw	r3,12(r2)
    def4:	e0fff917 	ldw	r3,-28(fp)
    def8:	00800074 	movhi	r2,1
    defc:	10bc0904 	addi	r2,r2,-4060
    df00:	18800d15 	stw	r2,52(r3)
    df04:	e0bff917 	ldw	r2,-28(fp)
    df08:	00c00044 	movi	r3,1
    df0c:	10c02915 	stw	r3,164(r2)
    df10:	10002a15 	stw	zero,168(r2)
    df14:	e0bff917 	ldw	r2,-28(fp)
    df18:	00ccc384 	movi	r3,13070
    df1c:	10c02b0d 	sth	r3,172(r2)
    df20:	e0bff917 	ldw	r2,-28(fp)
    df24:	00eaf344 	movi	r3,-21555
    df28:	10c02b8d 	sth	r3,174(r2)
    df2c:	e0bff917 	ldw	r2,-28(fp)
    df30:	00c48d04 	movi	r3,4660
    df34:	10c02c0d 	sth	r3,176(r2)
    df38:	e0bff917 	ldw	r2,-28(fp)
    df3c:	00f99b44 	movi	r3,-6547
    df40:	10c02c8d 	sth	r3,178(r2)
    df44:	e0bff917 	ldw	r2,-28(fp)
    df48:	00f7bb04 	movi	r3,-8468
    df4c:	10c02d0d 	sth	r3,180(r2)
    df50:	e0bff917 	ldw	r2,-28(fp)
    df54:	00c00144 	movi	r3,5
    df58:	10c02d8d 	sth	r3,182(r2)
    df5c:	e0bff917 	ldw	r2,-28(fp)
    df60:	00c002c4 	movi	r3,11
    df64:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
    df68:	e0bff917 	ldw	r2,-28(fp)
    df6c:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
    df70:	e0bffa17 	ldw	r2,-24(fp)
    df74:	10bff304 	addi	r2,r2,-52
    df78:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
    df7c:	e0bffb17 	ldw	r2,-20(fp)
    df80:	10800c04 	addi	r2,r2,48
    df84:	e0fffc17 	ldw	r3,-16(fp)
    df88:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
    df8c:	e0bffb17 	ldw	r2,-20(fp)
    df90:	10800b04 	addi	r2,r2,44
    df94:	e0fffd17 	ldw	r3,-12(fp)
    df98:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
    df9c:	e0bffb17 	ldw	r2,-20(fp)
    dfa0:	10800a04 	addi	r2,r2,40
    dfa4:	e0fff917 	ldw	r3,-28(fp)
    dfa8:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
    dfac:	00800074 	movhi	r2,1
    dfb0:	10b79604 	addi	r2,r2,-8616
    dfb4:	10c00104 	addi	r3,r2,4
    dfb8:	e0bffb17 	ldw	r2,-20(fp)
    dfbc:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
    dfc0:	e0bffb17 	ldw	r2,-20(fp)
}
    dfc4:	e037883a 	mov	sp,fp
    dfc8:	dfc00117 	ldw	ra,4(sp)
    dfcc:	df000017 	ldw	fp,0(sp)
    dfd0:	dec00204 	addi	sp,sp,8
    dfd4:	f800283a 	ret

0000dfd8 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
    dfd8:	defffe04 	addi	sp,sp,-8
    dfdc:	df000115 	stw	fp,4(sp)
    dfe0:	df000104 	addi	fp,sp,4
    dfe4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
    dfe8:	0001883a 	nop
    dfec:	e037883a 	mov	sp,fp
    dff0:	df000017 	ldw	fp,0(sp)
    dff4:	dec00104 	addi	sp,sp,4
    dff8:	f800283a 	ret

0000dffc <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
    dffc:	defffe04 	addi	sp,sp,-8
    e000:	df000115 	stw	fp,4(sp)
    e004:	df000104 	addi	fp,sp,4
    e008:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
    e00c:	0001883a 	nop
    e010:	e037883a 	mov	sp,fp
    e014:	df000017 	ldw	fp,0(sp)
    e018:	dec00104 	addi	sp,sp,4
    e01c:	f800283a 	ret

0000e020 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
    e020:	deffff04 	addi	sp,sp,-4
    e024:	df000015 	stw	fp,0(sp)
    e028:	d839883a 	mov	fp,sp
}
    e02c:	0001883a 	nop
    e030:	e037883a 	mov	sp,fp
    e034:	df000017 	ldw	fp,0(sp)
    e038:	dec00104 	addi	sp,sp,4
    e03c:	f800283a 	ret

0000e040 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
    e040:	deffff04 	addi	sp,sp,-4
    e044:	df000015 	stw	fp,0(sp)
    e048:	d839883a 	mov	fp,sp
}
    e04c:	0001883a 	nop
    e050:	e037883a 	mov	sp,fp
    e054:	df000017 	ldw	fp,0(sp)
    e058:	dec00104 	addi	sp,sp,4
    e05c:	f800283a 	ret

0000e060 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
    e060:	deffff04 	addi	sp,sp,-4
    e064:	df000015 	stw	fp,0(sp)
    e068:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
    e06c:	0001883a 	nop
    e070:	e037883a 	mov	sp,fp
    e074:	df000017 	ldw	fp,0(sp)
    e078:	dec00104 	addi	sp,sp,4
    e07c:	f800283a 	ret

0000e080 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
    e080:	deffff04 	addi	sp,sp,-4
    e084:	df000015 	stw	fp,0(sp)
    e088:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
    e08c:	0001883a 	nop
    e090:	e037883a 	mov	sp,fp
    e094:	df000017 	ldw	fp,0(sp)
    e098:	dec00104 	addi	sp,sp,4
    e09c:	f800283a 	ret

0000e0a0 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
    e0a0:	deffff04 	addi	sp,sp,-4
    e0a4:	df000015 	stw	fp,0(sp)
    e0a8:	d839883a 	mov	fp,sp
}
    e0ac:	0001883a 	nop
    e0b0:	e037883a 	mov	sp,fp
    e0b4:	df000017 	ldw	fp,0(sp)
    e0b8:	dec00104 	addi	sp,sp,4
    e0bc:	f800283a 	ret

0000e0c0 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
    e0c0:	deffff04 	addi	sp,sp,-4
    e0c4:	df000015 	stw	fp,0(sp)
    e0c8:	d839883a 	mov	fp,sp
}
    e0cc:	0001883a 	nop
    e0d0:	e037883a 	mov	sp,fp
    e0d4:	df000017 	ldw	fp,0(sp)
    e0d8:	dec00104 	addi	sp,sp,4
    e0dc:	f800283a 	ret

0000e0e0 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
    e0e0:	defffe04 	addi	sp,sp,-8
    e0e4:	df000115 	stw	fp,4(sp)
    e0e8:	df000104 	addi	fp,sp,4
    e0ec:	e13fff15 	stw	r4,-4(fp)
}
    e0f0:	0001883a 	nop
    e0f4:	e037883a 	mov	sp,fp
    e0f8:	df000017 	ldw	fp,0(sp)
    e0fc:	dec00104 	addi	sp,sp,4
    e100:	f800283a 	ret

0000e104 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    e104:	defffa04 	addi	sp,sp,-24
    e108:	dfc00515 	stw	ra,20(sp)
    e10c:	df000415 	stw	fp,16(sp)
    e110:	df000404 	addi	fp,sp,16
    e114:	e13ffe15 	stw	r4,-8(fp)
    e118:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    e11c:	e0bfff17 	ldw	r2,-4(fp)
    e120:	10800017 	ldw	r2,0(r2)
    e124:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    e128:	e13ffe17 	ldw	r4,-8(fp)
    e12c:	000083c0 	call	83c <strlen>
    e130:	10800044 	addi	r2,r2,1
    e134:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    e138:	00000d06 	br	e170 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    e13c:	e0bffc17 	ldw	r2,-16(fp)
    e140:	10800217 	ldw	r2,8(r2)
    e144:	e0fffd17 	ldw	r3,-12(fp)
    e148:	180d883a 	mov	r6,r3
    e14c:	e17ffe17 	ldw	r5,-8(fp)
    e150:	1009883a 	mov	r4,r2
    e154:	000e5a40 	call	e5a4 <memcmp>
    e158:	1000021e 	bne	r2,zero,e164 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    e15c:	e0bffc17 	ldw	r2,-16(fp)
    e160:	00000706 	br	e180 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    e164:	e0bffc17 	ldw	r2,-16(fp)
    e168:	10800017 	ldw	r2,0(r2)
    e16c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    e170:	e0fffc17 	ldw	r3,-16(fp)
    e174:	e0bfff17 	ldw	r2,-4(fp)
    e178:	18bff01e 	bne	r3,r2,e13c <__alt_mem_onchip_memory2_0+0xfc00a13c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    e17c:	0005883a 	mov	r2,zero
}
    e180:	e037883a 	mov	sp,fp
    e184:	dfc00117 	ldw	ra,4(sp)
    e188:	df000017 	ldw	fp,0(sp)
    e18c:	dec00204 	addi	sp,sp,8
    e190:	f800283a 	ret

0000e194 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    e194:	defffb04 	addi	sp,sp,-20
    e198:	dfc00415 	stw	ra,16(sp)
    e19c:	df000315 	stw	fp,12(sp)
    e1a0:	df000304 	addi	fp,sp,12
    e1a4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    e1a8:	d0a00b17 	ldw	r2,-32724(gp)
    e1ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    e1b0:	00003106 	br	e278 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    e1b4:	e0bffd17 	ldw	r2,-12(fp)
    e1b8:	10800217 	ldw	r2,8(r2)
    e1bc:	1009883a 	mov	r4,r2
    e1c0:	000083c0 	call	83c <strlen>
    e1c4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    e1c8:	e0bffd17 	ldw	r2,-12(fp)
    e1cc:	10c00217 	ldw	r3,8(r2)
    e1d0:	e0bffe17 	ldw	r2,-8(fp)
    e1d4:	10bfffc4 	addi	r2,r2,-1
    e1d8:	1885883a 	add	r2,r3,r2
    e1dc:	10800003 	ldbu	r2,0(r2)
    e1e0:	10803fcc 	andi	r2,r2,255
    e1e4:	1080201c 	xori	r2,r2,128
    e1e8:	10bfe004 	addi	r2,r2,-128
    e1ec:	10800bd8 	cmpnei	r2,r2,47
    e1f0:	1000031e 	bne	r2,zero,e200 <alt_find_file+0x6c>
    {
      len -= 1;
    e1f4:	e0bffe17 	ldw	r2,-8(fp)
    e1f8:	10bfffc4 	addi	r2,r2,-1
    e1fc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    e200:	e0bffe17 	ldw	r2,-8(fp)
    e204:	e0ffff17 	ldw	r3,-4(fp)
    e208:	1885883a 	add	r2,r3,r2
    e20c:	10800003 	ldbu	r2,0(r2)
    e210:	10803fcc 	andi	r2,r2,255
    e214:	1080201c 	xori	r2,r2,128
    e218:	10bfe004 	addi	r2,r2,-128
    e21c:	10800be0 	cmpeqi	r2,r2,47
    e220:	1000081e 	bne	r2,zero,e244 <alt_find_file+0xb0>
    e224:	e0bffe17 	ldw	r2,-8(fp)
    e228:	e0ffff17 	ldw	r3,-4(fp)
    e22c:	1885883a 	add	r2,r3,r2
    e230:	10800003 	ldbu	r2,0(r2)
    e234:	10803fcc 	andi	r2,r2,255
    e238:	1080201c 	xori	r2,r2,128
    e23c:	10bfe004 	addi	r2,r2,-128
    e240:	10000a1e 	bne	r2,zero,e26c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    e244:	e0bffd17 	ldw	r2,-12(fp)
    e248:	10800217 	ldw	r2,8(r2)
    e24c:	e0fffe17 	ldw	r3,-8(fp)
    e250:	180d883a 	mov	r6,r3
    e254:	e17fff17 	ldw	r5,-4(fp)
    e258:	1009883a 	mov	r4,r2
    e25c:	000e5a40 	call	e5a4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    e260:	1000021e 	bne	r2,zero,e26c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    e264:	e0bffd17 	ldw	r2,-12(fp)
    e268:	00000706 	br	e288 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    e26c:	e0bffd17 	ldw	r2,-12(fp)
    e270:	10800017 	ldw	r2,0(r2)
    e274:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    e278:	e0fffd17 	ldw	r3,-12(fp)
    e27c:	d0a00b04 	addi	r2,gp,-32724
    e280:	18bfcc1e 	bne	r3,r2,e1b4 <__alt_mem_onchip_memory2_0+0xfc00a1b4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    e284:	0005883a 	mov	r2,zero
}
    e288:	e037883a 	mov	sp,fp
    e28c:	dfc00117 	ldw	ra,4(sp)
    e290:	df000017 	ldw	fp,0(sp)
    e294:	dec00204 	addi	sp,sp,8
    e298:	f800283a 	ret

0000e29c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    e29c:	defff904 	addi	sp,sp,-28
    e2a0:	dfc00615 	stw	ra,24(sp)
    e2a4:	df000515 	stw	fp,20(sp)
    e2a8:	df000504 	addi	fp,sp,20
    e2ac:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    e2b0:	00bffa04 	movi	r2,-24
    e2b4:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
    e2b8:	d0a73317 	ldw	r2,-25396(gp)
    e2bc:	e0bffd15 	stw	r2,-12(fp)
    e2c0:	e03ffe0d 	sth	zero,-8(fp)
    e2c4:	e0bffe0b 	ldhu	r2,-8(fp)
    e2c8:	e0fffe84 	addi	r3,fp,-6
    e2cc:	180d883a 	mov	r6,r3
    e2d0:	100b883a 	mov	r5,r2
    e2d4:	e13ffd17 	ldw	r4,-12(fp)
    e2d8:	00095180 	call	9518 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    e2dc:	e03ffb15 	stw	zero,-20(fp)
    e2e0:	00001906 	br	e348 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    e2e4:	00800074 	movhi	r2,1
    e2e8:	10be2204 	addi	r2,r2,-1912
    e2ec:	e0fffb17 	ldw	r3,-20(fp)
    e2f0:	18c00324 	muli	r3,r3,12
    e2f4:	10c5883a 	add	r2,r2,r3
    e2f8:	10800017 	ldw	r2,0(r2)
    e2fc:	10000f1e 	bne	r2,zero,e33c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    e300:	00800074 	movhi	r2,1
    e304:	10be2204 	addi	r2,r2,-1912
    e308:	e0fffb17 	ldw	r3,-20(fp)
    e30c:	18c00324 	muli	r3,r3,12
    e310:	10c5883a 	add	r2,r2,r3
    e314:	e0ffff17 	ldw	r3,-4(fp)
    e318:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    e31c:	d0e00f17 	ldw	r3,-32708(gp)
    e320:	e0bffb17 	ldw	r2,-20(fp)
    e324:	1880020e 	bge	r3,r2,e330 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    e328:	e0bffb17 	ldw	r2,-20(fp)
    e32c:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
    e330:	e0bffb17 	ldw	r2,-20(fp)
    e334:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
    e338:	00000606 	br	e354 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    e33c:	e0bffb17 	ldw	r2,-20(fp)
    e340:	10800044 	addi	r2,r2,1
    e344:	e0bffb15 	stw	r2,-20(fp)
    e348:	e0bffb17 	ldw	r2,-20(fp)
    e34c:	10800810 	cmplti	r2,r2,32
    e350:	103fe41e 	bne	r2,zero,e2e4 <__alt_mem_onchip_memory2_0+0xfc00a2e4>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
    e354:	d0a73317 	ldw	r2,-25396(gp)
    e358:	1009883a 	mov	r4,r2
    e35c:	00098900 	call	9890 <OSSemPost>

  return rc;
    e360:	e0bffc17 	ldw	r2,-16(fp)
}
    e364:	e037883a 	mov	sp,fp
    e368:	dfc00117 	ldw	ra,4(sp)
    e36c:	df000017 	ldw	fp,0(sp)
    e370:	dec00204 	addi	sp,sp,8
    e374:	f800283a 	ret

0000e378 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    e378:	defffb04 	addi	sp,sp,-20
    e37c:	df000415 	stw	fp,16(sp)
    e380:	df000404 	addi	fp,sp,16
    e384:	e13ffe15 	stw	r4,-8(fp)
    e388:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    e38c:	e0bfff17 	ldw	r2,-4(fp)
    e390:	10840070 	cmpltui	r2,r2,4097
    e394:	1000021e 	bne	r2,zero,e3a0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    e398:	00840004 	movi	r2,4096
    e39c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    e3a0:	e0fffe17 	ldw	r3,-8(fp)
    e3a4:	e0bfff17 	ldw	r2,-4(fp)
    e3a8:	1885883a 	add	r2,r3,r2
    e3ac:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    e3b0:	e0bffe17 	ldw	r2,-8(fp)
    e3b4:	e0bffc15 	stw	r2,-16(fp)
    e3b8:	00000506 	br	e3d0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    e3bc:	e0bffc17 	ldw	r2,-16(fp)
    e3c0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    e3c4:	e0bffc17 	ldw	r2,-16(fp)
    e3c8:	10800804 	addi	r2,r2,32
    e3cc:	e0bffc15 	stw	r2,-16(fp)
    e3d0:	e0fffc17 	ldw	r3,-16(fp)
    e3d4:	e0bffd17 	ldw	r2,-12(fp)
    e3d8:	18bff836 	bltu	r3,r2,e3bc <__alt_mem_onchip_memory2_0+0xfc00a3bc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    e3dc:	e0bffe17 	ldw	r2,-8(fp)
    e3e0:	108007cc 	andi	r2,r2,31
    e3e4:	10000226 	beq	r2,zero,e3f0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    e3e8:	e0bffc17 	ldw	r2,-16(fp)
    e3ec:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    e3f0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    e3f4:	0001883a 	nop
    e3f8:	e037883a 	mov	sp,fp
    e3fc:	df000017 	ldw	fp,0(sp)
    e400:	dec00104 	addi	sp,sp,4
    e404:	f800283a 	ret

0000e408 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    e408:	defffe04 	addi	sp,sp,-8
    e40c:	df000115 	stw	fp,4(sp)
    e410:	df000104 	addi	fp,sp,4
    e414:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    e418:	e0bfff17 	ldw	r2,-4(fp)
    e41c:	10bffe84 	addi	r2,r2,-6
    e420:	10c00428 	cmpgeui	r3,r2,16
    e424:	18001a1e 	bne	r3,zero,e490 <alt_exception_cause_generated_bad_addr+0x88>
    e428:	100690ba 	slli	r3,r2,2
    e42c:	00800074 	movhi	r2,1
    e430:	10b91004 	addi	r2,r2,-7104
    e434:	1885883a 	add	r2,r3,r2
    e438:	10800017 	ldw	r2,0(r2)
    e43c:	1000683a 	jmp	r2
    e440:	0000e480 	call	e48 <__sfvwrite_r+0x1d4>
    e444:	0000e480 	call	e48 <__sfvwrite_r+0x1d4>
    e448:	0000e490 	cmplti	zero,zero,914
    e44c:	0000e490 	cmplti	zero,zero,914
    e450:	0000e490 	cmplti	zero,zero,914
    e454:	0000e480 	call	e48 <__sfvwrite_r+0x1d4>
    e458:	0000e488 	cmpgei	zero,zero,914
    e45c:	0000e490 	cmplti	zero,zero,914
    e460:	0000e480 	call	e48 <__sfvwrite_r+0x1d4>
    e464:	0000e480 	call	e48 <__sfvwrite_r+0x1d4>
    e468:	0000e490 	cmplti	zero,zero,914
    e46c:	0000e480 	call	e48 <__sfvwrite_r+0x1d4>
    e470:	0000e488 	cmpgei	zero,zero,914
    e474:	0000e490 	cmplti	zero,zero,914
    e478:	0000e490 	cmplti	zero,zero,914
    e47c:	0000e480 	call	e48 <__sfvwrite_r+0x1d4>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    e480:	00800044 	movi	r2,1
    e484:	00000306 	br	e494 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    e488:	0005883a 	mov	r2,zero
    e48c:	00000106 	br	e494 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    e490:	0005883a 	mov	r2,zero
  }
}
    e494:	e037883a 	mov	sp,fp
    e498:	df000017 	ldw	fp,0(sp)
    e49c:	dec00104 	addi	sp,sp,4
    e4a0:	f800283a 	ret

0000e4a4 <atexit>:
    e4a4:	200b883a 	mov	r5,r4
    e4a8:	000f883a 	mov	r7,zero
    e4ac:	000d883a 	mov	r6,zero
    e4b0:	0009883a 	mov	r4,zero
    e4b4:	000e8e01 	jmpi	e8e0 <__register_exitproc>

0000e4b8 <exit>:
    e4b8:	defffe04 	addi	sp,sp,-8
    e4bc:	000b883a 	mov	r5,zero
    e4c0:	dc000015 	stw	r16,0(sp)
    e4c4:	dfc00115 	stw	ra,4(sp)
    e4c8:	2021883a 	mov	r16,r4
    e4cc:	000e9f80 	call	e9f8 <__call_exitprocs>
    e4d0:	00800074 	movhi	r2,1
    e4d4:	1082d804 	addi	r2,r2,2912
    e4d8:	11000017 	ldw	r4,0(r2)
    e4dc:	20800f17 	ldw	r2,60(r4)
    e4e0:	10000126 	beq	r2,zero,e4e8 <exit+0x30>
    e4e4:	103ee83a 	callr	r2
    e4e8:	8009883a 	mov	r4,r16
    e4ec:	000eb780 	call	eb78 <_exit>

0000e4f0 <_fputs_r>:
    e4f0:	defff804 	addi	sp,sp,-32
    e4f4:	dc400615 	stw	r17,24(sp)
    e4f8:	2023883a 	mov	r17,r4
    e4fc:	2809883a 	mov	r4,r5
    e500:	dc000515 	stw	r16,20(sp)
    e504:	dfc00715 	stw	ra,28(sp)
    e508:	3021883a 	mov	r16,r6
    e50c:	d9400315 	stw	r5,12(sp)
    e510:	000083c0 	call	83c <strlen>
    e514:	d8800215 	stw	r2,8(sp)
    e518:	d8800415 	stw	r2,16(sp)
    e51c:	d8800304 	addi	r2,sp,12
    e520:	d8800015 	stw	r2,0(sp)
    e524:	00800044 	movi	r2,1
    e528:	d8800115 	stw	r2,4(sp)
    e52c:	88000226 	beq	r17,zero,e538 <_fputs_r+0x48>
    e530:	88800e17 	ldw	r2,56(r17)
    e534:	10001226 	beq	r2,zero,e580 <_fputs_r+0x90>
    e538:	8080030b 	ldhu	r2,12(r16)
    e53c:	10c8000c 	andi	r3,r2,8192
    e540:	1800061e 	bne	r3,zero,e55c <_fputs_r+0x6c>
    e544:	81001917 	ldw	r4,100(r16)
    e548:	00f7ffc4 	movi	r3,-8193
    e54c:	10880014 	ori	r2,r2,8192
    e550:	20c6703a 	and	r3,r4,r3
    e554:	8080030d 	sth	r2,12(r16)
    e558:	80c01915 	stw	r3,100(r16)
    e55c:	d80d883a 	mov	r6,sp
    e560:	800b883a 	mov	r5,r16
    e564:	8809883a 	mov	r4,r17
    e568:	0000c740 	call	c74 <__sfvwrite_r>
    e56c:	dfc00717 	ldw	ra,28(sp)
    e570:	dc400617 	ldw	r17,24(sp)
    e574:	dc000517 	ldw	r16,20(sp)
    e578:	dec00804 	addi	sp,sp,32
    e57c:	f800283a 	ret
    e580:	8809883a 	mov	r4,r17
    e584:	0000c240 	call	c24 <__sinit>
    e588:	003feb06 	br	e538 <__alt_mem_onchip_memory2_0+0xfc00a538>

0000e58c <fputs>:
    e58c:	00800074 	movhi	r2,1
    e590:	1082d904 	addi	r2,r2,2916
    e594:	280d883a 	mov	r6,r5
    e598:	200b883a 	mov	r5,r4
    e59c:	11000017 	ldw	r4,0(r2)
    e5a0:	000e4f01 	jmpi	e4f0 <_fputs_r>

0000e5a4 <memcmp>:
    e5a4:	01c000c4 	movi	r7,3
    e5a8:	3980192e 	bgeu	r7,r6,e610 <memcmp+0x6c>
    e5ac:	2144b03a 	or	r2,r4,r5
    e5b0:	11c4703a 	and	r2,r2,r7
    e5b4:	10000f26 	beq	r2,zero,e5f4 <memcmp+0x50>
    e5b8:	20800003 	ldbu	r2,0(r4)
    e5bc:	28c00003 	ldbu	r3,0(r5)
    e5c0:	10c0151e 	bne	r2,r3,e618 <memcmp+0x74>
    e5c4:	31bfff84 	addi	r6,r6,-2
    e5c8:	01ffffc4 	movi	r7,-1
    e5cc:	00000406 	br	e5e0 <memcmp+0x3c>
    e5d0:	20800003 	ldbu	r2,0(r4)
    e5d4:	28c00003 	ldbu	r3,0(r5)
    e5d8:	31bfffc4 	addi	r6,r6,-1
    e5dc:	10c00e1e 	bne	r2,r3,e618 <memcmp+0x74>
    e5e0:	21000044 	addi	r4,r4,1
    e5e4:	29400044 	addi	r5,r5,1
    e5e8:	31fff91e 	bne	r6,r7,e5d0 <__alt_mem_onchip_memory2_0+0xfc00a5d0>
    e5ec:	0005883a 	mov	r2,zero
    e5f0:	f800283a 	ret
    e5f4:	20c00017 	ldw	r3,0(r4)
    e5f8:	28800017 	ldw	r2,0(r5)
    e5fc:	18bfee1e 	bne	r3,r2,e5b8 <__alt_mem_onchip_memory2_0+0xfc00a5b8>
    e600:	31bfff04 	addi	r6,r6,-4
    e604:	21000104 	addi	r4,r4,4
    e608:	29400104 	addi	r5,r5,4
    e60c:	39bff936 	bltu	r7,r6,e5f4 <__alt_mem_onchip_memory2_0+0xfc00a5f4>
    e610:	303fe91e 	bne	r6,zero,e5b8 <__alt_mem_onchip_memory2_0+0xfc00a5b8>
    e614:	003ff506 	br	e5ec <__alt_mem_onchip_memory2_0+0xfc00a5ec>
    e618:	10c5c83a 	sub	r2,r2,r3
    e61c:	f800283a 	ret

0000e620 <_putc_r>:
    e620:	defffc04 	addi	sp,sp,-16
    e624:	dc000215 	stw	r16,8(sp)
    e628:	dfc00315 	stw	ra,12(sp)
    e62c:	2021883a 	mov	r16,r4
    e630:	20000226 	beq	r4,zero,e63c <_putc_r+0x1c>
    e634:	20800e17 	ldw	r2,56(r4)
    e638:	10001b26 	beq	r2,zero,e6a8 <_putc_r+0x88>
    e63c:	30800217 	ldw	r2,8(r6)
    e640:	10bfffc4 	addi	r2,r2,-1
    e644:	30800215 	stw	r2,8(r6)
    e648:	10000a16 	blt	r2,zero,e674 <_putc_r+0x54>
    e64c:	30800017 	ldw	r2,0(r6)
    e650:	11400005 	stb	r5,0(r2)
    e654:	30800017 	ldw	r2,0(r6)
    e658:	10c00044 	addi	r3,r2,1
    e65c:	30c00015 	stw	r3,0(r6)
    e660:	10800003 	ldbu	r2,0(r2)
    e664:	dfc00317 	ldw	ra,12(sp)
    e668:	dc000217 	ldw	r16,8(sp)
    e66c:	dec00404 	addi	sp,sp,16
    e670:	f800283a 	ret
    e674:	30c00617 	ldw	r3,24(r6)
    e678:	10c00616 	blt	r2,r3,e694 <_putc_r+0x74>
    e67c:	30800017 	ldw	r2,0(r6)
    e680:	00c00284 	movi	r3,10
    e684:	11400005 	stb	r5,0(r2)
    e688:	30800017 	ldw	r2,0(r6)
    e68c:	11400003 	ldbu	r5,0(r2)
    e690:	28fff11e 	bne	r5,r3,e658 <__alt_mem_onchip_memory2_0+0xfc00a658>
    e694:	8009883a 	mov	r4,r16
    e698:	dfc00317 	ldw	ra,12(sp)
    e69c:	dc000217 	ldw	r16,8(sp)
    e6a0:	dec00404 	addi	sp,sp,16
    e6a4:	000e7881 	jmpi	e788 <__swbuf_r>
    e6a8:	d9400015 	stw	r5,0(sp)
    e6ac:	d9800115 	stw	r6,4(sp)
    e6b0:	0000c240 	call	c24 <__sinit>
    e6b4:	d9800117 	ldw	r6,4(sp)
    e6b8:	d9400017 	ldw	r5,0(sp)
    e6bc:	003fdf06 	br	e63c <__alt_mem_onchip_memory2_0+0xfc00a63c>

0000e6c0 <putc>:
    e6c0:	00800074 	movhi	r2,1
    e6c4:	defffc04 	addi	sp,sp,-16
    e6c8:	1082d904 	addi	r2,r2,2916
    e6cc:	dc000115 	stw	r16,4(sp)
    e6d0:	14000017 	ldw	r16,0(r2)
    e6d4:	dc400215 	stw	r17,8(sp)
    e6d8:	dfc00315 	stw	ra,12(sp)
    e6dc:	2023883a 	mov	r17,r4
    e6e0:	80000226 	beq	r16,zero,e6ec <putc+0x2c>
    e6e4:	80800e17 	ldw	r2,56(r16)
    e6e8:	10001a26 	beq	r2,zero,e754 <putc+0x94>
    e6ec:	28800217 	ldw	r2,8(r5)
    e6f0:	10bfffc4 	addi	r2,r2,-1
    e6f4:	28800215 	stw	r2,8(r5)
    e6f8:	10000b16 	blt	r2,zero,e728 <putc+0x68>
    e6fc:	28800017 	ldw	r2,0(r5)
    e700:	14400005 	stb	r17,0(r2)
    e704:	28800017 	ldw	r2,0(r5)
    e708:	10c00044 	addi	r3,r2,1
    e70c:	28c00015 	stw	r3,0(r5)
    e710:	10800003 	ldbu	r2,0(r2)
    e714:	dfc00317 	ldw	ra,12(sp)
    e718:	dc400217 	ldw	r17,8(sp)
    e71c:	dc000117 	ldw	r16,4(sp)
    e720:	dec00404 	addi	sp,sp,16
    e724:	f800283a 	ret
    e728:	28c00617 	ldw	r3,24(r5)
    e72c:	10c00e16 	blt	r2,r3,e768 <putc+0xa8>
    e730:	28800017 	ldw	r2,0(r5)
    e734:	01000284 	movi	r4,10
    e738:	14400005 	stb	r17,0(r2)
    e73c:	28800017 	ldw	r2,0(r5)
    e740:	10c00003 	ldbu	r3,0(r2)
    e744:	193ff01e 	bne	r3,r4,e708 <__alt_mem_onchip_memory2_0+0xfc00a708>
    e748:	280d883a 	mov	r6,r5
    e74c:	180b883a 	mov	r5,r3
    e750:	00000706 	br	e770 <putc+0xb0>
    e754:	8009883a 	mov	r4,r16
    e758:	d9400015 	stw	r5,0(sp)
    e75c:	0000c240 	call	c24 <__sinit>
    e760:	d9400017 	ldw	r5,0(sp)
    e764:	003fe106 	br	e6ec <__alt_mem_onchip_memory2_0+0xfc00a6ec>
    e768:	280d883a 	mov	r6,r5
    e76c:	880b883a 	mov	r5,r17
    e770:	8009883a 	mov	r4,r16
    e774:	dfc00317 	ldw	ra,12(sp)
    e778:	dc400217 	ldw	r17,8(sp)
    e77c:	dc000117 	ldw	r16,4(sp)
    e780:	dec00404 	addi	sp,sp,16
    e784:	000e7881 	jmpi	e788 <__swbuf_r>

0000e788 <__swbuf_r>:
    e788:	defffb04 	addi	sp,sp,-20
    e78c:	dcc00315 	stw	r19,12(sp)
    e790:	dc800215 	stw	r18,8(sp)
    e794:	dc000015 	stw	r16,0(sp)
    e798:	dfc00415 	stw	ra,16(sp)
    e79c:	dc400115 	stw	r17,4(sp)
    e7a0:	2025883a 	mov	r18,r4
    e7a4:	2827883a 	mov	r19,r5
    e7a8:	3021883a 	mov	r16,r6
    e7ac:	20000226 	beq	r4,zero,e7b8 <__swbuf_r+0x30>
    e7b0:	20800e17 	ldw	r2,56(r4)
    e7b4:	10004226 	beq	r2,zero,e8c0 <__swbuf_r+0x138>
    e7b8:	80800617 	ldw	r2,24(r16)
    e7bc:	8100030b 	ldhu	r4,12(r16)
    e7c0:	80800215 	stw	r2,8(r16)
    e7c4:	2080020c 	andi	r2,r4,8
    e7c8:	10003626 	beq	r2,zero,e8a4 <__swbuf_r+0x11c>
    e7cc:	80c00417 	ldw	r3,16(r16)
    e7d0:	18003426 	beq	r3,zero,e8a4 <__swbuf_r+0x11c>
    e7d4:	2088000c 	andi	r2,r4,8192
    e7d8:	9c403fcc 	andi	r17,r19,255
    e7dc:	10001a26 	beq	r2,zero,e848 <__swbuf_r+0xc0>
    e7e0:	80800017 	ldw	r2,0(r16)
    e7e4:	81000517 	ldw	r4,20(r16)
    e7e8:	10c7c83a 	sub	r3,r2,r3
    e7ec:	1900200e 	bge	r3,r4,e870 <__swbuf_r+0xe8>
    e7f0:	18c00044 	addi	r3,r3,1
    e7f4:	81000217 	ldw	r4,8(r16)
    e7f8:	11400044 	addi	r5,r2,1
    e7fc:	81400015 	stw	r5,0(r16)
    e800:	213fffc4 	addi	r4,r4,-1
    e804:	81000215 	stw	r4,8(r16)
    e808:	14c00005 	stb	r19,0(r2)
    e80c:	80800517 	ldw	r2,20(r16)
    e810:	10c01e26 	beq	r2,r3,e88c <__swbuf_r+0x104>
    e814:	8080030b 	ldhu	r2,12(r16)
    e818:	1080004c 	andi	r2,r2,1
    e81c:	10000226 	beq	r2,zero,e828 <__swbuf_r+0xa0>
    e820:	00800284 	movi	r2,10
    e824:	88801926 	beq	r17,r2,e88c <__swbuf_r+0x104>
    e828:	8805883a 	mov	r2,r17
    e82c:	dfc00417 	ldw	ra,16(sp)
    e830:	dcc00317 	ldw	r19,12(sp)
    e834:	dc800217 	ldw	r18,8(sp)
    e838:	dc400117 	ldw	r17,4(sp)
    e83c:	dc000017 	ldw	r16,0(sp)
    e840:	dec00504 	addi	sp,sp,20
    e844:	f800283a 	ret
    e848:	81401917 	ldw	r5,100(r16)
    e84c:	00b7ffc4 	movi	r2,-8193
    e850:	21080014 	ori	r4,r4,8192
    e854:	2884703a 	and	r2,r5,r2
    e858:	80801915 	stw	r2,100(r16)
    e85c:	80800017 	ldw	r2,0(r16)
    e860:	8100030d 	sth	r4,12(r16)
    e864:	81000517 	ldw	r4,20(r16)
    e868:	10c7c83a 	sub	r3,r2,r3
    e86c:	193fe016 	blt	r3,r4,e7f0 <__alt_mem_onchip_memory2_0+0xfc00a7f0>
    e870:	800b883a 	mov	r5,r16
    e874:	9009883a 	mov	r4,r18
    e878:	0002b900 	call	2b90 <_fflush_r>
    e87c:	1000071e 	bne	r2,zero,e89c <__swbuf_r+0x114>
    e880:	80800017 	ldw	r2,0(r16)
    e884:	00c00044 	movi	r3,1
    e888:	003fda06 	br	e7f4 <__alt_mem_onchip_memory2_0+0xfc00a7f4>
    e88c:	800b883a 	mov	r5,r16
    e890:	9009883a 	mov	r4,r18
    e894:	0002b900 	call	2b90 <_fflush_r>
    e898:	103fe326 	beq	r2,zero,e828 <__alt_mem_onchip_memory2_0+0xfc00a828>
    e89c:	00bfffc4 	movi	r2,-1
    e8a0:	003fe206 	br	e82c <__alt_mem_onchip_memory2_0+0xfc00a82c>
    e8a4:	800b883a 	mov	r5,r16
    e8a8:	9009883a 	mov	r4,r18
    e8ac:	00026c80 	call	26c8 <__swsetup_r>
    e8b0:	103ffa1e 	bne	r2,zero,e89c <__alt_mem_onchip_memory2_0+0xfc00a89c>
    e8b4:	8100030b 	ldhu	r4,12(r16)
    e8b8:	80c00417 	ldw	r3,16(r16)
    e8bc:	003fc506 	br	e7d4 <__alt_mem_onchip_memory2_0+0xfc00a7d4>
    e8c0:	0000c240 	call	c24 <__sinit>
    e8c4:	003fbc06 	br	e7b8 <__alt_mem_onchip_memory2_0+0xfc00a7b8>

0000e8c8 <__swbuf>:
    e8c8:	00800074 	movhi	r2,1
    e8cc:	1082d904 	addi	r2,r2,2916
    e8d0:	280d883a 	mov	r6,r5
    e8d4:	200b883a 	mov	r5,r4
    e8d8:	11000017 	ldw	r4,0(r2)
    e8dc:	000e7881 	jmpi	e788 <__swbuf_r>

0000e8e0 <__register_exitproc>:
    e8e0:	defffa04 	addi	sp,sp,-24
    e8e4:	dc000315 	stw	r16,12(sp)
    e8e8:	04000074 	movhi	r16,1
    e8ec:	8402d804 	addi	r16,r16,2912
    e8f0:	80c00017 	ldw	r3,0(r16)
    e8f4:	dc400415 	stw	r17,16(sp)
    e8f8:	dfc00515 	stw	ra,20(sp)
    e8fc:	18805217 	ldw	r2,328(r3)
    e900:	2023883a 	mov	r17,r4
    e904:	10003726 	beq	r2,zero,e9e4 <__register_exitproc+0x104>
    e908:	10c00117 	ldw	r3,4(r2)
    e90c:	010007c4 	movi	r4,31
    e910:	20c00e16 	blt	r4,r3,e94c <__register_exitproc+0x6c>
    e914:	1a000044 	addi	r8,r3,1
    e918:	8800221e 	bne	r17,zero,e9a4 <__register_exitproc+0xc4>
    e91c:	18c00084 	addi	r3,r3,2
    e920:	18c7883a 	add	r3,r3,r3
    e924:	18c7883a 	add	r3,r3,r3
    e928:	12000115 	stw	r8,4(r2)
    e92c:	10c7883a 	add	r3,r2,r3
    e930:	19400015 	stw	r5,0(r3)
    e934:	0005883a 	mov	r2,zero
    e938:	dfc00517 	ldw	ra,20(sp)
    e93c:	dc400417 	ldw	r17,16(sp)
    e940:	dc000317 	ldw	r16,12(sp)
    e944:	dec00604 	addi	sp,sp,24
    e948:	f800283a 	ret
    e94c:	00800034 	movhi	r2,0
    e950:	10800004 	addi	r2,r2,0
    e954:	10002626 	beq	r2,zero,e9f0 <__register_exitproc+0x110>
    e958:	01006404 	movi	r4,400
    e95c:	d9400015 	stw	r5,0(sp)
    e960:	d9800115 	stw	r6,4(sp)
    e964:	d9c00215 	stw	r7,8(sp)
    e968:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
    e96c:	d9400017 	ldw	r5,0(sp)
    e970:	d9800117 	ldw	r6,4(sp)
    e974:	d9c00217 	ldw	r7,8(sp)
    e978:	10001d26 	beq	r2,zero,e9f0 <__register_exitproc+0x110>
    e97c:	81000017 	ldw	r4,0(r16)
    e980:	10000115 	stw	zero,4(r2)
    e984:	02000044 	movi	r8,1
    e988:	22405217 	ldw	r9,328(r4)
    e98c:	0007883a 	mov	r3,zero
    e990:	12400015 	stw	r9,0(r2)
    e994:	20805215 	stw	r2,328(r4)
    e998:	10006215 	stw	zero,392(r2)
    e99c:	10006315 	stw	zero,396(r2)
    e9a0:	883fde26 	beq	r17,zero,e91c <__alt_mem_onchip_memory2_0+0xfc00a91c>
    e9a4:	18c9883a 	add	r4,r3,r3
    e9a8:	2109883a 	add	r4,r4,r4
    e9ac:	1109883a 	add	r4,r2,r4
    e9b0:	21802215 	stw	r6,136(r4)
    e9b4:	01800044 	movi	r6,1
    e9b8:	12406217 	ldw	r9,392(r2)
    e9bc:	30cc983a 	sll	r6,r6,r3
    e9c0:	4992b03a 	or	r9,r9,r6
    e9c4:	12406215 	stw	r9,392(r2)
    e9c8:	21c04215 	stw	r7,264(r4)
    e9cc:	01000084 	movi	r4,2
    e9d0:	893fd21e 	bne	r17,r4,e91c <__alt_mem_onchip_memory2_0+0xfc00a91c>
    e9d4:	11006317 	ldw	r4,396(r2)
    e9d8:	218cb03a 	or	r6,r4,r6
    e9dc:	11806315 	stw	r6,396(r2)
    e9e0:	003fce06 	br	e91c <__alt_mem_onchip_memory2_0+0xfc00a91c>
    e9e4:	18805304 	addi	r2,r3,332
    e9e8:	18805215 	stw	r2,328(r3)
    e9ec:	003fc606 	br	e908 <__alt_mem_onchip_memory2_0+0xfc00a908>
    e9f0:	00bfffc4 	movi	r2,-1
    e9f4:	003fd006 	br	e938 <__alt_mem_onchip_memory2_0+0xfc00a938>

0000e9f8 <__call_exitprocs>:
    e9f8:	defff504 	addi	sp,sp,-44
    e9fc:	df000915 	stw	fp,36(sp)
    ea00:	dd400615 	stw	r21,24(sp)
    ea04:	dc800315 	stw	r18,12(sp)
    ea08:	dfc00a15 	stw	ra,40(sp)
    ea0c:	ddc00815 	stw	r23,32(sp)
    ea10:	dd800715 	stw	r22,28(sp)
    ea14:	dd000515 	stw	r20,20(sp)
    ea18:	dcc00415 	stw	r19,16(sp)
    ea1c:	dc400215 	stw	r17,8(sp)
    ea20:	dc000115 	stw	r16,4(sp)
    ea24:	d9000015 	stw	r4,0(sp)
    ea28:	2839883a 	mov	fp,r5
    ea2c:	04800044 	movi	r18,1
    ea30:	057fffc4 	movi	r21,-1
    ea34:	00800074 	movhi	r2,1
    ea38:	1082d804 	addi	r2,r2,2912
    ea3c:	12000017 	ldw	r8,0(r2)
    ea40:	45005217 	ldw	r20,328(r8)
    ea44:	44c05204 	addi	r19,r8,328
    ea48:	a0001c26 	beq	r20,zero,eabc <__call_exitprocs+0xc4>
    ea4c:	a0800117 	ldw	r2,4(r20)
    ea50:	15ffffc4 	addi	r23,r2,-1
    ea54:	b8000d16 	blt	r23,zero,ea8c <__call_exitprocs+0x94>
    ea58:	14000044 	addi	r16,r2,1
    ea5c:	8421883a 	add	r16,r16,r16
    ea60:	8421883a 	add	r16,r16,r16
    ea64:	84402004 	addi	r17,r16,128
    ea68:	a463883a 	add	r17,r20,r17
    ea6c:	a421883a 	add	r16,r20,r16
    ea70:	e0001e26 	beq	fp,zero,eaec <__call_exitprocs+0xf4>
    ea74:	80804017 	ldw	r2,256(r16)
    ea78:	e0801c26 	beq	fp,r2,eaec <__call_exitprocs+0xf4>
    ea7c:	bdffffc4 	addi	r23,r23,-1
    ea80:	843fff04 	addi	r16,r16,-4
    ea84:	8c7fff04 	addi	r17,r17,-4
    ea88:	bd7ff91e 	bne	r23,r21,ea70 <__alt_mem_onchip_memory2_0+0xfc00aa70>
    ea8c:	00800034 	movhi	r2,0
    ea90:	10800004 	addi	r2,r2,0
    ea94:	10000926 	beq	r2,zero,eabc <__call_exitprocs+0xc4>
    ea98:	a0800117 	ldw	r2,4(r20)
    ea9c:	1000301e 	bne	r2,zero,eb60 <__call_exitprocs+0x168>
    eaa0:	a0800017 	ldw	r2,0(r20)
    eaa4:	10003226 	beq	r2,zero,eb70 <__call_exitprocs+0x178>
    eaa8:	a009883a 	mov	r4,r20
    eaac:	98800015 	stw	r2,0(r19)
    eab0:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
    eab4:	9d000017 	ldw	r20,0(r19)
    eab8:	a03fe41e 	bne	r20,zero,ea4c <__alt_mem_onchip_memory2_0+0xfc00aa4c>
    eabc:	dfc00a17 	ldw	ra,40(sp)
    eac0:	df000917 	ldw	fp,36(sp)
    eac4:	ddc00817 	ldw	r23,32(sp)
    eac8:	dd800717 	ldw	r22,28(sp)
    eacc:	dd400617 	ldw	r21,24(sp)
    ead0:	dd000517 	ldw	r20,20(sp)
    ead4:	dcc00417 	ldw	r19,16(sp)
    ead8:	dc800317 	ldw	r18,12(sp)
    eadc:	dc400217 	ldw	r17,8(sp)
    eae0:	dc000117 	ldw	r16,4(sp)
    eae4:	dec00b04 	addi	sp,sp,44
    eae8:	f800283a 	ret
    eaec:	a0800117 	ldw	r2,4(r20)
    eaf0:	80c00017 	ldw	r3,0(r16)
    eaf4:	10bfffc4 	addi	r2,r2,-1
    eaf8:	15c01426 	beq	r2,r23,eb4c <__call_exitprocs+0x154>
    eafc:	80000015 	stw	zero,0(r16)
    eb00:	183fde26 	beq	r3,zero,ea7c <__alt_mem_onchip_memory2_0+0xfc00aa7c>
    eb04:	95c8983a 	sll	r4,r18,r23
    eb08:	a0806217 	ldw	r2,392(r20)
    eb0c:	a5800117 	ldw	r22,4(r20)
    eb10:	2084703a 	and	r2,r4,r2
    eb14:	10000b26 	beq	r2,zero,eb44 <__call_exitprocs+0x14c>
    eb18:	a0806317 	ldw	r2,396(r20)
    eb1c:	2088703a 	and	r4,r4,r2
    eb20:	20000c1e 	bne	r4,zero,eb54 <__call_exitprocs+0x15c>
    eb24:	89400017 	ldw	r5,0(r17)
    eb28:	d9000017 	ldw	r4,0(sp)
    eb2c:	183ee83a 	callr	r3
    eb30:	a0800117 	ldw	r2,4(r20)
    eb34:	15bfbf1e 	bne	r2,r22,ea34 <__alt_mem_onchip_memory2_0+0xfc00aa34>
    eb38:	98800017 	ldw	r2,0(r19)
    eb3c:	153fcf26 	beq	r2,r20,ea7c <__alt_mem_onchip_memory2_0+0xfc00aa7c>
    eb40:	003fbc06 	br	ea34 <__alt_mem_onchip_memory2_0+0xfc00aa34>
    eb44:	183ee83a 	callr	r3
    eb48:	003ff906 	br	eb30 <__alt_mem_onchip_memory2_0+0xfc00ab30>
    eb4c:	a5c00115 	stw	r23,4(r20)
    eb50:	003feb06 	br	eb00 <__alt_mem_onchip_memory2_0+0xfc00ab00>
    eb54:	89000017 	ldw	r4,0(r17)
    eb58:	183ee83a 	callr	r3
    eb5c:	003ff406 	br	eb30 <__alt_mem_onchip_memory2_0+0xfc00ab30>
    eb60:	a0800017 	ldw	r2,0(r20)
    eb64:	a027883a 	mov	r19,r20
    eb68:	1029883a 	mov	r20,r2
    eb6c:	003fb606 	br	ea48 <__alt_mem_onchip_memory2_0+0xfc00aa48>
    eb70:	0005883a 	mov	r2,zero
    eb74:	003ffb06 	br	eb64 <__alt_mem_onchip_memory2_0+0xfc00ab64>

0000eb78 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    eb78:	defffd04 	addi	sp,sp,-12
    eb7c:	df000215 	stw	fp,8(sp)
    eb80:	df000204 	addi	fp,sp,8
    eb84:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    eb88:	d0273b45 	stb	zero,-25363(gp)
    eb8c:	e0bfff17 	ldw	r2,-4(fp)
    eb90:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    eb94:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    eb98:	10000226 	beq	r2,zero,eba4 <_exit+0x2c>
    ALT_SIM_FAIL();
    eb9c:	002af070 	cmpltui	zero,zero,43969
    eba0:	00000106 	br	eba8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    eba4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    eba8:	003fff06 	br	eba8 <__alt_mem_onchip_memory2_0+0xfc00aba8>
