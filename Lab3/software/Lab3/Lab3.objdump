
Lab3.elf:     file format elf32-littlenios2
Lab3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000000

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x000004c8 memsz 0x000004c8 flags r-x
    LOAD off    0x000014c8 vaddr 0x020004c8 paddr 0x020005cc align 2**12
         filesz 0x00000104 memsz 0x00000104 flags rw-
    LOAD off    0x000016d0 vaddr 0x020006d0 paddr 0x020006d0 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-
    LOAD off    0x00002000 vaddr 0x04004000 paddr 0x04004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04004000  04004000  00002000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  04004020  04004020  00002020  2**0
                  CONTENTS
  2 .text         00000494  02000000  02000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000034  02000494  02000494  00001494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000104  020004c8  020005cc  000014c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  020006d0  020006d0  000016d0  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  020006e0  020006e0  00002020  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  04004020  04004020  00002020  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000238  00000000  00000000  00002048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00002746  00000000  00000000  00002280  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000ed7  00000000  00000000  000049c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000010e3  00000000  00000000  0000589d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000294  00000000  00000000  00006980  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000b91  00000000  00000000  00006c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000047d  00000000  00000000  000077a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00007c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000000f8  00000000  00000000  00007c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00008d5a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00008d5d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00008d69  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00008d6a  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  00008d6b  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00008d76  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  00008d81  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000e  00000000  00000000  00008d8c  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000001e  00000000  00000000  00008d9a  2**0
                  CONTENTS, READONLY
 27 .jdi          000055bb  00000000  00000000  00008db8  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00053793  00000000  00000000  0000e373  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04004000 l    d  .entry	00000000 .entry
04004020 l    d  .exceptions	00000000 .exceptions
02000000 l    d  .text	00000000 .text
02000494 l    d  .rodata	00000000 .rodata
020004c8 l    d  .rwdata	00000000 .rwdata
020006d0 l    d  .bss	00000000 .bss
020006e0 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
04004020 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab3_bsp//obj/HAL/src/crt0.o
02000038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
020004c8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
02000368 g     F .text	0000002c alt_main
020000c8 g     F .text	00000080 _puts_r
020005cc g       *ABS*	00000000 __flash_rwdata_start
02000394 g     F .text	00000038 alt_putstr
0200048c g     F .text	00000008 altera_nios2_gen2_irq_init
04004000 g     F .entry	0000000c __reset
02000000 g       *ABS*	00000000 __flash_exceptions_start
020006d0 g     O .bss	00000004 errno
020006d8 g     O .bss	00000004 alt_argv
020085a8 g       *ABS*	00000000 _gp
02000148 g     F .text	00000014 puts
04004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
020005bc g     O .rwdata	00000004 _global_impure_ptr
020006e0 g       *ABS*	00000000 __bss_end
02000484 g     F .text	00000004 alt_dcache_flush_all
020005cc g       *ABS*	00000000 __ram_rwdata_end
020003cc g     F .text	00000060 write
020004c8 g       *ABS*	00000000 __ram_rodata_end
020005c4 g     O .rwdata	00000004 jtag_uart_0
020005ac g     O .rwdata	00000004 Output_LED8
020006e0 g       *ABS*	00000000 end
04000000 g       *ABS*	00000000 __alt_stack_pointer
02000450 g     F .text	00000034 altera_avalon_jtag_uart_write
02000000 g     F .text	0000003c _start
0200044c g     F .text	00000004 alt_sys_init
020004c8 g       *ABS*	00000000 __ram_rwdata_start
02000494 g       *ABS*	00000000 __ram_rodata_start
020006e0 g       *ABS*	00000000 __alt_stack_base
02000178 g     F .text	000000b8 __sfvwrite_small_dev
020006d0 g       *ABS*	00000000 __bss_start
0200003c g     F .text	0000008c main
020006d4 g     O .bss	00000004 alt_envp
020005c8 g     O .rwdata	00000004 alt_errno
02000494 g       *ABS*	00000000 __flash_rodata_start
020005b4 g     O .rwdata	00000004 Input_Key1
020005b0 g     O .rwdata	00000004 Output_LEDR
0200042c g     F .text	00000020 alt_irq_init
02000230 g     F .text	00000058 _write_r
020005c0 g     O .rwdata	00000004 _impure_ptr
020006dc g     O .bss	00000004 alt_argc
04004020 g       *ABS*	00000000 __ram_exceptions_start
00000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
020005cc g       *ABS*	00000000 _edata
020006e0 g       *ABS*	00000000 _end
04004020 g       *ABS*	00000000 __ram_exceptions_end
020005b8 g     O .rwdata	00000004 GPIO
020005a8 g     O .rwdata	00000004 Input_MSB
04000000 g       *ABS*	00000000 __alt_data_end
0400400c g       .entry	00000000 _exit
0200015c g     F .text	0000001c strlen
02000488 g     F .text	00000004 alt_icache_flush_all
02000288 g     F .text	000000e0 alt_load



Disassembly of section .entry:

04004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4004000:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 4004004:	08400014 	ori	at,at,0
    jmp r1
 4004008:	0800683a 	jmp	at

0400400c <_exit>:
	...

Disassembly of section .text:

02000000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000000:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 2000004:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000008:	06808034 	movhi	gp,512
    ori gp, gp, %lo(_gp)
 200000c:	d6a16a14 	ori	gp,gp,34216
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000010:	00808034 	movhi	r2,512
    ori r2, r2, %lo(__bss_start)
 2000014:	1081b414 	ori	r2,r2,1744

    movhi r3, %hi(__bss_end)
 2000018:	00c08034 	movhi	r3,512
    ori r3, r3, %lo(__bss_end)
 200001c:	18c1b814 	ori	r3,r3,1760

    beq r2, r3, 1f
 2000020:	10c00326 	beq	r2,r3,2000030 <_start+0x30>

0:
    stw zero, (r2)
 2000024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 200002c:	10fffd36 	bltu	r2,r3,2000024 <__ram_exceptions_end+0xfdffc004>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2000030:	20002880 	call	2000288 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000034:	20003680 	call	2000368 <alt_main>

02000038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000038:	003fff06 	br	2000038 <__ram_exceptions_end+0xfdffc018>

0200003c <main>:
volatile int * Output_LED8 = (int *) 0x4009000; // LED[8]
volatile int * Input_MSB = (int *) 0x4009020; // MSB

int main()
{
	puts("Running NIOS II int main()\n");
 200003c:	01008034 	movhi	r4,512
volatile int * Output_LEDR = (int *) 0x4009040; // LED[7:0]
volatile int * Output_LED8 = (int *) 0x4009000; // LED[8]
volatile int * Input_MSB = (int *) 0x4009020; // MSB

int main()
{
 2000040:	defffe04 	addi	sp,sp,-8
	puts("Running NIOS II int main()\n");
 2000044:	21012504 	addi	r4,r4,1172
volatile int * Output_LEDR = (int *) 0x4009040; // LED[7:0]
volatile int * Output_LED8 = (int *) 0x4009000; // LED[8]
volatile int * Input_MSB = (int *) 0x4009020; // MSB

int main()
{
 2000048:	dfc00115 	stw	ra,4(sp)
 200004c:	dc000015 	stw	r16,0(sp)
	puts("Running NIOS II int main()\n");
 2000050:	20001480 	call	2000148 <puts>

	int LED_counter = 1;
	int prev_MSB_flag;
	prev_MSB_flag = *(Input_MSB);
 2000054:	d0a00017 	ldw	r2,-32768(gp)
	int prev_Key1;
	prev_Key1 = 1;
	int output_LED = 1;


	alt_putstr("Running NIOS II\n");
 2000058:	01008034 	movhi	r4,512
 200005c:	21012c04 	addi	r4,r4,1200
{
	puts("Running NIOS II int main()\n");

	int LED_counter = 1;
	int prev_MSB_flag;
	prev_MSB_flag = *(Input_MSB);
 2000060:	14000017 	ldw	r16,0(r2)
	int prev_Key1;
	prev_Key1 = 1;
	int output_LED = 1;


	alt_putstr("Running NIOS II\n");
 2000064:	20003940 	call	2000394 <alt_putstr>

	while(1)
	{
		// MSB checking
		if ( (!prev_MSB_flag) && *(Input_MSB) && 0x01)// previous MSB state && current MSB state && 1
 2000068:	d1600017 	ldw	r5,-32768(gp)
		{
			*(GPIO) = 0x01;
 200006c:	d1a00417 	ldw	r6,-32752(gp)
			*(Output_LEDR) = LED_counter++;
 2000070:	d2200217 	ldw	r8,-32760(gp)
		}
		prev_MSB_flag = *(Input_MSB);
		//*(Output_LEDR) = LED_counter; // transfer the value to LEDR 1

		// KEY[1] checking
		if ( (!prev_Key1) && *(Input_Key1))// previous Key[1] state && current Key[1] state
 2000074:	d1200317 	ldw	r4,-32756(gp)
		{
			*(Output_LED8) = *(Output_LED8) + 1;
 2000078:	d1e00117 	ldw	r7,-32764(gp)

	int LED_counter = 1;
	int prev_MSB_flag;
	prev_MSB_flag = *(Input_MSB);
	int prev_Key1;
	prev_Key1 = 1;
 200007c:	00800044 	movi	r2,1

int main()
{
	puts("Running NIOS II int main()\n");

	int LED_counter = 1;
 2000080:	1007883a 	mov	r3,r2
	while(1)
	{
		// MSB checking
		if ( (!prev_MSB_flag) && *(Input_MSB) && 0x01)// previous MSB state && current MSB state && 1
		{
			*(GPIO) = 0x01;
 2000084:	1013883a 	mov	r9,r2
	alt_putstr("Running NIOS II\n");

	while(1)
	{
		// MSB checking
		if ( (!prev_MSB_flag) && *(Input_MSB) && 0x01)// previous MSB state && current MSB state && 1
 2000088:	8000061e 	bne	r16,zero,20000a4 <main+0x68>
 200008c:	2a800017 	ldw	r10,0(r5)
 2000090:	50000426 	beq	r10,zero,20000a4 <main+0x68>
		{
			*(GPIO) = 0x01;
 2000094:	32400015 	stw	r9,0(r6)
			*(Output_LEDR) = LED_counter++;
 2000098:	40c00015 	stw	r3,0(r8)
			*(GPIO) = 0x00;
 200009c:	30000015 	stw	zero,0(r6)
	{
		// MSB checking
		if ( (!prev_MSB_flag) && *(Input_MSB) && 0x01)// previous MSB state && current MSB state && 1
		{
			*(GPIO) = 0x01;
			*(Output_LEDR) = LED_counter++;
 20000a0:	18c00044 	addi	r3,r3,1
			*(GPIO) = 0x00;
		}
		prev_MSB_flag = *(Input_MSB);
 20000a4:	2c000017 	ldw	r16,0(r5)
		//*(Output_LEDR) = LED_counter; // transfer the value to LEDR 1

		// KEY[1] checking
		if ( (!prev_Key1) && *(Input_Key1))// previous Key[1] state && current Key[1] state
 20000a8:	1000051e 	bne	r2,zero,20000c0 <main+0x84>
 20000ac:	20800017 	ldw	r2,0(r4)
 20000b0:	10000326 	beq	r2,zero,20000c0 <main+0x84>
		{
			*(Output_LED8) = *(Output_LED8) + 1;
 20000b4:	38800017 	ldw	r2,0(r7)
 20000b8:	10800044 	addi	r2,r2,1
 20000bc:	38800015 	stw	r2,0(r7)
		}
		prev_Key1 = *(Input_Key1);
 20000c0:	20800017 	ldw	r2,0(r4)
	}
 20000c4:	003ff006 	br	2000088 <__ram_exceptions_end+0xfdffc068>

020000c8 <_puts_r>:
 20000c8:	defffd04 	addi	sp,sp,-12
 20000cc:	dc000015 	stw	r16,0(sp)
 20000d0:	2021883a 	mov	r16,r4
 20000d4:	2809883a 	mov	r4,r5
 20000d8:	dfc00215 	stw	ra,8(sp)
 20000dc:	dc400115 	stw	r17,4(sp)
 20000e0:	2823883a 	mov	r17,r5
 20000e4:	200015c0 	call	200015c <strlen>
 20000e8:	81400217 	ldw	r5,8(r16)
 20000ec:	01008034 	movhi	r4,512
 20000f0:	21005e04 	addi	r4,r4,376
 20000f4:	29000115 	stw	r4,4(r5)
 20000f8:	100f883a 	mov	r7,r2
 20000fc:	880d883a 	mov	r6,r17
 2000100:	8009883a 	mov	r4,r16
 2000104:	20001780 	call	2000178 <__sfvwrite_small_dev>
 2000108:	00ffffc4 	movi	r3,-1
 200010c:	10c00926 	beq	r2,r3,2000134 <_puts_r+0x6c>
 2000110:	81400217 	ldw	r5,8(r16)
 2000114:	01808034 	movhi	r6,512
 2000118:	01c00044 	movi	r7,1
 200011c:	28800117 	ldw	r2,4(r5)
 2000120:	31813104 	addi	r6,r6,1220
 2000124:	8009883a 	mov	r4,r16
 2000128:	103ee83a 	callr	r2
 200012c:	10bfffe0 	cmpeqi	r2,r2,-1
 2000130:	0085c83a 	sub	r2,zero,r2
 2000134:	dfc00217 	ldw	ra,8(sp)
 2000138:	dc400117 	ldw	r17,4(sp)
 200013c:	dc000017 	ldw	r16,0(sp)
 2000140:	dec00304 	addi	sp,sp,12
 2000144:	f800283a 	ret

02000148 <puts>:
 2000148:	00808034 	movhi	r2,512
 200014c:	10817004 	addi	r2,r2,1472
 2000150:	200b883a 	mov	r5,r4
 2000154:	11000017 	ldw	r4,0(r2)
 2000158:	20000c81 	jmpi	20000c8 <_puts_r>

0200015c <strlen>:
 200015c:	2005883a 	mov	r2,r4
 2000160:	10c00007 	ldb	r3,0(r2)
 2000164:	18000226 	beq	r3,zero,2000170 <strlen+0x14>
 2000168:	10800044 	addi	r2,r2,1
 200016c:	003ffc06 	br	2000160 <__ram_exceptions_end+0xfdffc140>
 2000170:	1105c83a 	sub	r2,r2,r4
 2000174:	f800283a 	ret

02000178 <__sfvwrite_small_dev>:
 2000178:	2880000b 	ldhu	r2,0(r5)
 200017c:	1080020c 	andi	r2,r2,8
 2000180:	10002126 	beq	r2,zero,2000208 <__sfvwrite_small_dev+0x90>
 2000184:	2880008f 	ldh	r2,2(r5)
 2000188:	defffa04 	addi	sp,sp,-24
 200018c:	dc000015 	stw	r16,0(sp)
 2000190:	dfc00515 	stw	ra,20(sp)
 2000194:	dd000415 	stw	r20,16(sp)
 2000198:	dcc00315 	stw	r19,12(sp)
 200019c:	dc800215 	stw	r18,8(sp)
 20001a0:	dc400115 	stw	r17,4(sp)
 20001a4:	2821883a 	mov	r16,r5
 20001a8:	10001216 	blt	r2,zero,20001f4 <__sfvwrite_small_dev+0x7c>
 20001ac:	2027883a 	mov	r19,r4
 20001b0:	3025883a 	mov	r18,r6
 20001b4:	3823883a 	mov	r17,r7
 20001b8:	05010004 	movi	r20,1024
 20001bc:	04400b0e 	bge	zero,r17,20001ec <__sfvwrite_small_dev+0x74>
 20001c0:	880f883a 	mov	r7,r17
 20001c4:	a440010e 	bge	r20,r17,20001cc <__sfvwrite_small_dev+0x54>
 20001c8:	01c10004 	movi	r7,1024
 20001cc:	8140008f 	ldh	r5,2(r16)
 20001d0:	900d883a 	mov	r6,r18
 20001d4:	9809883a 	mov	r4,r19
 20001d8:	20002300 	call	2000230 <_write_r>
 20001dc:	0080050e 	bge	zero,r2,20001f4 <__sfvwrite_small_dev+0x7c>
 20001e0:	88a3c83a 	sub	r17,r17,r2
 20001e4:	90a5883a 	add	r18,r18,r2
 20001e8:	003ff406 	br	20001bc <__ram_exceptions_end+0xfdffc19c>
 20001ec:	0005883a 	mov	r2,zero
 20001f0:	00000706 	br	2000210 <__sfvwrite_small_dev+0x98>
 20001f4:	8080000b 	ldhu	r2,0(r16)
 20001f8:	10801014 	ori	r2,r2,64
 20001fc:	8080000d 	sth	r2,0(r16)
 2000200:	00bfffc4 	movi	r2,-1
 2000204:	00000206 	br	2000210 <__sfvwrite_small_dev+0x98>
 2000208:	00bfffc4 	movi	r2,-1
 200020c:	f800283a 	ret
 2000210:	dfc00517 	ldw	ra,20(sp)
 2000214:	dd000417 	ldw	r20,16(sp)
 2000218:	dcc00317 	ldw	r19,12(sp)
 200021c:	dc800217 	ldw	r18,8(sp)
 2000220:	dc400117 	ldw	r17,4(sp)
 2000224:	dc000017 	ldw	r16,0(sp)
 2000228:	dec00604 	addi	sp,sp,24
 200022c:	f800283a 	ret

02000230 <_write_r>:
 2000230:	defffd04 	addi	sp,sp,-12
 2000234:	dc000015 	stw	r16,0(sp)
 2000238:	04008034 	movhi	r16,512
 200023c:	dc400115 	stw	r17,4(sp)
 2000240:	8401b404 	addi	r16,r16,1744
 2000244:	2023883a 	mov	r17,r4
 2000248:	2809883a 	mov	r4,r5
 200024c:	300b883a 	mov	r5,r6
 2000250:	380d883a 	mov	r6,r7
 2000254:	dfc00215 	stw	ra,8(sp)
 2000258:	80000015 	stw	zero,0(r16)
 200025c:	20003cc0 	call	20003cc <write>
 2000260:	00ffffc4 	movi	r3,-1
 2000264:	10c0031e 	bne	r2,r3,2000274 <_write_r+0x44>
 2000268:	80c00017 	ldw	r3,0(r16)
 200026c:	18000126 	beq	r3,zero,2000274 <_write_r+0x44>
 2000270:	88c00015 	stw	r3,0(r17)
 2000274:	dfc00217 	ldw	ra,8(sp)
 2000278:	dc400117 	ldw	r17,4(sp)
 200027c:	dc000017 	ldw	r16,0(sp)
 2000280:	dec00304 	addi	sp,sp,12
 2000284:	f800283a 	ret

02000288 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2000288:	deffff04 	addi	sp,sp,-4
 200028c:	01008034 	movhi	r4,512
 2000290:	01408034 	movhi	r5,512
 2000294:	dfc00015 	stw	ra,0(sp)
 2000298:	21013204 	addi	r4,r4,1224
 200029c:	29417304 	addi	r5,r5,1484

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 20002a0:	2140061e 	bne	r4,r5,20002bc <alt_load+0x34>
 20002a4:	01010034 	movhi	r4,1024
 20002a8:	01408034 	movhi	r5,512
 20002ac:	21100804 	addi	r4,r4,16416
 20002b0:	29400004 	addi	r5,r5,0
 20002b4:	2140121e 	bne	r4,r5,2000300 <alt_load+0x78>
 20002b8:	00000b06 	br	20002e8 <alt_load+0x60>
 20002bc:	00c08034 	movhi	r3,512
 20002c0:	18c17304 	addi	r3,r3,1484
 20002c4:	1907c83a 	sub	r3,r3,r4
 20002c8:	0005883a 	mov	r2,zero
  {
    while( to != end )
 20002cc:	10fff526 	beq	r2,r3,20002a4 <__ram_exceptions_end+0xfdffc284>
    {
      *to++ = *from++;
 20002d0:	114f883a 	add	r7,r2,r5
 20002d4:	39c00017 	ldw	r7,0(r7)
 20002d8:	110d883a 	add	r6,r2,r4
 20002dc:	10800104 	addi	r2,r2,4
 20002e0:	31c00015 	stw	r7,0(r6)
 20002e4:	003ff906 	br	20002cc <__ram_exceptions_end+0xfdffc2ac>
 20002e8:	01008034 	movhi	r4,512
 20002ec:	01408034 	movhi	r5,512
 20002f0:	21012504 	addi	r4,r4,1172
 20002f4:	29412504 	addi	r5,r5,1172

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 20002f8:	2140101e 	bne	r4,r5,200033c <alt_load+0xb4>
 20002fc:	00000b06 	br	200032c <alt_load+0xa4>
 2000300:	00c10034 	movhi	r3,1024
 2000304:	18d00804 	addi	r3,r3,16416
 2000308:	1907c83a 	sub	r3,r3,r4
 200030c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 2000310:	10fff526 	beq	r2,r3,20002e8 <__ram_exceptions_end+0xfdffc2c8>
    {
      *to++ = *from++;
 2000314:	114f883a 	add	r7,r2,r5
 2000318:	39c00017 	ldw	r7,0(r7)
 200031c:	110d883a 	add	r6,r2,r4
 2000320:	10800104 	addi	r2,r2,4
 2000324:	31c00015 	stw	r7,0(r6)
 2000328:	003ff906 	br	2000310 <__ram_exceptions_end+0xfdffc2f0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 200032c:	20004840 	call	2000484 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 2000330:	dfc00017 	ldw	ra,0(sp)
 2000334:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 2000338:	20004881 	jmpi	2000488 <alt_icache_flush_all>
 200033c:	00c08034 	movhi	r3,512
 2000340:	18c13204 	addi	r3,r3,1224
 2000344:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 2000348:	0005883a 	mov	r2,zero
  {
    while( to != end )
 200034c:	18bff726 	beq	r3,r2,200032c <__ram_exceptions_end+0xfdffc30c>
    {
      *to++ = *from++;
 2000350:	114f883a 	add	r7,r2,r5
 2000354:	39c00017 	ldw	r7,0(r7)
 2000358:	110d883a 	add	r6,r2,r4
 200035c:	10800104 	addi	r2,r2,4
 2000360:	31c00015 	stw	r7,0(r6)
 2000364:	003ff906 	br	200034c <__ram_exceptions_end+0xfdffc32c>

02000368 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2000368:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 200036c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2000370:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2000374:	200042c0 	call	200042c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2000378:	200044c0 	call	200044c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 200037c:	d1a04b17 	ldw	r6,-32468(gp)
 2000380:	d1604c17 	ldw	r5,-32464(gp)
 2000384:	d1204d17 	ldw	r4,-32460(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 2000388:	dfc00017 	ldw	ra,0(sp)
 200038c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 2000390:	200003c1 	jmpi	200003c <main>

02000394 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 2000394:	defffe04 	addi	sp,sp,-8
 2000398:	dc000015 	stw	r16,0(sp)
 200039c:	dfc00115 	stw	ra,4(sp)
 20003a0:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 20003a4:	200015c0 	call	200015c <strlen>
 20003a8:	01008034 	movhi	r4,512
 20003ac:	000f883a 	mov	r7,zero
 20003b0:	100d883a 	mov	r6,r2
 20003b4:	800b883a 	mov	r5,r16
 20003b8:	21017104 	addi	r4,r4,1476
#else
    return fputs(str, stdout);
#endif
#endif
}
 20003bc:	dfc00117 	ldw	ra,4(sp)
 20003c0:	dc000017 	ldw	r16,0(sp)
 20003c4:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 20003c8:	20004501 	jmpi	2000450 <altera_avalon_jtag_uart_write>

020003cc <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 20003cc:	00800044 	movi	r2,1
 20003d0:	20800226 	beq	r4,r2,20003dc <write+0x10>
 20003d4:	00800084 	movi	r2,2
 20003d8:	2080041e 	bne	r4,r2,20003ec <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 20003dc:	01008034 	movhi	r4,512
 20003e0:	000f883a 	mov	r7,zero
 20003e4:	21017104 	addi	r4,r4,1476
 20003e8:	20004501 	jmpi	2000450 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 20003ec:	d0a00817 	ldw	r2,-32736(gp)
 20003f0:	10000926 	beq	r2,zero,2000418 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 20003f4:	deffff04 	addi	sp,sp,-4
 20003f8:	dfc00015 	stw	ra,0(sp)
 20003fc:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 2000400:	00c01444 	movi	r3,81
 2000404:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 2000408:	00bfffc4 	movi	r2,-1
 200040c:	dfc00017 	ldw	ra,0(sp)
 2000410:	dec00104 	addi	sp,sp,4
 2000414:	f800283a 	ret
 2000418:	d0a04a04 	addi	r2,gp,-32472
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 200041c:	00c01444 	movi	r3,81
 2000420:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 2000424:	00bfffc4 	movi	r2,-1
 2000428:	f800283a 	ret

0200042c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 200042c:	deffff04 	addi	sp,sp,-4
 2000430:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 2000434:	200048c0 	call	200048c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2000438:	00800044 	movi	r2,1
 200043c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2000440:	dfc00017 	ldw	ra,0(sp)
 2000444:	dec00104 	addi	sp,sp,4
 2000448:	f800283a 	ret

0200044c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 200044c:	f800283a 	ret

02000450 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 2000450:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2000454:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 2000458:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 200045c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 2000460:	2980072e 	bgeu	r5,r6,2000480 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 2000464:	38c00037 	ldwio	r3,0(r7)
 2000468:	18ffffec 	andhi	r3,r3,65535
 200046c:	183ffc26 	beq	r3,zero,2000460 <__ram_exceptions_end+0xfdffc440>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 2000470:	28c00007 	ldb	r3,0(r5)
 2000474:	20c00035 	stwio	r3,0(r4)
 2000478:	29400044 	addi	r5,r5,1
 200047c:	003ff806 	br	2000460 <__ram_exceptions_end+0xfdffc440>

  return count;
}
 2000480:	f800283a 	ret

02000484 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 2000484:	f800283a 	ret

02000488 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2000488:	f800283a 	ret

0200048c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 200048c:	000170fa 	wrctl	ienable,zero
 2000490:	f800283a 	ret
