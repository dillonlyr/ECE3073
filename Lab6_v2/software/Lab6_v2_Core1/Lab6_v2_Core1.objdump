
Lab6_v2_Core1.elf:     file format elf32-littlenios2
Lab6_v2_Core1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04100114

Program Header:
    LOAD off    0x00001020 vaddr 0x08010020 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001040 vaddr 0x08010040 paddr 0x04100000 align 2**12
         filesz 0x00000114 memsz 0x00000114 flags r-x
    LOAD off    0x00002114 vaddr 0x04100114 paddr 0x04100114 align 2**12
         filesz 0x000015cc memsz 0x000015cc flags r-x
    LOAD off    0x000036e0 vaddr 0x041016e0 paddr 0x04101804 align 2**12
         filesz 0x00000124 memsz 0x00000124 flags rw-
    LOAD off    0x00003928 vaddr 0x04101928 paddr 0x04101928 align 2**12
         filesz 0x00000000 memsz 0x00000020 flags rw-
    LOAD off    0x00004000 vaddr 0x08010000 paddr 0x08010000 align 2**12
         filesz 0x00000010 memsz 0x00000010 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000010  08010000  08010000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .entry        00000020  08010020  00000000  00001020  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .exceptions   00000114  08010040  04100000  00001040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         000014e0  04100114  04100114  00002114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000000ec  041015f4  041015f4  000035f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .rwdata       00000124  041016e0  04101804  000036e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  6 .bss          00000020  04101928  04101928  00003928  2**2
                  ALLOC, SMALL_DATA
  7 .SDRAM_shared 00000000  04101948  04101948  00004010  2**0
                  CONTENTS
  8 .Core1_RAM    00000000  08010154  08010154  00004010  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000420  00000000  00000000  00004038  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00006352  00000000  00000000  00004458  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000230b  00000000  00000000  0000a7aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000254e  00000000  00000000  0000cab5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000006f0  00000000  00000000  0000f004  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001554  00000000  00000000  0000f6f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00001c68  00000000  00000000  00010c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000030  00000000  00000000  000128b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000330  00000000  00000000  000128e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  000142ca  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000b  00000000  00000000  000142cd  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000142d8  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000142d9  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000f  00000000  00000000  000142da  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000f  00000000  00000000  000142e9  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000f  00000000  00000000  000142f8  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000010  00000000  00000000  00014307  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000027  00000000  00000000  00014317  2**0
                  CONTENTS, READONLY
 28 .jdi          0000ac90  00000000  00000000  0001433e  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00091b6c  00000000  00000000  0001efce  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08010000 l    d  .reset	00000000 .reset
08010020 l    d  .entry	00000000 .entry
08010040 l    d  .exceptions	00000000 .exceptions
04100114 l    d  .text	00000000 .text
041015f4 l    d  .rodata	00000000 .rodata
041016e0 l    d  .rwdata	00000000 .rwdata
04101928 l    d  .bss	00000000 .bss
04101948 l    d  .SDRAM_shared	00000000 .SDRAM_shared
08010154 l    d  .Core1_RAM	00000000 .Core1_RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 exception.c
08010054 l       .exceptions	00000000 SKIP_EA_DEC
00000000 l    df *ABS*	00000000 ../Lab6_v2_Core1_bsp//obj/HAL/src/crt0.o
0410015c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
04101930 l     O .bss	00000008 _randbits
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
041009bc l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
041016e0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
041017c0 l     O .rwdata	00000010 mutex
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 memcmp.c
0410087c g     F .text	0000001c putchar
04101264 g     F .text	0000002c alt_main
04100898 g     F .text	00000080 _puts_r
04101804 g       *ABS*	00000000 __flash_rwdata_start
04100828 g     F .text	0000004c printf
04101400 g     F .text	00000028 altera_avalon_mutex_trylock
04101290 g     F .text	00000038 alt_putstr
04101584 g     F .text	00000008 altera_nios2_gen2_irq_init
08010020 g     F .entry	0000001c __reset
04101448 g     F .text	00000028 altera_avalon_mutex_is_mine
04100000 g       *ABS*	00000000 __flash_exceptions_start
04101938 g     O .bss	00000004 errno
04101940 g     O .bss	00000004 alt_argv
041097d0 g       *ABS*	00000000 _gp
04100874 g     F .text	00000008 _putchar_r
04101504 g     F .text	00000074 alt_find_dev
04100918 g     F .text	00000014 puts
041007ec g     F .text	0000003c _printf_r
04100730 g     F .text	00000064 .hidden __udivsi3
0410158c g     F .text	00000038 alt_icache_flush
08010000 g       *ABS*	00000000 __alt_mem_Core1_RAM
041003b8 g     F .text	0000009c print_matrix_w_addresses
041017dc g     O .rwdata	00000004 core1_rx
041017e4 g     O .rwdata	00000004 us_counter
04101470 g     F .text	00000010 altera_avalon_mutex_first_lock
041017ec g     O .rwdata	00000004 _global_impure_ptr
04101948 g       *ABS*	00000000 __bss_end
041017d8 g     O .rwdata	00000004 core1_rx_irq
041017f4 g     O .rwdata	00000004 Core1_JTAG_UART
0410138c g     F .text	0000004c altera_avalon_mutex_open
04101480 g     F .text	00000018 alt_dcache_flush_all
04000000 g       *ABS*	00000000 __alt_mem_SDRAM_shared
04101804 g       *ABS*	00000000 __ram_rwdata_end
041012c8 g     F .text	00000060 write
04101074 g     F .text	00000058 _putc_r
041017f8 g     O .rwdata	00000008 alt_mutex_list
041016e0 g       *ABS*	00000000 __ram_rodata_end
04100794 g     F .text	00000058 .hidden __umodsi3
0410192c g     O .bss	00000004 mutex
04101948 g       *ABS*	00000000 end
041017d4 g     O .rwdata	00000004 core1_rx_edge
041017e8 g     O .rwdata	00000004 switches
04200000 g       *ABS*	00000000 __alt_stack_pointer
04101358 g     F .text	00000034 altera_avalon_jtag_uart_write
04100a28 g     F .text	00000524 ___vfprintf_internal_r
04100114 g     F .text	0000004c _start
04100940 g     F .text	00000060 rand
04101348 g     F .text	00000010 alt_sys_init
04101428 g     F .text	00000020 altera_avalon_mutex_unlock
041016e0 g       *ABS*	00000000 __ram_rwdata_start
041015f4 g       *ABS*	00000000 __ram_rodata_start
041015c4 g     F .text	00000030 memcmp
04101948 g       *ABS*	00000000 __alt_stack_base
08010040 g     F .exceptions	00000114 the_exception
04101498 g     F .text	0000006c alt_dev_llist_insert
04100f68 g     F .text	000000b8 __sfvwrite_small_dev
04101928 g       *ABS*	00000000 __bss_start
04100454 g     F .text	000001e4 main
0410193c g     O .bss	00000004 alt_envp
0410092c g     F .text	00000014 srand
041013dc g     F .text	00000024 altera_avalon_mutex_lock
04101800 g     O .rwdata	00000004 alt_errno
04101020 g     F .text	00000054 putc
04100638 g     F .text	00000084 .hidden __divsi3
041015f4 g       *ABS*	00000000 __flash_rodata_start
04100160 g     F .text	0000004c interrupt_handler
04101328 g     F .text	00000020 alt_irq_init
04101928 g     O .bss	00000004 core2_ready
041010cc g     F .text	00000058 _write_r
041017e0 g     O .rwdata	00000004 core1_tx
041017f0 g     O .rwdata	00000004 _impure_ptr
04101944 g     O .bss	00000004 alt_argc
08010040 g       *ABS*	00000000 __ram_exceptions_start
041001ac g     F .text	00000090 matrix_rng
04101804 g       *ABS*	00000000 _edata
04101948 g       *ABS*	00000000 _end
08010154 g       *ABS*	00000000 __ram_exceptions_end
08010000 g     F .reset	00000010 the_reset
041006bc g     F .text	00000074 .hidden __modsi3
04200000 g       *ABS*	00000000 __alt_data_end
041017d0 g     O .rwdata	00000004 shared_N
0410023c g     F .text	000000e4 matrix_partial_multiply
0801003c g       .entry	00000000 _exit
04101124 g     F .text	00000060 .hidden __muldi3
041009a0 g     F .text	0000001c strlen
04101578 g     F .text	0000000c alt_icache_flush_all
04100f4c g     F .text	0000001c __vfprintf_internal
041013d8 g     F .text	00000004 altera_avalon_mutex_close
04101184 g     F .text	000000e0 alt_load
04100320 g     F .text	00000098 print_matrix



Disassembly of section .reset:

08010000 <the_reset>:
 8010000:	00810434 	movhi	r2,1040
 8010004:	10811504 	addi	r2,r2,1108
 8010008:	1000683a 	jmp	r2
 801000c:	f800283a 	ret

Disassembly of section .entry:

08010020 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8010020:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8010024:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8010028:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 801002c:	00bffd16 	blt	zero,r2,8010024 <__ram_exceptions_end+0xfffffed0>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8010030:	00410434 	movhi	at,1040
    ori r1, r1, %lo(_start)
 8010034:	08404514 	ori	at,at,276
    jmp r1
 8010038:	0800683a 	jmp	at

0801003c <_exit>:
 801003c:	00000000 	call	0 <__alt_mem_SDRAM_shared-0x4000000>

Disassembly of section .exceptions:

08010040 <the_exception>:
 8010040:	deffe004 	addi	sp,sp,-128
 8010044:	de001815 	stw	et,96(sp)
 8010048:	0031313a 	rdctl	et,ipending
 801004c:	c0000126 	beq	et,zero,8010054 <SKIP_EA_DEC>
 8010050:	ef7fff04 	addi	ea,ea,-4

08010054 <SKIP_EA_DEC>:
 8010054:	d8400115 	stw	at,4(sp)
 8010058:	d8800215 	stw	r2,8(sp)
 801005c:	d8c00315 	stw	r3,12(sp)
 8010060:	d9000415 	stw	r4,16(sp)
 8010064:	d9400515 	stw	r5,20(sp)
 8010068:	d9800615 	stw	r6,24(sp)
 801006c:	d9c00715 	stw	r7,28(sp)
 8010070:	da000815 	stw	r8,32(sp)
 8010074:	da400915 	stw	r9,36(sp)
 8010078:	da800a15 	stw	r10,40(sp)
 801007c:	dac00b15 	stw	r11,44(sp)
 8010080:	db000c15 	stw	r12,48(sp)
 8010084:	db400d15 	stw	r13,52(sp)
 8010088:	db800e15 	stw	r14,56(sp)
 801008c:	dbc00f15 	stw	r15,60(sp)
 8010090:	dc001015 	stw	r16,64(sp)
 8010094:	dc401115 	stw	r17,68(sp)
 8010098:	dc801215 	stw	r18,72(sp)
 801009c:	dcc01315 	stw	r19,76(sp)
 80100a0:	dd001415 	stw	r20,80(sp)
 80100a4:	dd401515 	stw	r21,84(sp)
 80100a8:	dd801615 	stw	r22,88(sp)
 80100ac:	ddc01715 	stw	r23,92(sp)
 80100b0:	de401915 	stw	bt,100(sp)
 80100b4:	de801a15 	stw	gp,104(sp)
 80100b8:	df001c15 	stw	fp,112(sp)
 80100bc:	df401d15 	stw	ea,116(sp)
 80100c0:	df801e15 	stw	sstatus,120(sp)
 80100c4:	dfc01f15 	stw	ra,124(sp)
 80100c8:	df002004 	addi	fp,sp,128
 80100cc:	41001600 	call	4100160 <interrupt_handler>
 80100d0:	d8400117 	ldw	at,4(sp)
 80100d4:	d8800217 	ldw	r2,8(sp)
 80100d8:	d8c00317 	ldw	r3,12(sp)
 80100dc:	d9000417 	ldw	r4,16(sp)
 80100e0:	d9400517 	ldw	r5,20(sp)
 80100e4:	d9800617 	ldw	r6,24(sp)
 80100e8:	d9c00717 	ldw	r7,28(sp)
 80100ec:	da000817 	ldw	r8,32(sp)
 80100f0:	da400917 	ldw	r9,36(sp)
 80100f4:	da800a17 	ldw	r10,40(sp)
 80100f8:	dac00b17 	ldw	r11,44(sp)
 80100fc:	db000c17 	ldw	r12,48(sp)
 8010100:	db400d17 	ldw	r13,52(sp)
 8010104:	db800e17 	ldw	r14,56(sp)
 8010108:	dbc00f17 	ldw	r15,60(sp)
 801010c:	dc001017 	ldw	r16,64(sp)
 8010110:	dc401117 	ldw	r17,68(sp)
 8010114:	dc801217 	ldw	r18,72(sp)
 8010118:	dcc01317 	ldw	r19,76(sp)
 801011c:	dd001417 	ldw	r20,80(sp)
 8010120:	dd401517 	ldw	r21,84(sp)
 8010124:	dd801617 	ldw	r22,88(sp)
 8010128:	ddc01717 	ldw	r23,92(sp)
 801012c:	de001817 	ldw	et,96(sp)
 8010130:	de401917 	ldw	bt,100(sp)
 8010134:	de801a17 	ldw	gp,104(sp)
 8010138:	df001c17 	ldw	fp,112(sp)
 801013c:	df401d17 	ldw	ea,116(sp)
 8010140:	df801e17 	ldw	sstatus,120(sp)
 8010144:	dfc01f17 	ldw	ra,124(sp)
 8010148:	dec02004 	addi	sp,sp,128
 801014c:	ef80083a 	eret
 8010150:	f800283a 	ret

Disassembly of section .text:

04100114 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4100114:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4100118:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 410011c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4100120:	00bffd16 	blt	zero,r2,4100118 <__ram_exceptions_end+0xfc0effc4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4100124:	06c10834 	movhi	sp,1056
    ori sp, sp, %lo(__alt_stack_pointer)
 4100128:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 410012c:	06810434 	movhi	gp,1040
    ori gp, gp, %lo(_gp)
 4100130:	d6a5f414 	ori	gp,gp,38864
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4100134:	00810434 	movhi	r2,1040
    ori r2, r2, %lo(__bss_start)
 4100138:	10864a14 	ori	r2,r2,6440

    movhi r3, %hi(__bss_end)
 410013c:	00c10434 	movhi	r3,1040
    ori r3, r3, %lo(__bss_end)
 4100140:	18c65214 	ori	r3,r3,6472

    beq r2, r3, 1f
 4100144:	10c00326 	beq	r2,r3,4100154 <_start+0x40>

0:
    stw zero, (r2)
 4100148:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 410014c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4100150:	10fffd36 	bltu	r2,r3,4100148 <__ram_exceptions_end+0xfc0efff4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4100154:	41011840 	call	4101184 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4100158:	41012640 	call	4101264 <alt_main>

0410015c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 410015c:	003fff06 	br	410015c <__ram_exceptions_end+0xfc0f0008>

04100160 <interrupt_handler>:
 4100160:	01010434 	movhi	r4,1040
 4100164:	deffff04 	addi	sp,sp,-4
 4100168:	21057d04 	addi	r4,r4,5620
 410016c:	dfc00015 	stw	ra,0(sp)
 4100170:	41012900 	call	4101290 <alt_putstr>
 4100174:	0005313a 	rdctl	r2,ipending
 4100178:	d0e00117 	ldw	r3,-32764(gp)
 410017c:	013fffc4 	movi	r4,-1
 4100180:	1080008c 	andi	r2,r2,2
 4100184:	19000015 	stw	r4,0(r3)
 4100188:	10000526 	beq	r2,zero,41001a0 <interrupt_handler+0x40>
 410018c:	01010434 	movhi	r4,1040
 4100190:	21058404 	addi	r4,r4,5648
 4100194:	41012900 	call	4101290 <alt_putstr>
 4100198:	00800044 	movi	r2,1
 410019c:	d0a05615 	stw	r2,-32424(gp)
 41001a0:	dfc00017 	ldw	ra,0(sp)
 41001a4:	dec00104 	addi	sp,sp,4
 41001a8:	f800283a 	ret

041001ac <matrix_rng>:
  printf("\nSingle core Elapsed time: %u us\n", elapsed_cycles);
}


void matrix_rng(int N, volatile int * matrix_address)
{
 41001ac:	defffa04 	addi	sp,sp,-24
 41001b0:	dd000415 	stw	r20,16(sp)
 41001b4:	dcc00315 	stw	r19,12(sp)
 41001b8:	dc800215 	stw	r18,8(sp)
 41001bc:	dc400115 	stw	r17,4(sp)
 41001c0:	dfc00515 	stw	ra,20(sp)
 41001c4:	dc000015 	stw	r16,0(sp)
 41001c8:	2023883a 	mov	r17,r4
 41001cc:	2829883a 	mov	r20,r5
	for (int i = 0; i < N; i++) {
 41001d0:	0027883a 	mov	r19,zero
 41001d4:	0025883a 	mov	r18,zero
 41001d8:	9440100e 	bge	r18,r17,410021c <matrix_rng+0x70>
 41001dc:	0021883a 	mov	r16,zero
		for (int j = 0; j < N; j++) {
 41001e0:	84400b0e 	bge	r16,r17,4100210 <matrix_rng+0x64>
			int value = rand() % 10;
 41001e4:	41009400 	call	4100940 <rand>
 41001e8:	01400284 	movi	r5,10
 41001ec:	1009883a 	mov	r4,r2
 41001f0:	41006bc0 	call	41006bc <__modsi3>
 41001f4:	84c7883a 	add	r3,r16,r19
 41001f8:	18c7883a 	add	r3,r3,r3
 41001fc:	18c7883a 	add	r3,r3,r3
 4100200:	a0c7883a 	add	r3,r20,r3
			* ( matrix_address + (N * i + j)) = value;
 4100204:	18800015 	stw	r2,0(r3)


void matrix_rng(int N, volatile int * matrix_address)
{
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
 4100208:	84000044 	addi	r16,r16,1
 410020c:	003ff406 	br	41001e0 <__ram_exceptions_end+0xfc0f008c>
}


void matrix_rng(int N, volatile int * matrix_address)
{
	for (int i = 0; i < N; i++) {
 4100210:	94800044 	addi	r18,r18,1
 4100214:	9c67883a 	add	r19,r19,r17
 4100218:	003fef06 	br	41001d8 <__ram_exceptions_end+0xfc0f0084>
		for (int j = 0; j < N; j++) {
			int value = rand() % 10;
			* ( matrix_address + (N * i + j)) = value;
		}
	}
}
 410021c:	dfc00517 	ldw	ra,20(sp)
 4100220:	dd000417 	ldw	r20,16(sp)
 4100224:	dcc00317 	ldw	r19,12(sp)
 4100228:	dc800217 	ldw	r18,8(sp)
 410022c:	dc400117 	ldw	r17,4(sp)
 4100230:	dc000017 	ldw	r16,0(sp)
 4100234:	dec00604 	addi	sp,sp,24
 4100238:	f800283a 	ret

0410023c <matrix_partial_multiply>:

void matrix_partial_multiply(int N, volatile int *A, volatile int *B, volatile int *C, int start_row, int end_row)
{
 410023c:	defffa04 	addi	sp,sp,-24
 4100240:	dac00617 	ldw	r11,24(sp)
 4100244:	dfc00515 	stw	ra,20(sp)
 4100248:	dc000015 	stw	r16,0(sp)
 410024c:	593f383a 	mul	ra,r11,r4
 4100250:	243fff24 	muli	r16,r4,-4
 4100254:	2115883a 	add	r10,r4,r4
 4100258:	dc400115 	stw	r17,4(sp)
 410025c:	dd000415 	stw	r20,16(sp)
 4100260:	dcc00315 	stw	r19,12(sp)
 4100264:	dc800215 	stw	r18,8(sp)
 4100268:	5295883a 	add	r10,r10,r10
 410026c:	27e3883a 	add	r17,r4,ra
	for (int i = start_row; i < end_row; i++)
 4100270:	0013883a 	mov	r9,zero
 4100274:	d8800717 	ldw	r2,28(sp)
 4100278:	5880210e 	bge	r11,r2,4100300 <matrix_partial_multiply+0xc4>
 410027c:	4c45883a 	add	r2,r9,r17
 4100280:	1085883a 	add	r2,r2,r2
 4100284:	4fe5883a 	add	r18,r9,ra
 4100288:	1087883a 	add	r3,r2,r2
 410028c:	8011883a 	mov	r8,r16
 4100290:	001b883a 	mov	r13,zero
	{
		for (int j = 0; j < N; j++)
 4100294:	6900170e 	bge	r13,r4,41002f4 <matrix_partial_multiply+0xb8>
 4100298:	001f883a 	mov	r15,zero
 410029c:	0019883a 	mov	r12,zero
 41002a0:	001d883a 	mov	r14,zero
 41002a4:	7a9f883a 	add	r15,r15,r10
		{
			int sum = 0;

			for (int k = 0; k < N; k++)
 41002a8:	61000c0e 	bge	r12,r4,41002dc <matrix_partial_multiply+0xa0>
 41002ac:	6485883a 	add	r2,r12,r18
 41002b0:	1085883a 	add	r2,r2,r2
 41002b4:	1085883a 	add	r2,r2,r2
 41002b8:	43e7883a 	add	r19,r8,r15
 41002bc:	2885883a 	add	r2,r5,r2
 41002c0:	34e7883a 	add	r19,r6,r19
			{
				int a = *(A + (i * N + k));
 41002c4:	15000017 	ldw	r20,0(r2)
				int b = *(B + (k * N + j));
 41002c8:	98800017 	ldw	r2,0(r19)
	{
		for (int j = 0; j < N; j++)
		{
			int sum = 0;

			for (int k = 0; k < N; k++)
 41002cc:	63000044 	addi	r12,r12,1
			{
				int a = *(A + (i * N + k));
				int b = *(B + (k * N + j));
				sum += a * b;
 41002d0:	a085383a 	mul	r2,r20,r2
 41002d4:	709d883a 	add	r14,r14,r2
 41002d8:	003ff206 	br	41002a4 <__ram_exceptions_end+0xfc0f0150>
 41002dc:	40c5883a 	add	r2,r8,r3
 41002e0:	3885883a 	add	r2,r7,r2
			}

			*(C + (i * N + j)) = sum;
 41002e4:	13800015 	stw	r14,0(r2)

void matrix_partial_multiply(int N, volatile int *A, volatile int *B, volatile int *C, int start_row, int end_row)
{
	for (int i = start_row; i < end_row; i++)
	{
		for (int j = 0; j < N; j++)
 41002e8:	6b400044 	addi	r13,r13,1
 41002ec:	42000104 	addi	r8,r8,4
 41002f0:	003fe806 	br	4100294 <__ram_exceptions_end+0xfc0f0140>
	}
}

void matrix_partial_multiply(int N, volatile int *A, volatile int *B, volatile int *C, int start_row, int end_row)
{
	for (int i = start_row; i < end_row; i++)
 41002f4:	5ac00044 	addi	r11,r11,1
 41002f8:	4913883a 	add	r9,r9,r4
 41002fc:	003fdd06 	br	4100274 <__ram_exceptions_end+0xfc0f0120>
			*(C + (i * N + j)) = sum;
//			printf("Writing to C[%d][%d] = %d (addr: 0x%x)\n", i, j, sum, (unsigned int)(C + (i*N + j)));
		}
//		alt_putstr("\n");
    }
}
 4100300:	dfc00517 	ldw	ra,20(sp)
 4100304:	dd000417 	ldw	r20,16(sp)
 4100308:	dcc00317 	ldw	r19,12(sp)
 410030c:	dc800217 	ldw	r18,8(sp)
 4100310:	dc400117 	ldw	r17,4(sp)
 4100314:	dc000017 	ldw	r16,0(sp)
 4100318:	dec00604 	addi	sp,sp,24
 410031c:	f800283a 	ret

04100320 <print_matrix>:

void print_matrix(int N, volatile int * matrix_address)
{
 4100320:	defffa04 	addi	sp,sp,-24
 4100324:	dd000415 	stw	r20,16(sp)
 4100328:	dcc00315 	stw	r19,12(sp)
 410032c:	dc800215 	stw	r18,8(sp)
 4100330:	dc400115 	stw	r17,4(sp)
 4100334:	dfc00515 	stw	ra,20(sp)
 4100338:	dc000015 	stw	r16,0(sp)
 410033c:	2023883a 	mov	r17,r4
 4100340:	2829883a 	mov	r20,r5
	for (int i = 0; i < N; i++)
 4100344:	0027883a 	mov	r19,zero
 4100348:	0025883a 	mov	r18,zero
 410034c:	9440110e 	bge	r18,r17,4100394 <print_matrix+0x74>
 4100350:	0021883a 	mov	r16,zero
	{

		for (int j = 0; j < N; j++)
 4100354:	84400a0e 	bge	r16,r17,4100380 <print_matrix+0x60>
 4100358:	84c5883a 	add	r2,r16,r19
 410035c:	1085883a 	add	r2,r2,r2
 4100360:	1085883a 	add	r2,r2,r2
 4100364:	a085883a 	add	r2,r20,r2
		{
			int value = * (matrix_address + (N * i + j));
 4100368:	11400017 	ldw	r5,0(r2)
			printf("%d\t", value);
 410036c:	01010434 	movhi	r4,1040
 4100370:	21058904 	addi	r4,r4,5668
 4100374:	41008280 	call	4100828 <printf>
void print_matrix(int N, volatile int * matrix_address)
{
	for (int i = 0; i < N; i++)
	{

		for (int j = 0; j < N; j++)
 4100378:	84000044 	addi	r16,r16,1
 410037c:	003ff506 	br	4100354 <__ram_exceptions_end+0xfc0f0200>
		{
			int value = * (matrix_address + (N * i + j));
			printf("%d\t", value);
		}
		printf("\n");
 4100380:	01000284 	movi	r4,10
 4100384:	410087c0 	call	410087c <putchar>
    }
}

void print_matrix(int N, volatile int * matrix_address)
{
	for (int i = 0; i < N; i++)
 4100388:	94800044 	addi	r18,r18,1
 410038c:	9c67883a 	add	r19,r19,r17
 4100390:	003fee06 	br	410034c <__ram_exceptions_end+0xfc0f01f8>
			int value = * (matrix_address + (N * i + j));
			printf("%d\t", value);
		}
		printf("\n");
	}
	printf("\n");
 4100394:	01000284 	movi	r4,10
}
 4100398:	dfc00517 	ldw	ra,20(sp)
 410039c:	dd000417 	ldw	r20,16(sp)
 41003a0:	dcc00317 	ldw	r19,12(sp)
 41003a4:	dc800217 	ldw	r18,8(sp)
 41003a8:	dc400117 	ldw	r17,4(sp)
 41003ac:	dc000017 	ldw	r16,0(sp)
 41003b0:	dec00604 	addi	sp,sp,24
			int value = * (matrix_address + (N * i + j));
			printf("%d\t", value);
		}
		printf("\n");
	}
	printf("\n");
 41003b4:	410087c1 	jmpi	410087c <putchar>

041003b8 <print_matrix_w_addresses>:
}

void print_matrix_w_addresses(int N, volatile  int *matrix_address)
{
 41003b8:	defff904 	addi	sp,sp,-28
 41003bc:	2105883a 	add	r2,r4,r4
 41003c0:	dd000415 	stw	r20,16(sp)
 41003c4:	dcc00315 	stw	r19,12(sp)
 41003c8:	dc400115 	stw	r17,4(sp)
 41003cc:	dc000015 	stw	r16,0(sp)
 41003d0:	dfc00615 	stw	ra,24(sp)
 41003d4:	dd400515 	stw	r21,20(sp)
 41003d8:	dc800215 	stw	r18,8(sp)
 41003dc:	2021883a 	mov	r16,r4
 41003e0:	10a3883a 	add	r17,r2,r2
 41003e4:	2829883a 	mov	r20,r5
    for (int i = 0; i < N; i++) {
 41003e8:	0027883a 	mov	r19,zero
 41003ec:	9c00100e 	bge	r19,r16,4100430 <print_matrix_w_addresses+0x78>
 41003f0:	a025883a 	mov	r18,r20
 41003f4:	002b883a 	mov	r21,zero
        for (int j = 0; j < N; j++) {
 41003f8:	ac00080e 	bge	r21,r16,410041c <print_matrix_w_addresses+0x64>
            int *addr = matrix_address + (N * i + j);
            printf("%d (0x%x)\t", *addr, addr);
 41003fc:	91400017 	ldw	r5,0(r18)
 4100400:	01010434 	movhi	r4,1040
 4100404:	900d883a 	mov	r6,r18
 4100408:	21058a04 	addi	r4,r4,5672
 410040c:	41008280 	call	4100828 <printf>
}

void print_matrix_w_addresses(int N, volatile  int *matrix_address)
{
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
 4100410:	ad400044 	addi	r21,r21,1
 4100414:	94800104 	addi	r18,r18,4
 4100418:	003ff706 	br	41003f8 <__ram_exceptions_end+0xfc0f02a4>
            int *addr = matrix_address + (N * i + j);
            printf("%d (0x%x)\t", *addr, addr);
        }
        printf("\n");
 410041c:	01000284 	movi	r4,10
 4100420:	410087c0 	call	410087c <putchar>
	printf("\n");
}

void print_matrix_w_addresses(int N, volatile  int *matrix_address)
{
    for (int i = 0; i < N; i++) {
 4100424:	9cc00044 	addi	r19,r19,1
 4100428:	a469883a 	add	r20,r20,r17
 410042c:	003fef06 	br	41003ec <__ram_exceptions_end+0xfc0f0298>
            int *addr = matrix_address + (N * i + j);
            printf("%d (0x%x)\t", *addr, addr);
        }
        printf("\n");
    }
}
 4100430:	dfc00617 	ldw	ra,24(sp)
 4100434:	dd400517 	ldw	r21,20(sp)
 4100438:	dd000417 	ldw	r20,16(sp)
 410043c:	dcc00317 	ldw	r19,12(sp)
 4100440:	dc800217 	ldw	r18,8(sp)
 4100444:	dc400117 	ldw	r17,4(sp)
 4100448:	dc000017 	ldw	r16,0(sp)
 410044c:	dec00704 	addi	sp,sp,28
 4100450:	f800283a 	ret

04100454 <main>:
void print_matrix(int N, volatile int * matrix_address);
void print_matrix_w_addresses(int N, volatile int *matrix_address);

int main()
{ 
  int init = * us_counter;
 4100454:	d0a00517 	ldw	r2,-32748(gp)
  printf("CPU1 startup time: %.d\n", init);
 4100458:	01010434 	movhi	r4,1040
void matrix_partial_multiply(int N, volatile int *A, volatile int *B, volatile int *C, int start_row, int end_row);
void print_matrix(int N, volatile int * matrix_address);
void print_matrix_w_addresses(int N, volatile int *matrix_address);

int main()
{ 
 410045c:	defffb04 	addi	sp,sp,-20
  int init = * us_counter;
 4100460:	11400017 	ldw	r5,0(r2)
  printf("CPU1 startup time: %.d\n", init);
 4100464:	21058d04 	addi	r4,r4,5684
void matrix_partial_multiply(int N, volatile int *A, volatile int *B, volatile int *C, int start_row, int end_row);
void print_matrix(int N, volatile int * matrix_address);
void print_matrix_w_addresses(int N, volatile int *matrix_address);

int main()
{ 
 4100468:	dfc00415 	stw	ra,16(sp)
 410046c:	dc000315 	stw	r16,12(sp)
  int init = * us_counter;
  printf("CPU1 startup time: %.d\n", init);
 4100470:	41008280 	call	4100828 <printf>

  * core1_tx = 0;
 4100474:	d0a00417 	ldw	r2,-32752(gp)
//  NIOS2_WRITE_STATUS(0x1);	// Enable global interrupts
//  NIOS2_WRITE_IENABLE(0x2);	// Set IRQ bit


  // mutex
  mutex = altera_avalon_mutex_open("/dev/mutex");
 4100478:	01010434 	movhi	r4,1040
 410047c:	21059304 	addi	r4,r4,5708
int main()
{ 
  int init = * us_counter;
  printf("CPU1 startup time: %.d\n", init);

  * core1_tx = 0;
 4100480:	10000015 	stw	zero,0(r2)
  core2_ready = 0;
 4100484:	d0205615 	stw	zero,-32424(gp)
//  NIOS2_WRITE_STATUS(0x1);	// Enable global interrupts
//  NIOS2_WRITE_IENABLE(0x2);	// Set IRQ bit


  // mutex
  mutex = altera_avalon_mutex_open("/dev/mutex");
 4100488:	410138c0 	call	410138c <altera_avalon_mutex_open>
 410048c:	d0a05715 	stw	r2,-32420(gp)
  if (!mutex) {
 4100490:	1000041e 	bne	r2,zero,41004a4 <main+0x50>
	  printf("Failed to open mutex!\n");
 4100494:	01010434 	movhi	r4,1040
 4100498:	21059604 	addi	r4,r4,5720
 410049c:	41009180 	call	4100918 <puts>
 41004a0:	003fff06 	br	41004a0 <__ram_exceptions_end+0xfc0f034c>
	  while (1);  // Halt here if mutex can't be opened
  }
//  altera_avalon_mutex_unlock(mutex);
  alt_putstr("Mutex opened\n");
 41004a4:	01010434 	movhi	r4,1040
 41004a8:	21059c04 	addi	r4,r4,5744
 41004ac:	41012900 	call	4101290 <alt_putstr>

  // wait for core 2 to start
  init = * us_counter;
 41004b0:	d0e00517 	ldw	r3,-32748(gp)
  while (* us_counter - init < 10000000)
 41004b4:	01002674 	movhi	r4,153
 41004b8:	21259fc4 	addi	r4,r4,-27009
  }
//  altera_avalon_mutex_unlock(mutex);
  alt_putstr("Mutex opened\n");

  // wait for core 2 to start
  init = * us_counter;
 41004bc:	19400017 	ldw	r5,0(r3)
  while (* us_counter - init < 10000000)
 41004c0:	18800017 	ldw	r2,0(r3)
 41004c4:	1145c83a 	sub	r2,r2,r5
 41004c8:	20bffd0e 	bge	r4,r2,41004c0 <__ram_exceptions_end+0xfc0f036c>
  {

  }

  volatile int N = *switches;
 41004cc:	d0a00617 	ldw	r2,-32744(gp)
  * shared_N = N;
  printf("N = %2d\n", N);
 41004d0:	01010434 	movhi	r4,1040
 41004d4:	2105a004 	addi	r4,r4,5760
  while (* us_counter - init < 10000000)
  {

  }

  volatile int N = *switches;
 41004d8:	10800017 	ldw	r2,0(r2)
  printf("N = %2d\n", N);
//  printf("shared N = %.d", * shared_N);

  // send interrupt to core2's RX to signal N is ready
  * core1_tx = 0;
  * core1_tx = 1;
 41004dc:	04000044 	movi	r16,1
  while (* us_counter - init < 10000000)
  {

  }

  volatile int N = *switches;
 41004e0:	d8800215 	stw	r2,8(sp)
  * shared_N = N;
 41004e4:	d8c00217 	ldw	r3,8(sp)
 41004e8:	d0a00017 	ldw	r2,-32768(gp)
 41004ec:	10c00015 	stw	r3,0(r2)
  printf("N = %2d\n", N);
 41004f0:	d9400217 	ldw	r5,8(sp)
 41004f4:	41008280 	call	4100828 <printf>
//  printf("shared N = %.d", * shared_N);

  // send interrupt to core2's RX to signal N is ready
  * core1_tx = 0;
 41004f8:	d0a00417 	ldw	r2,-32752(gp)
  volatile int *A = UNCACHE(MATRIX_A_ADDR);
  volatile int *B = UNCACHE(MATRIX_B_ADDR);
  volatile int *C = UNCACHE(MATRIX_C_ADDR);

  // Create random matrix A (N x N)
  matrix_rng(N, A);
 41004fc:	01610034 	movhi	r5,33792
 4100500:	29440004 	addi	r5,r5,4096
  * shared_N = N;
  printf("N = %2d\n", N);
//  printf("shared N = %.d", * shared_N);

  // send interrupt to core2's RX to signal N is ready
  * core1_tx = 0;
 4100504:	10000015 	stw	zero,0(r2)
  * core1_tx = 1;
 4100508:	14000015 	stw	r16,0(r2)
  volatile int *A = UNCACHE(MATRIX_A_ADDR);
  volatile int *B = UNCACHE(MATRIX_B_ADDR);
  volatile int *C = UNCACHE(MATRIX_C_ADDR);

  // Create random matrix A (N x N)
  matrix_rng(N, A);
 410050c:	d9000217 	ldw	r4,8(sp)
 4100510:	41001ac0 	call	41001ac <matrix_rng>
  alt_putstr("\nA:\n");
 4100514:	01010434 	movhi	r4,1040
 4100518:	2105a304 	addi	r4,r4,5772
 410051c:	41012900 	call	4101290 <alt_putstr>
  print_matrix_w_addresses(N, A);
 4100520:	d9000217 	ldw	r4,8(sp)
 4100524:	01610034 	movhi	r5,33792
 4100528:	29440004 	addi	r5,r5,4096
 410052c:	41003b80 	call	41003b8 <print_matrix_w_addresses>

  // add delay between N ready and matrix_A ready
  int checkpoint = * us_counter;
 4100530:	d0a00517 	ldw	r2,-32748(gp)
//  printf("\nCheckpoint: %.d\n", checkpoint);
  while (* us_counter < checkpoint + 2000000)
 4100534:	00c007f4 	movhi	r3,31
 4100538:	18e11fc4 	addi	r3,r3,-31617
  matrix_rng(N, A);
  alt_putstr("\nA:\n");
  print_matrix_w_addresses(N, A);

  // add delay between N ready and matrix_A ready
  int checkpoint = * us_counter;
 410053c:	11000017 	ldw	r4,0(r2)
//  printf("\nCheckpoint: %.d\n", checkpoint);
  while (* us_counter < checkpoint + 2000000)
 4100540:	20c7883a 	add	r3,r4,r3
 4100544:	11000017 	ldw	r4,0(r2)
 4100548:	193ffe0e 	bge	r3,r4,4100544 <__ram_exceptions_end+0xfc0f03f0>
  {

  }

  // send matrix A ready signal to core2b
  * core1_tx = 0;
 410054c:	d0e00417 	ldw	r3,-32752(gp)
//  check = * core1_rx;
//  printf("Check = %.d\n", check);

  // start timer and compute
  unsigned int start_time = *us_counter;
  matrix_partial_multiply(N, A, B, C, 0, N/2);
 4100550:	01e10034 	movhi	r7,33792
 4100554:	01a10034 	movhi	r6,33792
  {

  }

  // send matrix A ready signal to core2b
  * core1_tx = 0;
 4100558:	18000015 	stw	zero,0(r3)
  * core1_tx = 1;
 410055c:	1c000015 	stw	r16,0(r3)

//  check = * core1_rx;
//  printf("Check = %.d\n", check);

  // start timer and compute
  unsigned int start_time = *us_counter;
 4100560:	14000017 	ldw	r16,0(r2)
  matrix_partial_multiply(N, A, B, C, 0, N/2);
 4100564:	d9000217 	ldw	r4,8(sp)
 4100568:	d8800217 	ldw	r2,8(sp)
 410056c:	01610034 	movhi	r5,33792
 4100570:	d8000015 	stw	zero,0(sp)
 4100574:	1006d7fa 	srli	r3,r2,31
 4100578:	39cc0004 	addi	r7,r7,12288
 410057c:	31880004 	addi	r6,r6,8192
 4100580:	1885883a 	add	r2,r3,r2
 4100584:	1005d07a 	srai	r2,r2,1
 4100588:	29440004 	addi	r5,r5,4096
 410058c:	d8800115 	stw	r2,4(sp)
 4100590:	410023c0 	call	410023c <matrix_partial_multiply>

  while (1) {
	  int check = * core1_rx;
 4100594:	d1200317 	ldw	r4,-32756(gp)
//      altera_avalon_mutex_lock(mutex, 1);
      if (check == 1) {
 4100598:	00800044 	movi	r2,1
  // start timer and compute
  unsigned int start_time = *us_counter;
  matrix_partial_multiply(N, A, B, C, 0, N/2);

  while (1) {
	  int check = * core1_rx;
 410059c:	20c00017 	ldw	r3,0(r4)
//      altera_avalon_mutex_lock(mutex, 1);
      if (check == 1) {
 41005a0:	18bffe1e 	bne	r3,r2,410059c <__ram_exceptions_end+0xfc0f0448>
          break;
      }
//      altera_avalon_mutex_unlock(mutex);
  }

  int end_time = *us_counter;
 41005a4:	d0a00517 	ldw	r2,-32748(gp)
  int elapsed_cycles = end_time - start_time;
  printf("\nDual core Elapsed time: %u us\n", elapsed_cycles);
 41005a8:	01010434 	movhi	r4,1040
 41005ac:	2105a504 	addi	r4,r4,5780
          break;
      }
//      altera_avalon_mutex_unlock(mutex);
  }

  int end_time = *us_counter;
 41005b0:	11400017 	ldw	r5,0(r2)
  int elapsed_cycles = end_time - start_time;
  printf("\nDual core Elapsed time: %u us\n", elapsed_cycles);
 41005b4:	2c0bc83a 	sub	r5,r5,r16
 41005b8:	41008280 	call	4100828 <printf>

//   print matrix C
  printf("\nC :\n");
 41005bc:	01010434 	movhi	r4,1040
 41005c0:	2105ad04 	addi	r4,r4,5812
 41005c4:	41009180 	call	4100918 <puts>
  print_matrix_w_addresses(N, C);
 41005c8:	d9000217 	ldw	r4,8(sp)
 41005cc:	01610034 	movhi	r5,33792
 41005d0:	294c0004 	addi	r5,r5,12288
 41005d4:	41003b80 	call	41003b8 <print_matrix_w_addresses>

  // single core test
  start_time = *us_counter;
 41005d8:	d0a00517 	ldw	r2,-32748(gp)
  matrix_partial_multiply(N, A, B, C, 0, N);
 41005dc:	01e10034 	movhi	r7,33792
 41005e0:	01a10034 	movhi	r6,33792
//   print matrix C
  printf("\nC :\n");
  print_matrix_w_addresses(N, C);

  // single core test
  start_time = *us_counter;
 41005e4:	14000017 	ldw	r16,0(r2)
  matrix_partial_multiply(N, A, B, C, 0, N);
 41005e8:	d9000217 	ldw	r4,8(sp)
 41005ec:	d8800217 	ldw	r2,8(sp)
 41005f0:	01610034 	movhi	r5,33792
 41005f4:	39cc0004 	addi	r7,r7,12288
 41005f8:	d8800115 	stw	r2,4(sp)
 41005fc:	31880004 	addi	r6,r6,8192
 4100600:	d8000015 	stw	zero,0(sp)
 4100604:	29440004 	addi	r5,r5,4096
 4100608:	410023c0 	call	410023c <matrix_partial_multiply>
  end_time = *us_counter;
 410060c:	d0a00517 	ldw	r2,-32748(gp)
  elapsed_cycles = end_time - start_time;
  printf("\nSingle core Elapsed time: %u us\n", elapsed_cycles);
 4100610:	01010434 	movhi	r4,1040
 4100614:	2105af04 	addi	r4,r4,5820
  print_matrix_w_addresses(N, C);

  // single core test
  start_time = *us_counter;
  matrix_partial_multiply(N, A, B, C, 0, N);
  end_time = *us_counter;
 4100618:	11400017 	ldw	r5,0(r2)
  elapsed_cycles = end_time - start_time;
  printf("\nSingle core Elapsed time: %u us\n", elapsed_cycles);
 410061c:	2c0bc83a 	sub	r5,r5,r16
 4100620:	41008280 	call	4100828 <printf>
}
 4100624:	0005883a 	mov	r2,zero
 4100628:	dfc00417 	ldw	ra,16(sp)
 410062c:	dc000317 	ldw	r16,12(sp)
 4100630:	dec00504 	addi	sp,sp,20
 4100634:	f800283a 	ret

04100638 <__divsi3>:
 4100638:	20001b16 	blt	r4,zero,41006a8 <__divsi3+0x70>
 410063c:	000f883a 	mov	r7,zero
 4100640:	28001616 	blt	r5,zero,410069c <__divsi3+0x64>
 4100644:	200d883a 	mov	r6,r4
 4100648:	29001a2e 	bgeu	r5,r4,41006b4 <__divsi3+0x7c>
 410064c:	00800804 	movi	r2,32
 4100650:	00c00044 	movi	r3,1
 4100654:	00000106 	br	410065c <__divsi3+0x24>
 4100658:	10000d26 	beq	r2,zero,4100690 <__divsi3+0x58>
 410065c:	294b883a 	add	r5,r5,r5
 4100660:	10bfffc4 	addi	r2,r2,-1
 4100664:	18c7883a 	add	r3,r3,r3
 4100668:	293ffb36 	bltu	r5,r4,4100658 <__ram_exceptions_end+0xfc0f0504>
 410066c:	0005883a 	mov	r2,zero
 4100670:	18000726 	beq	r3,zero,4100690 <__divsi3+0x58>
 4100674:	0005883a 	mov	r2,zero
 4100678:	31400236 	bltu	r6,r5,4100684 <__divsi3+0x4c>
 410067c:	314dc83a 	sub	r6,r6,r5
 4100680:	10c4b03a 	or	r2,r2,r3
 4100684:	1806d07a 	srli	r3,r3,1
 4100688:	280ad07a 	srli	r5,r5,1
 410068c:	183ffa1e 	bne	r3,zero,4100678 <__ram_exceptions_end+0xfc0f0524>
 4100690:	38000126 	beq	r7,zero,4100698 <__divsi3+0x60>
 4100694:	0085c83a 	sub	r2,zero,r2
 4100698:	f800283a 	ret
 410069c:	014bc83a 	sub	r5,zero,r5
 41006a0:	39c0005c 	xori	r7,r7,1
 41006a4:	003fe706 	br	4100644 <__ram_exceptions_end+0xfc0f04f0>
 41006a8:	0109c83a 	sub	r4,zero,r4
 41006ac:	01c00044 	movi	r7,1
 41006b0:	003fe306 	br	4100640 <__ram_exceptions_end+0xfc0f04ec>
 41006b4:	00c00044 	movi	r3,1
 41006b8:	003fee06 	br	4100674 <__ram_exceptions_end+0xfc0f0520>

041006bc <__modsi3>:
 41006bc:	20001716 	blt	r4,zero,410071c <__modsi3+0x60>
 41006c0:	000f883a 	mov	r7,zero
 41006c4:	2005883a 	mov	r2,r4
 41006c8:	28001216 	blt	r5,zero,4100714 <__modsi3+0x58>
 41006cc:	2900162e 	bgeu	r5,r4,4100728 <__modsi3+0x6c>
 41006d0:	01800804 	movi	r6,32
 41006d4:	00c00044 	movi	r3,1
 41006d8:	00000106 	br	41006e0 <__modsi3+0x24>
 41006dc:	30000a26 	beq	r6,zero,4100708 <__modsi3+0x4c>
 41006e0:	294b883a 	add	r5,r5,r5
 41006e4:	31bfffc4 	addi	r6,r6,-1
 41006e8:	18c7883a 	add	r3,r3,r3
 41006ec:	293ffb36 	bltu	r5,r4,41006dc <__ram_exceptions_end+0xfc0f0588>
 41006f0:	18000526 	beq	r3,zero,4100708 <__modsi3+0x4c>
 41006f4:	1806d07a 	srli	r3,r3,1
 41006f8:	11400136 	bltu	r2,r5,4100700 <__modsi3+0x44>
 41006fc:	1145c83a 	sub	r2,r2,r5
 4100700:	280ad07a 	srli	r5,r5,1
 4100704:	183ffb1e 	bne	r3,zero,41006f4 <__ram_exceptions_end+0xfc0f05a0>
 4100708:	38000126 	beq	r7,zero,4100710 <__modsi3+0x54>
 410070c:	0085c83a 	sub	r2,zero,r2
 4100710:	f800283a 	ret
 4100714:	014bc83a 	sub	r5,zero,r5
 4100718:	003fec06 	br	41006cc <__ram_exceptions_end+0xfc0f0578>
 410071c:	0109c83a 	sub	r4,zero,r4
 4100720:	01c00044 	movi	r7,1
 4100724:	003fe706 	br	41006c4 <__ram_exceptions_end+0xfc0f0570>
 4100728:	00c00044 	movi	r3,1
 410072c:	003ff106 	br	41006f4 <__ram_exceptions_end+0xfc0f05a0>

04100730 <__udivsi3>:
 4100730:	200d883a 	mov	r6,r4
 4100734:	2900152e 	bgeu	r5,r4,410078c <__udivsi3+0x5c>
 4100738:	28001416 	blt	r5,zero,410078c <__udivsi3+0x5c>
 410073c:	00800804 	movi	r2,32
 4100740:	00c00044 	movi	r3,1
 4100744:	00000206 	br	4100750 <__udivsi3+0x20>
 4100748:	10000e26 	beq	r2,zero,4100784 <__udivsi3+0x54>
 410074c:	28000516 	blt	r5,zero,4100764 <__udivsi3+0x34>
 4100750:	294b883a 	add	r5,r5,r5
 4100754:	10bfffc4 	addi	r2,r2,-1
 4100758:	18c7883a 	add	r3,r3,r3
 410075c:	293ffa36 	bltu	r5,r4,4100748 <__ram_exceptions_end+0xfc0f05f4>
 4100760:	18000826 	beq	r3,zero,4100784 <__udivsi3+0x54>
 4100764:	0005883a 	mov	r2,zero
 4100768:	31400236 	bltu	r6,r5,4100774 <__udivsi3+0x44>
 410076c:	314dc83a 	sub	r6,r6,r5
 4100770:	10c4b03a 	or	r2,r2,r3
 4100774:	1806d07a 	srli	r3,r3,1
 4100778:	280ad07a 	srli	r5,r5,1
 410077c:	183ffa1e 	bne	r3,zero,4100768 <__ram_exceptions_end+0xfc0f0614>
 4100780:	f800283a 	ret
 4100784:	0005883a 	mov	r2,zero
 4100788:	f800283a 	ret
 410078c:	00c00044 	movi	r3,1
 4100790:	003ff406 	br	4100764 <__ram_exceptions_end+0xfc0f0610>

04100794 <__umodsi3>:
 4100794:	2005883a 	mov	r2,r4
 4100798:	2900122e 	bgeu	r5,r4,41007e4 <__umodsi3+0x50>
 410079c:	28001116 	blt	r5,zero,41007e4 <__umodsi3+0x50>
 41007a0:	01800804 	movi	r6,32
 41007a4:	00c00044 	movi	r3,1
 41007a8:	00000206 	br	41007b4 <__umodsi3+0x20>
 41007ac:	30000c26 	beq	r6,zero,41007e0 <__umodsi3+0x4c>
 41007b0:	28000516 	blt	r5,zero,41007c8 <__umodsi3+0x34>
 41007b4:	294b883a 	add	r5,r5,r5
 41007b8:	31bfffc4 	addi	r6,r6,-1
 41007bc:	18c7883a 	add	r3,r3,r3
 41007c0:	293ffa36 	bltu	r5,r4,41007ac <__ram_exceptions_end+0xfc0f0658>
 41007c4:	18000626 	beq	r3,zero,41007e0 <__umodsi3+0x4c>
 41007c8:	1806d07a 	srli	r3,r3,1
 41007cc:	11400136 	bltu	r2,r5,41007d4 <__umodsi3+0x40>
 41007d0:	1145c83a 	sub	r2,r2,r5
 41007d4:	280ad07a 	srli	r5,r5,1
 41007d8:	183ffb1e 	bne	r3,zero,41007c8 <__ram_exceptions_end+0xfc0f0674>
 41007dc:	f800283a 	ret
 41007e0:	f800283a 	ret
 41007e4:	00c00044 	movi	r3,1
 41007e8:	003ff706 	br	41007c8 <__ram_exceptions_end+0xfc0f0674>

041007ec <_printf_r>:
 41007ec:	defffd04 	addi	sp,sp,-12
 41007f0:	dfc00015 	stw	ra,0(sp)
 41007f4:	d9800115 	stw	r6,4(sp)
 41007f8:	d9c00215 	stw	r7,8(sp)
 41007fc:	20c00217 	ldw	r3,8(r4)
 4100800:	01810434 	movhi	r6,1040
 4100804:	3183da04 	addi	r6,r6,3944
 4100808:	19800115 	stw	r6,4(r3)
 410080c:	280d883a 	mov	r6,r5
 4100810:	21400217 	ldw	r5,8(r4)
 4100814:	d9c00104 	addi	r7,sp,4
 4100818:	4100a280 	call	4100a28 <___vfprintf_internal_r>
 410081c:	dfc00017 	ldw	ra,0(sp)
 4100820:	dec00304 	addi	sp,sp,12
 4100824:	f800283a 	ret

04100828 <printf>:
 4100828:	defffc04 	addi	sp,sp,-16
 410082c:	dfc00015 	stw	ra,0(sp)
 4100830:	d9400115 	stw	r5,4(sp)
 4100834:	d9800215 	stw	r6,8(sp)
 4100838:	d9c00315 	stw	r7,12(sp)
 410083c:	00810434 	movhi	r2,1040
 4100840:	1085fc04 	addi	r2,r2,6128
 4100844:	10800017 	ldw	r2,0(r2)
 4100848:	01410434 	movhi	r5,1040
 410084c:	2943da04 	addi	r5,r5,3944
 4100850:	10c00217 	ldw	r3,8(r2)
 4100854:	d9800104 	addi	r6,sp,4
 4100858:	19400115 	stw	r5,4(r3)
 410085c:	200b883a 	mov	r5,r4
 4100860:	11000217 	ldw	r4,8(r2)
 4100864:	4100f4c0 	call	4100f4c <__vfprintf_internal>
 4100868:	dfc00017 	ldw	ra,0(sp)
 410086c:	dec00404 	addi	sp,sp,16
 4100870:	f800283a 	ret

04100874 <_putchar_r>:
 4100874:	21800217 	ldw	r6,8(r4)
 4100878:	41010741 	jmpi	4101074 <_putc_r>

0410087c <putchar>:
 410087c:	00810434 	movhi	r2,1040
 4100880:	1085fc04 	addi	r2,r2,6128
 4100884:	10800017 	ldw	r2,0(r2)
 4100888:	200b883a 	mov	r5,r4
 410088c:	11800217 	ldw	r6,8(r2)
 4100890:	1009883a 	mov	r4,r2
 4100894:	41010741 	jmpi	4101074 <_putc_r>

04100898 <_puts_r>:
 4100898:	defffd04 	addi	sp,sp,-12
 410089c:	dc000015 	stw	r16,0(sp)
 41008a0:	2021883a 	mov	r16,r4
 41008a4:	2809883a 	mov	r4,r5
 41008a8:	dfc00215 	stw	ra,8(sp)
 41008ac:	dc400115 	stw	r17,4(sp)
 41008b0:	2823883a 	mov	r17,r5
 41008b4:	41009a00 	call	41009a0 <strlen>
 41008b8:	81400217 	ldw	r5,8(r16)
 41008bc:	01010434 	movhi	r4,1040
 41008c0:	2103da04 	addi	r4,r4,3944
 41008c4:	29000115 	stw	r4,4(r5)
 41008c8:	100f883a 	mov	r7,r2
 41008cc:	880d883a 	mov	r6,r17
 41008d0:	8009883a 	mov	r4,r16
 41008d4:	4100f680 	call	4100f68 <__sfvwrite_small_dev>
 41008d8:	00ffffc4 	movi	r3,-1
 41008dc:	10c00926 	beq	r2,r3,4100904 <_puts_r+0x6c>
 41008e0:	81400217 	ldw	r5,8(r16)
 41008e4:	01810434 	movhi	r6,1040
 41008e8:	01c00044 	movi	r7,1
 41008ec:	28800117 	ldw	r2,4(r5)
 41008f0:	31859f04 	addi	r6,r6,5756
 41008f4:	8009883a 	mov	r4,r16
 41008f8:	103ee83a 	callr	r2
 41008fc:	10bfffe0 	cmpeqi	r2,r2,-1
 4100900:	0085c83a 	sub	r2,zero,r2
 4100904:	dfc00217 	ldw	ra,8(sp)
 4100908:	dc400117 	ldw	r17,4(sp)
 410090c:	dc000017 	ldw	r16,0(sp)
 4100910:	dec00304 	addi	sp,sp,12
 4100914:	f800283a 	ret

04100918 <puts>:
 4100918:	00810434 	movhi	r2,1040
 410091c:	1085fc04 	addi	r2,r2,6128
 4100920:	200b883a 	mov	r5,r4
 4100924:	11000017 	ldw	r4,0(r2)
 4100928:	41008981 	jmpi	4100898 <_puts_r>

0410092c <srand>:
 410092c:	00810434 	movhi	r2,1040
 4100930:	10864c04 	addi	r2,r2,6448
 4100934:	11000015 	stw	r4,0(r2)
 4100938:	10000115 	stw	zero,4(r2)
 410093c:	f800283a 	ret

04100940 <rand>:
 4100940:	defffe04 	addi	sp,sp,-8
 4100944:	dc000015 	stw	r16,0(sp)
 4100948:	04010434 	movhi	r16,1040
 410094c:	84064c04 	addi	r16,r16,6448
 4100950:	81000017 	ldw	r4,0(r16)
 4100954:	81400117 	ldw	r5,4(r16)
 4100958:	01932574 	movhi	r6,19605
 410095c:	01d614b4 	movhi	r7,22610
 4100960:	319fcb44 	addi	r6,r6,32557
 4100964:	39fd0b44 	addi	r7,r7,-3027
 4100968:	dfc00115 	stw	ra,4(sp)
 410096c:	41011240 	call	4101124 <__muldi3>
 4100970:	11000044 	addi	r4,r2,1
 4100974:	2085803a 	cmpltu	r2,r4,r2
 4100978:	10c7883a 	add	r3,r2,r3
 410097c:	00a00034 	movhi	r2,32768
 4100980:	10bfffc4 	addi	r2,r2,-1
 4100984:	1884703a 	and	r2,r3,r2
 4100988:	81000015 	stw	r4,0(r16)
 410098c:	80c00115 	stw	r3,4(r16)
 4100990:	dfc00117 	ldw	ra,4(sp)
 4100994:	dc000017 	ldw	r16,0(sp)
 4100998:	dec00204 	addi	sp,sp,8
 410099c:	f800283a 	ret

041009a0 <strlen>:
 41009a0:	2005883a 	mov	r2,r4
 41009a4:	10c00007 	ldb	r3,0(r2)
 41009a8:	18000226 	beq	r3,zero,41009b4 <strlen+0x14>
 41009ac:	10800044 	addi	r2,r2,1
 41009b0:	003ffc06 	br	41009a4 <__ram_exceptions_end+0xfc0f0850>
 41009b4:	1105c83a 	sub	r2,r2,r4
 41009b8:	f800283a 	ret

041009bc <print_repeat>:
 41009bc:	defffb04 	addi	sp,sp,-20
 41009c0:	dc800315 	stw	r18,12(sp)
 41009c4:	dc400215 	stw	r17,8(sp)
 41009c8:	dc000115 	stw	r16,4(sp)
 41009cc:	dfc00415 	stw	ra,16(sp)
 41009d0:	2025883a 	mov	r18,r4
 41009d4:	2823883a 	mov	r17,r5
 41009d8:	d9800005 	stb	r6,0(sp)
 41009dc:	3821883a 	mov	r16,r7
 41009e0:	04000a0e 	bge	zero,r16,4100a0c <print_repeat+0x50>
 41009e4:	88800117 	ldw	r2,4(r17)
 41009e8:	01c00044 	movi	r7,1
 41009ec:	d80d883a 	mov	r6,sp
 41009f0:	880b883a 	mov	r5,r17
 41009f4:	9009883a 	mov	r4,r18
 41009f8:	103ee83a 	callr	r2
 41009fc:	843fffc4 	addi	r16,r16,-1
 4100a00:	103ff726 	beq	r2,zero,41009e0 <__ram_exceptions_end+0xfc0f088c>
 4100a04:	00bfffc4 	movi	r2,-1
 4100a08:	00000106 	br	4100a10 <print_repeat+0x54>
 4100a0c:	0005883a 	mov	r2,zero
 4100a10:	dfc00417 	ldw	ra,16(sp)
 4100a14:	dc800317 	ldw	r18,12(sp)
 4100a18:	dc400217 	ldw	r17,8(sp)
 4100a1c:	dc000117 	ldw	r16,4(sp)
 4100a20:	dec00504 	addi	sp,sp,20
 4100a24:	f800283a 	ret

04100a28 <___vfprintf_internal_r>:
 4100a28:	deffe504 	addi	sp,sp,-108
 4100a2c:	d8c00804 	addi	r3,sp,32
 4100a30:	df001915 	stw	fp,100(sp)
 4100a34:	ddc01815 	stw	r23,96(sp)
 4100a38:	dd801715 	stw	r22,92(sp)
 4100a3c:	dd401615 	stw	r21,88(sp)
 4100a40:	dd001515 	stw	r20,84(sp)
 4100a44:	dcc01415 	stw	r19,80(sp)
 4100a48:	dc801315 	stw	r18,76(sp)
 4100a4c:	dc401215 	stw	r17,72(sp)
 4100a50:	dc001115 	stw	r16,68(sp)
 4100a54:	dfc01a15 	stw	ra,104(sp)
 4100a58:	2027883a 	mov	r19,r4
 4100a5c:	2839883a 	mov	fp,r5
 4100a60:	382d883a 	mov	r22,r7
 4100a64:	d9800f15 	stw	r6,60(sp)
 4100a68:	0021883a 	mov	r16,zero
 4100a6c:	d8000e15 	stw	zero,56(sp)
 4100a70:	002f883a 	mov	r23,zero
 4100a74:	002b883a 	mov	r21,zero
 4100a78:	0025883a 	mov	r18,zero
 4100a7c:	0023883a 	mov	r17,zero
 4100a80:	d8000c15 	stw	zero,48(sp)
 4100a84:	d8000b15 	stw	zero,44(sp)
 4100a88:	0029883a 	mov	r20,zero
 4100a8c:	d8c00915 	stw	r3,36(sp)
 4100a90:	d8c00f17 	ldw	r3,60(sp)
 4100a94:	19000003 	ldbu	r4,0(r3)
 4100a98:	20803fcc 	andi	r2,r4,255
 4100a9c:	1080201c 	xori	r2,r2,128
 4100aa0:	10bfe004 	addi	r2,r2,-128
 4100aa4:	10011c26 	beq	r2,zero,4100f18 <___vfprintf_internal_r+0x4f0>
 4100aa8:	00c00044 	movi	r3,1
 4100aac:	a0c01426 	beq	r20,r3,4100b00 <___vfprintf_internal_r+0xd8>
 4100ab0:	1d000216 	blt	r3,r20,4100abc <___vfprintf_internal_r+0x94>
 4100ab4:	a0000626 	beq	r20,zero,4100ad0 <___vfprintf_internal_r+0xa8>
 4100ab8:	00011306 	br	4100f08 <___vfprintf_internal_r+0x4e0>
 4100abc:	01400084 	movi	r5,2
 4100ac0:	a1401d26 	beq	r20,r5,4100b38 <___vfprintf_internal_r+0x110>
 4100ac4:	014000c4 	movi	r5,3
 4100ac8:	a1402926 	beq	r20,r5,4100b70 <___vfprintf_internal_r+0x148>
 4100acc:	00010e06 	br	4100f08 <___vfprintf_internal_r+0x4e0>
 4100ad0:	01400944 	movi	r5,37
 4100ad4:	1140fb26 	beq	r2,r5,4100ec4 <___vfprintf_internal_r+0x49c>
 4100ad8:	e0800117 	ldw	r2,4(fp)
 4100adc:	d9000005 	stb	r4,0(sp)
 4100ae0:	01c00044 	movi	r7,1
 4100ae4:	d80d883a 	mov	r6,sp
 4100ae8:	e00b883a 	mov	r5,fp
 4100aec:	9809883a 	mov	r4,r19
 4100af0:	103ee83a 	callr	r2
 4100af4:	1000d61e 	bne	r2,zero,4100e50 <___vfprintf_internal_r+0x428>
 4100af8:	84000044 	addi	r16,r16,1
 4100afc:	00010206 	br	4100f08 <___vfprintf_internal_r+0x4e0>
 4100b00:	01400c04 	movi	r5,48
 4100b04:	1140f826 	beq	r2,r5,4100ee8 <___vfprintf_internal_r+0x4c0>
 4100b08:	01400944 	movi	r5,37
 4100b0c:	11400a1e 	bne	r2,r5,4100b38 <___vfprintf_internal_r+0x110>
 4100b10:	d8800005 	stb	r2,0(sp)
 4100b14:	e0800117 	ldw	r2,4(fp)
 4100b18:	a00f883a 	mov	r7,r20
 4100b1c:	d80d883a 	mov	r6,sp
 4100b20:	e00b883a 	mov	r5,fp
 4100b24:	9809883a 	mov	r4,r19
 4100b28:	103ee83a 	callr	r2
 4100b2c:	1000c81e 	bne	r2,zero,4100e50 <___vfprintf_internal_r+0x428>
 4100b30:	84000044 	addi	r16,r16,1
 4100b34:	0000f306 	br	4100f04 <___vfprintf_internal_r+0x4dc>
 4100b38:	217ff404 	addi	r5,r4,-48
 4100b3c:	29403fcc 	andi	r5,r5,255
 4100b40:	00c00244 	movi	r3,9
 4100b44:	19400736 	bltu	r3,r5,4100b64 <___vfprintf_internal_r+0x13c>
 4100b48:	00bfffc4 	movi	r2,-1
 4100b4c:	88800226 	beq	r17,r2,4100b58 <___vfprintf_internal_r+0x130>
 4100b50:	8c4002a4 	muli	r17,r17,10
 4100b54:	00000106 	br	4100b5c <___vfprintf_internal_r+0x134>
 4100b58:	0023883a 	mov	r17,zero
 4100b5c:	2c63883a 	add	r17,r5,r17
 4100b60:	0000e206 	br	4100eec <___vfprintf_internal_r+0x4c4>
 4100b64:	01400b84 	movi	r5,46
 4100b68:	1140e426 	beq	r2,r5,4100efc <___vfprintf_internal_r+0x4d4>
 4100b6c:	05000084 	movi	r20,2
 4100b70:	213ff404 	addi	r4,r4,-48
 4100b74:	21003fcc 	andi	r4,r4,255
 4100b78:	00c00244 	movi	r3,9
 4100b7c:	19000736 	bltu	r3,r4,4100b9c <___vfprintf_internal_r+0x174>
 4100b80:	00bfffc4 	movi	r2,-1
 4100b84:	90800226 	beq	r18,r2,4100b90 <___vfprintf_internal_r+0x168>
 4100b88:	948002a4 	muli	r18,r18,10
 4100b8c:	00000106 	br	4100b94 <___vfprintf_internal_r+0x16c>
 4100b90:	0025883a 	mov	r18,zero
 4100b94:	24a5883a 	add	r18,r4,r18
 4100b98:	0000db06 	br	4100f08 <___vfprintf_internal_r+0x4e0>
 4100b9c:	00c01b04 	movi	r3,108
 4100ba0:	10c0d426 	beq	r2,r3,4100ef4 <___vfprintf_internal_r+0x4cc>
 4100ba4:	013fffc4 	movi	r4,-1
 4100ba8:	91000226 	beq	r18,r4,4100bb4 <___vfprintf_internal_r+0x18c>
 4100bac:	d8000b15 	stw	zero,44(sp)
 4100bb0:	00000106 	br	4100bb8 <___vfprintf_internal_r+0x190>
 4100bb4:	04800044 	movi	r18,1
 4100bb8:	01001a44 	movi	r4,105
 4100bbc:	11001626 	beq	r2,r4,4100c18 <___vfprintf_internal_r+0x1f0>
 4100bc0:	20800916 	blt	r4,r2,4100be8 <___vfprintf_internal_r+0x1c0>
 4100bc4:	010018c4 	movi	r4,99
 4100bc8:	11008a26 	beq	r2,r4,4100df4 <___vfprintf_internal_r+0x3cc>
 4100bcc:	01001904 	movi	r4,100
 4100bd0:	11001126 	beq	r2,r4,4100c18 <___vfprintf_internal_r+0x1f0>
 4100bd4:	01001604 	movi	r4,88
 4100bd8:	1100ca1e 	bne	r2,r4,4100f04 <___vfprintf_internal_r+0x4dc>
 4100bdc:	00c00044 	movi	r3,1
 4100be0:	d8c00e15 	stw	r3,56(sp)
 4100be4:	00001406 	br	4100c38 <___vfprintf_internal_r+0x210>
 4100be8:	01001cc4 	movi	r4,115
 4100bec:	11009a26 	beq	r2,r4,4100e58 <___vfprintf_internal_r+0x430>
 4100bf0:	20800416 	blt	r4,r2,4100c04 <___vfprintf_internal_r+0x1dc>
 4100bf4:	01001bc4 	movi	r4,111
 4100bf8:	1100c21e 	bne	r2,r4,4100f04 <___vfprintf_internal_r+0x4dc>
 4100bfc:	05400204 	movi	r21,8
 4100c00:	00000e06 	br	4100c3c <___vfprintf_internal_r+0x214>
 4100c04:	01001d44 	movi	r4,117
 4100c08:	11000c26 	beq	r2,r4,4100c3c <___vfprintf_internal_r+0x214>
 4100c0c:	01001e04 	movi	r4,120
 4100c10:	11000926 	beq	r2,r4,4100c38 <___vfprintf_internal_r+0x210>
 4100c14:	0000bb06 	br	4100f04 <___vfprintf_internal_r+0x4dc>
 4100c18:	b5000104 	addi	r20,r22,4
 4100c1c:	b8000726 	beq	r23,zero,4100c3c <___vfprintf_internal_r+0x214>
 4100c20:	dd000d15 	stw	r20,52(sp)
 4100c24:	b5800017 	ldw	r22,0(r22)
 4100c28:	b000080e 	bge	r22,zero,4100c4c <___vfprintf_internal_r+0x224>
 4100c2c:	05adc83a 	sub	r22,zero,r22
 4100c30:	02800044 	movi	r10,1
 4100c34:	00000606 	br	4100c50 <___vfprintf_internal_r+0x228>
 4100c38:	05400404 	movi	r21,16
 4100c3c:	b0c00104 	addi	r3,r22,4
 4100c40:	d8c00d15 	stw	r3,52(sp)
 4100c44:	b5800017 	ldw	r22,0(r22)
 4100c48:	002f883a 	mov	r23,zero
 4100c4c:	0015883a 	mov	r10,zero
 4100c50:	d829883a 	mov	r20,sp
 4100c54:	b0001426 	beq	r22,zero,4100ca8 <___vfprintf_internal_r+0x280>
 4100c58:	b009883a 	mov	r4,r22
 4100c5c:	a80b883a 	mov	r5,r21
 4100c60:	da801015 	stw	r10,64(sp)
 4100c64:	41007300 	call	4100730 <__udivsi3>
 4100c68:	1549383a 	mul	r4,r2,r21
 4100c6c:	00c00244 	movi	r3,9
 4100c70:	da801017 	ldw	r10,64(sp)
 4100c74:	b12dc83a 	sub	r22,r22,r4
 4100c78:	1d800216 	blt	r3,r22,4100c84 <___vfprintf_internal_r+0x25c>
 4100c7c:	b5800c04 	addi	r22,r22,48
 4100c80:	00000506 	br	4100c98 <___vfprintf_internal_r+0x270>
 4100c84:	d8c00e17 	ldw	r3,56(sp)
 4100c88:	18000226 	beq	r3,zero,4100c94 <___vfprintf_internal_r+0x26c>
 4100c8c:	b5800dc4 	addi	r22,r22,55
 4100c90:	00000106 	br	4100c98 <___vfprintf_internal_r+0x270>
 4100c94:	b58015c4 	addi	r22,r22,87
 4100c98:	a5800005 	stb	r22,0(r20)
 4100c9c:	a5000044 	addi	r20,r20,1
 4100ca0:	102d883a 	mov	r22,r2
 4100ca4:	003feb06 	br	4100c54 <__ram_exceptions_end+0xfc0f0b00>
 4100ca8:	a6c7c83a 	sub	r3,r20,sp
 4100cac:	d8c00a15 	stw	r3,40(sp)
 4100cb0:	90c5c83a 	sub	r2,r18,r3
 4100cb4:	00800a0e 	bge	zero,r2,4100ce0 <___vfprintf_internal_r+0x2b8>
 4100cb8:	a085883a 	add	r2,r20,r2
 4100cbc:	01400c04 	movi	r5,48
 4100cc0:	d8c00917 	ldw	r3,36(sp)
 4100cc4:	a009883a 	mov	r4,r20
 4100cc8:	a0c0032e 	bgeu	r20,r3,4100cd8 <___vfprintf_internal_r+0x2b0>
 4100ccc:	a5000044 	addi	r20,r20,1
 4100cd0:	21400005 	stb	r5,0(r4)
 4100cd4:	a0bffa1e 	bne	r20,r2,4100cc0 <__ram_exceptions_end+0xfc0f0b6c>
 4100cd8:	a6c7c83a 	sub	r3,r20,sp
 4100cdc:	d8c00a15 	stw	r3,40(sp)
 4100ce0:	d8c00a17 	ldw	r3,40(sp)
 4100ce4:	50d3883a 	add	r9,r10,r3
 4100ce8:	d8c00b17 	ldw	r3,44(sp)
 4100cec:	8a6dc83a 	sub	r22,r17,r9
 4100cf0:	18001726 	beq	r3,zero,4100d50 <___vfprintf_internal_r+0x328>
 4100cf4:	50000a26 	beq	r10,zero,4100d20 <___vfprintf_internal_r+0x2f8>
 4100cf8:	00800b44 	movi	r2,45
 4100cfc:	d8800805 	stb	r2,32(sp)
 4100d00:	e0800117 	ldw	r2,4(fp)
 4100d04:	01c00044 	movi	r7,1
 4100d08:	d9800804 	addi	r6,sp,32
 4100d0c:	e00b883a 	mov	r5,fp
 4100d10:	9809883a 	mov	r4,r19
 4100d14:	103ee83a 	callr	r2
 4100d18:	10004d1e 	bne	r2,zero,4100e50 <___vfprintf_internal_r+0x428>
 4100d1c:	84000044 	addi	r16,r16,1
 4100d20:	0580070e 	bge	zero,r22,4100d40 <___vfprintf_internal_r+0x318>
 4100d24:	b00f883a 	mov	r7,r22
 4100d28:	01800c04 	movi	r6,48
 4100d2c:	e00b883a 	mov	r5,fp
 4100d30:	9809883a 	mov	r4,r19
 4100d34:	41009bc0 	call	41009bc <print_repeat>
 4100d38:	1000451e 	bne	r2,zero,4100e50 <___vfprintf_internal_r+0x428>
 4100d3c:	85a1883a 	add	r16,r16,r22
 4100d40:	d8c00a17 	ldw	r3,40(sp)
 4100d44:	a013883a 	mov	r9,r20
 4100d48:	1d2dc83a 	sub	r22,r3,r20
 4100d4c:	00002206 	br	4100dd8 <___vfprintf_internal_r+0x3b0>
 4100d50:	0580090e 	bge	zero,r22,4100d78 <___vfprintf_internal_r+0x350>
 4100d54:	b00f883a 	mov	r7,r22
 4100d58:	01800804 	movi	r6,32
 4100d5c:	e00b883a 	mov	r5,fp
 4100d60:	9809883a 	mov	r4,r19
 4100d64:	da801015 	stw	r10,64(sp)
 4100d68:	41009bc0 	call	41009bc <print_repeat>
 4100d6c:	da801017 	ldw	r10,64(sp)
 4100d70:	1000371e 	bne	r2,zero,4100e50 <___vfprintf_internal_r+0x428>
 4100d74:	85a1883a 	add	r16,r16,r22
 4100d78:	503ff126 	beq	r10,zero,4100d40 <__ram_exceptions_end+0xfc0f0bec>
 4100d7c:	00800b44 	movi	r2,45
 4100d80:	d8800805 	stb	r2,32(sp)
 4100d84:	e0800117 	ldw	r2,4(fp)
 4100d88:	01c00044 	movi	r7,1
 4100d8c:	d9800804 	addi	r6,sp,32
 4100d90:	e00b883a 	mov	r5,fp
 4100d94:	9809883a 	mov	r4,r19
 4100d98:	103ee83a 	callr	r2
 4100d9c:	10002c1e 	bne	r2,zero,4100e50 <___vfprintf_internal_r+0x428>
 4100da0:	84000044 	addi	r16,r16,1
 4100da4:	003fe606 	br	4100d40 <__ram_exceptions_end+0xfc0f0bec>
 4100da8:	4a7fffc4 	addi	r9,r9,-1
 4100dac:	48800003 	ldbu	r2,0(r9)
 4100db0:	01c00044 	movi	r7,1
 4100db4:	d9800804 	addi	r6,sp,32
 4100db8:	d8800805 	stb	r2,32(sp)
 4100dbc:	e0800117 	ldw	r2,4(fp)
 4100dc0:	e00b883a 	mov	r5,fp
 4100dc4:	da401015 	stw	r9,64(sp)
 4100dc8:	9809883a 	mov	r4,r19
 4100dcc:	103ee83a 	callr	r2
 4100dd0:	da401017 	ldw	r9,64(sp)
 4100dd4:	10001e1e 	bne	r2,zero,4100e50 <___vfprintf_internal_r+0x428>
 4100dd8:	8245c83a 	sub	r2,r16,r9
 4100ddc:	4d89883a 	add	r4,r9,r22
 4100de0:	a085883a 	add	r2,r20,r2
 4100de4:	013ff016 	blt	zero,r4,4100da8 <__ram_exceptions_end+0xfc0f0c54>
 4100de8:	1021883a 	mov	r16,r2
 4100dec:	dd800d17 	ldw	r22,52(sp)
 4100df0:	00004406 	br	4100f04 <___vfprintf_internal_r+0x4dc>
 4100df4:	00800044 	movi	r2,1
 4100df8:	1440080e 	bge	r2,r17,4100e1c <___vfprintf_internal_r+0x3f4>
 4100dfc:	8d3fffc4 	addi	r20,r17,-1
 4100e00:	a00f883a 	mov	r7,r20
 4100e04:	01800804 	movi	r6,32
 4100e08:	e00b883a 	mov	r5,fp
 4100e0c:	9809883a 	mov	r4,r19
 4100e10:	41009bc0 	call	41009bc <print_repeat>
 4100e14:	10000e1e 	bne	r2,zero,4100e50 <___vfprintf_internal_r+0x428>
 4100e18:	8521883a 	add	r16,r16,r20
 4100e1c:	b0800017 	ldw	r2,0(r22)
 4100e20:	01c00044 	movi	r7,1
 4100e24:	d80d883a 	mov	r6,sp
 4100e28:	d8800005 	stb	r2,0(sp)
 4100e2c:	e0800117 	ldw	r2,4(fp)
 4100e30:	e00b883a 	mov	r5,fp
 4100e34:	9809883a 	mov	r4,r19
 4100e38:	b5000104 	addi	r20,r22,4
 4100e3c:	103ee83a 	callr	r2
 4100e40:	1000031e 	bne	r2,zero,4100e50 <___vfprintf_internal_r+0x428>
 4100e44:	84000044 	addi	r16,r16,1
 4100e48:	a02d883a 	mov	r22,r20
 4100e4c:	00002d06 	br	4100f04 <___vfprintf_internal_r+0x4dc>
 4100e50:	00bfffc4 	movi	r2,-1
 4100e54:	00003106 	br	4100f1c <___vfprintf_internal_r+0x4f4>
 4100e58:	b5000017 	ldw	r20,0(r22)
 4100e5c:	b0c00104 	addi	r3,r22,4
 4100e60:	d8c00a15 	stw	r3,40(sp)
 4100e64:	a009883a 	mov	r4,r20
 4100e68:	41009a00 	call	41009a0 <strlen>
 4100e6c:	8893c83a 	sub	r9,r17,r2
 4100e70:	102d883a 	mov	r22,r2
 4100e74:	0240090e 	bge	zero,r9,4100e9c <___vfprintf_internal_r+0x474>
 4100e78:	480f883a 	mov	r7,r9
 4100e7c:	01800804 	movi	r6,32
 4100e80:	e00b883a 	mov	r5,fp
 4100e84:	9809883a 	mov	r4,r19
 4100e88:	da401015 	stw	r9,64(sp)
 4100e8c:	41009bc0 	call	41009bc <print_repeat>
 4100e90:	da401017 	ldw	r9,64(sp)
 4100e94:	103fee1e 	bne	r2,zero,4100e50 <__ram_exceptions_end+0xfc0f0cfc>
 4100e98:	8261883a 	add	r16,r16,r9
 4100e9c:	e0800117 	ldw	r2,4(fp)
 4100ea0:	b00f883a 	mov	r7,r22
 4100ea4:	a00d883a 	mov	r6,r20
 4100ea8:	e00b883a 	mov	r5,fp
 4100eac:	9809883a 	mov	r4,r19
 4100eb0:	103ee83a 	callr	r2
 4100eb4:	103fe61e 	bne	r2,zero,4100e50 <__ram_exceptions_end+0xfc0f0cfc>
 4100eb8:	85a1883a 	add	r16,r16,r22
 4100ebc:	dd800a17 	ldw	r22,40(sp)
 4100ec0:	00001006 	br	4100f04 <___vfprintf_internal_r+0x4dc>
 4100ec4:	05c00044 	movi	r23,1
 4100ec8:	04bfffc4 	movi	r18,-1
 4100ecc:	d8000e15 	stw	zero,56(sp)
 4100ed0:	05400284 	movi	r21,10
 4100ed4:	9023883a 	mov	r17,r18
 4100ed8:	d8000c15 	stw	zero,48(sp)
 4100edc:	d8000b15 	stw	zero,44(sp)
 4100ee0:	b829883a 	mov	r20,r23
 4100ee4:	00000806 	br	4100f08 <___vfprintf_internal_r+0x4e0>
 4100ee8:	dd000b15 	stw	r20,44(sp)
 4100eec:	05000084 	movi	r20,2
 4100ef0:	00000506 	br	4100f08 <___vfprintf_internal_r+0x4e0>
 4100ef4:	00c00044 	movi	r3,1
 4100ef8:	d8c00c15 	stw	r3,48(sp)
 4100efc:	050000c4 	movi	r20,3
 4100f00:	00000106 	br	4100f08 <___vfprintf_internal_r+0x4e0>
 4100f04:	0029883a 	mov	r20,zero
 4100f08:	d8c00f17 	ldw	r3,60(sp)
 4100f0c:	18c00044 	addi	r3,r3,1
 4100f10:	d8c00f15 	stw	r3,60(sp)
 4100f14:	003ede06 	br	4100a90 <__ram_exceptions_end+0xfc0f093c>
 4100f18:	8005883a 	mov	r2,r16
 4100f1c:	dfc01a17 	ldw	ra,104(sp)
 4100f20:	df001917 	ldw	fp,100(sp)
 4100f24:	ddc01817 	ldw	r23,96(sp)
 4100f28:	dd801717 	ldw	r22,92(sp)
 4100f2c:	dd401617 	ldw	r21,88(sp)
 4100f30:	dd001517 	ldw	r20,84(sp)
 4100f34:	dcc01417 	ldw	r19,80(sp)
 4100f38:	dc801317 	ldw	r18,76(sp)
 4100f3c:	dc401217 	ldw	r17,72(sp)
 4100f40:	dc001117 	ldw	r16,68(sp)
 4100f44:	dec01b04 	addi	sp,sp,108
 4100f48:	f800283a 	ret

04100f4c <__vfprintf_internal>:
 4100f4c:	00810434 	movhi	r2,1040
 4100f50:	1085fc04 	addi	r2,r2,6128
 4100f54:	300f883a 	mov	r7,r6
 4100f58:	280d883a 	mov	r6,r5
 4100f5c:	200b883a 	mov	r5,r4
 4100f60:	11000017 	ldw	r4,0(r2)
 4100f64:	4100a281 	jmpi	4100a28 <___vfprintf_internal_r>

04100f68 <__sfvwrite_small_dev>:
 4100f68:	2880000b 	ldhu	r2,0(r5)
 4100f6c:	1080020c 	andi	r2,r2,8
 4100f70:	10002126 	beq	r2,zero,4100ff8 <__sfvwrite_small_dev+0x90>
 4100f74:	2880008f 	ldh	r2,2(r5)
 4100f78:	defffa04 	addi	sp,sp,-24
 4100f7c:	dc000015 	stw	r16,0(sp)
 4100f80:	dfc00515 	stw	ra,20(sp)
 4100f84:	dd000415 	stw	r20,16(sp)
 4100f88:	dcc00315 	stw	r19,12(sp)
 4100f8c:	dc800215 	stw	r18,8(sp)
 4100f90:	dc400115 	stw	r17,4(sp)
 4100f94:	2821883a 	mov	r16,r5
 4100f98:	10001216 	blt	r2,zero,4100fe4 <__sfvwrite_small_dev+0x7c>
 4100f9c:	2027883a 	mov	r19,r4
 4100fa0:	3025883a 	mov	r18,r6
 4100fa4:	3823883a 	mov	r17,r7
 4100fa8:	05010004 	movi	r20,1024
 4100fac:	04400b0e 	bge	zero,r17,4100fdc <__sfvwrite_small_dev+0x74>
 4100fb0:	880f883a 	mov	r7,r17
 4100fb4:	a440010e 	bge	r20,r17,4100fbc <__sfvwrite_small_dev+0x54>
 4100fb8:	01c10004 	movi	r7,1024
 4100fbc:	8140008f 	ldh	r5,2(r16)
 4100fc0:	900d883a 	mov	r6,r18
 4100fc4:	9809883a 	mov	r4,r19
 4100fc8:	41010cc0 	call	41010cc <_write_r>
 4100fcc:	0080050e 	bge	zero,r2,4100fe4 <__sfvwrite_small_dev+0x7c>
 4100fd0:	88a3c83a 	sub	r17,r17,r2
 4100fd4:	90a5883a 	add	r18,r18,r2
 4100fd8:	003ff406 	br	4100fac <__ram_exceptions_end+0xfc0f0e58>
 4100fdc:	0005883a 	mov	r2,zero
 4100fe0:	00000706 	br	4101000 <__sfvwrite_small_dev+0x98>
 4100fe4:	8080000b 	ldhu	r2,0(r16)
 4100fe8:	10801014 	ori	r2,r2,64
 4100fec:	8080000d 	sth	r2,0(r16)
 4100ff0:	00bfffc4 	movi	r2,-1
 4100ff4:	00000206 	br	4101000 <__sfvwrite_small_dev+0x98>
 4100ff8:	00bfffc4 	movi	r2,-1
 4100ffc:	f800283a 	ret
 4101000:	dfc00517 	ldw	ra,20(sp)
 4101004:	dd000417 	ldw	r20,16(sp)
 4101008:	dcc00317 	ldw	r19,12(sp)
 410100c:	dc800217 	ldw	r18,8(sp)
 4101010:	dc400117 	ldw	r17,4(sp)
 4101014:	dc000017 	ldw	r16,0(sp)
 4101018:	dec00604 	addi	sp,sp,24
 410101c:	f800283a 	ret

04101020 <putc>:
 4101020:	defffd04 	addi	sp,sp,-12
 4101024:	00810434 	movhi	r2,1040
 4101028:	dc000115 	stw	r16,4(sp)
 410102c:	dfc00215 	stw	ra,8(sp)
 4101030:	1083da04 	addi	r2,r2,3944
 4101034:	28800115 	stw	r2,4(r5)
 4101038:	00810434 	movhi	r2,1040
 410103c:	1085fc04 	addi	r2,r2,6128
 4101040:	d9000005 	stb	r4,0(sp)
 4101044:	2021883a 	mov	r16,r4
 4101048:	11000017 	ldw	r4,0(r2)
 410104c:	01c00044 	movi	r7,1
 4101050:	d80d883a 	mov	r6,sp
 4101054:	4100f680 	call	4100f68 <__sfvwrite_small_dev>
 4101058:	00ffffc4 	movi	r3,-1
 410105c:	10c00126 	beq	r2,r3,4101064 <putc+0x44>
 4101060:	8005883a 	mov	r2,r16
 4101064:	dfc00217 	ldw	ra,8(sp)
 4101068:	dc000117 	ldw	r16,4(sp)
 410106c:	dec00304 	addi	sp,sp,12
 4101070:	f800283a 	ret

04101074 <_putc_r>:
 4101074:	defffd04 	addi	sp,sp,-12
 4101078:	00810434 	movhi	r2,1040
 410107c:	dc000115 	stw	r16,4(sp)
 4101080:	dfc00215 	stw	ra,8(sp)
 4101084:	1083da04 	addi	r2,r2,3944
 4101088:	30800115 	stw	r2,4(r6)
 410108c:	00810434 	movhi	r2,1040
 4101090:	1085fc04 	addi	r2,r2,6128
 4101094:	11000017 	ldw	r4,0(r2)
 4101098:	2821883a 	mov	r16,r5
 410109c:	01c00044 	movi	r7,1
 41010a0:	300b883a 	mov	r5,r6
 41010a4:	d80d883a 	mov	r6,sp
 41010a8:	dc000005 	stb	r16,0(sp)
 41010ac:	4100f680 	call	4100f68 <__sfvwrite_small_dev>
 41010b0:	00ffffc4 	movi	r3,-1
 41010b4:	10c00126 	beq	r2,r3,41010bc <_putc_r+0x48>
 41010b8:	8005883a 	mov	r2,r16
 41010bc:	dfc00217 	ldw	ra,8(sp)
 41010c0:	dc000117 	ldw	r16,4(sp)
 41010c4:	dec00304 	addi	sp,sp,12
 41010c8:	f800283a 	ret

041010cc <_write_r>:
 41010cc:	defffd04 	addi	sp,sp,-12
 41010d0:	dc000015 	stw	r16,0(sp)
 41010d4:	04010434 	movhi	r16,1040
 41010d8:	dc400115 	stw	r17,4(sp)
 41010dc:	84064e04 	addi	r16,r16,6456
 41010e0:	2023883a 	mov	r17,r4
 41010e4:	2809883a 	mov	r4,r5
 41010e8:	300b883a 	mov	r5,r6
 41010ec:	380d883a 	mov	r6,r7
 41010f0:	dfc00215 	stw	ra,8(sp)
 41010f4:	80000015 	stw	zero,0(r16)
 41010f8:	41012c80 	call	41012c8 <write>
 41010fc:	00ffffc4 	movi	r3,-1
 4101100:	10c0031e 	bne	r2,r3,4101110 <_write_r+0x44>
 4101104:	80c00017 	ldw	r3,0(r16)
 4101108:	18000126 	beq	r3,zero,4101110 <_write_r+0x44>
 410110c:	88c00015 	stw	r3,0(r17)
 4101110:	dfc00217 	ldw	ra,8(sp)
 4101114:	dc400117 	ldw	r17,4(sp)
 4101118:	dc000017 	ldw	r16,0(sp)
 410111c:	dec00304 	addi	sp,sp,12
 4101120:	f800283a 	ret

04101124 <__muldi3>:
 4101124:	223fffcc 	andi	r8,r4,65535
 4101128:	2006d43a 	srli	r3,r4,16
 410112c:	32bfffcc 	andi	r10,r6,65535
 4101130:	3012d43a 	srli	r9,r6,16
 4101134:	4297383a 	mul	r11,r8,r10
 4101138:	1a95383a 	mul	r10,r3,r10
 410113c:	4251383a 	mul	r8,r8,r9
 4101140:	5804d43a 	srli	r2,r11,16
 4101144:	4291883a 	add	r8,r8,r10
 4101148:	1205883a 	add	r2,r2,r8
 410114c:	1a51383a 	mul	r8,r3,r9
 4101150:	1280022e 	bgeu	r2,r10,410115c <__muldi3+0x38>
 4101154:	00c00074 	movhi	r3,1
 4101158:	40d1883a 	add	r8,r8,r3
 410115c:	1006d43a 	srli	r3,r2,16
 4101160:	21cf383a 	mul	r7,r4,r7
 4101164:	314b383a 	mul	r5,r6,r5
 4101168:	1004943a 	slli	r2,r2,16
 410116c:	1a11883a 	add	r8,r3,r8
 4101170:	5affffcc 	andi	r11,r11,65535
 4101174:	3947883a 	add	r3,r7,r5
 4101178:	12c5883a 	add	r2,r2,r11
 410117c:	1a07883a 	add	r3,r3,r8
 4101180:	f800283a 	ret

04101184 <alt_load>:
 4101184:	deffff04 	addi	sp,sp,-4
 4101188:	01010434 	movhi	r4,1040
 410118c:	01410434 	movhi	r5,1040
 4101190:	dfc00015 	stw	ra,0(sp)
 4101194:	2105b804 	addi	r4,r4,5856
 4101198:	29460104 	addi	r5,r5,6148
 410119c:	2140061e 	bne	r4,r5,41011b8 <alt_load+0x34>
 41011a0:	01020074 	movhi	r4,2049
 41011a4:	01410434 	movhi	r5,1040
 41011a8:	21001004 	addi	r4,r4,64
 41011ac:	29400004 	addi	r5,r5,0
 41011b0:	2140121e 	bne	r4,r5,41011fc <alt_load+0x78>
 41011b4:	00000b06 	br	41011e4 <alt_load+0x60>
 41011b8:	00c10434 	movhi	r3,1040
 41011bc:	18c60104 	addi	r3,r3,6148
 41011c0:	1907c83a 	sub	r3,r3,r4
 41011c4:	0005883a 	mov	r2,zero
 41011c8:	10fff526 	beq	r2,r3,41011a0 <__ram_exceptions_end+0xfc0f104c>
 41011cc:	114f883a 	add	r7,r2,r5
 41011d0:	39c00017 	ldw	r7,0(r7)
 41011d4:	110d883a 	add	r6,r2,r4
 41011d8:	10800104 	addi	r2,r2,4
 41011dc:	31c00015 	stw	r7,0(r6)
 41011e0:	003ff906 	br	41011c8 <__ram_exceptions_end+0xfc0f1074>
 41011e4:	01010434 	movhi	r4,1040
 41011e8:	01410434 	movhi	r5,1040
 41011ec:	21057d04 	addi	r4,r4,5620
 41011f0:	29457d04 	addi	r5,r5,5620
 41011f4:	2140101e 	bne	r4,r5,4101238 <alt_load+0xb4>
 41011f8:	00000b06 	br	4101228 <alt_load+0xa4>
 41011fc:	00c20074 	movhi	r3,2049
 4101200:	18c05504 	addi	r3,r3,340
 4101204:	1907c83a 	sub	r3,r3,r4
 4101208:	0005883a 	mov	r2,zero
 410120c:	10fff526 	beq	r2,r3,41011e4 <__ram_exceptions_end+0xfc0f1090>
 4101210:	114f883a 	add	r7,r2,r5
 4101214:	39c00017 	ldw	r7,0(r7)
 4101218:	110d883a 	add	r6,r2,r4
 410121c:	10800104 	addi	r2,r2,4
 4101220:	31c00015 	stw	r7,0(r6)
 4101224:	003ff906 	br	410120c <__ram_exceptions_end+0xfc0f10b8>
 4101228:	41014800 	call	4101480 <alt_dcache_flush_all>
 410122c:	dfc00017 	ldw	ra,0(sp)
 4101230:	dec00104 	addi	sp,sp,4
 4101234:	41015781 	jmpi	4101578 <alt_icache_flush_all>
 4101238:	00c10434 	movhi	r3,1040
 410123c:	18c5b804 	addi	r3,r3,5856
 4101240:	1907c83a 	sub	r3,r3,r4
 4101244:	0005883a 	mov	r2,zero
 4101248:	18bff726 	beq	r3,r2,4101228 <__ram_exceptions_end+0xfc0f10d4>
 410124c:	114f883a 	add	r7,r2,r5
 4101250:	39c00017 	ldw	r7,0(r7)
 4101254:	110d883a 	add	r6,r2,r4
 4101258:	10800104 	addi	r2,r2,4
 410125c:	31c00015 	stw	r7,0(r6)
 4101260:	003ff906 	br	4101248 <__ram_exceptions_end+0xfc0f10f4>

04101264 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4101264:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4101268:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 410126c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4101270:	41013280 	call	4101328 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4101274:	41013480 	call	4101348 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 4101278:	d1a05b17 	ldw	r6,-32404(gp)
 410127c:	d1605c17 	ldw	r5,-32400(gp)
 4101280:	d1205d17 	ldw	r4,-32396(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 4101284:	dfc00017 	ldw	ra,0(sp)
 4101288:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 410128c:	41004541 	jmpi	4100454 <main>

04101290 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 4101290:	defffe04 	addi	sp,sp,-8
 4101294:	dc000015 	stw	r16,0(sp)
 4101298:	dfc00115 	stw	ra,4(sp)
 410129c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 41012a0:	41009a00 	call	41009a0 <strlen>
 41012a4:	01010434 	movhi	r4,1040
 41012a8:	000f883a 	mov	r7,zero
 41012ac:	100d883a 	mov	r6,r2
 41012b0:	800b883a 	mov	r5,r16
 41012b4:	2105fd04 	addi	r4,r4,6132
#else
    return fputs(str, stdout);
#endif
#endif
}
 41012b8:	dfc00117 	ldw	ra,4(sp)
 41012bc:	dc000017 	ldw	r16,0(sp)
 41012c0:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 41012c4:	41013581 	jmpi	4101358 <altera_avalon_jtag_uart_write>

041012c8 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 41012c8:	00800044 	movi	r2,1
 41012cc:	20800226 	beq	r4,r2,41012d8 <write+0x10>
 41012d0:	00800084 	movi	r2,2
 41012d4:	2080041e 	bne	r4,r2,41012e8 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 41012d8:	01010434 	movhi	r4,1040
 41012dc:	000f883a 	mov	r7,zero
 41012e0:	2105fd04 	addi	r4,r4,6132
 41012e4:	41013581 	jmpi	4101358 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 41012e8:	d0a00c17 	ldw	r2,-32720(gp)
 41012ec:	10000926 	beq	r2,zero,4101314 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 41012f0:	deffff04 	addi	sp,sp,-4
 41012f4:	dfc00015 	stw	ra,0(sp)
 41012f8:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 41012fc:	00c01444 	movi	r3,81
 4101300:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 4101304:	00bfffc4 	movi	r2,-1
 4101308:	dfc00017 	ldw	ra,0(sp)
 410130c:	dec00104 	addi	sp,sp,4
 4101310:	f800283a 	ret
 4101314:	d0a05a04 	addi	r2,gp,-32408
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 4101318:	00c01444 	movi	r3,81
 410131c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 4101320:	00bfffc4 	movi	r2,-1
 4101324:	f800283a 	ret

04101328 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4101328:	deffff04 	addi	sp,sp,-4
 410132c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_CORE1, Nios2_Core1);
 4101330:	41015840 	call	4101584 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4101334:	00800044 	movi	r2,1
 4101338:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 410133c:	dfc00017 	ldw	ra,0(sp)
 4101340:	dec00104 	addi	sp,sp,4
 4101344:	f800283a 	ret

04101348 <alt_sys_init>:
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
  if (!ret_code)
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 4101348:	01010434 	movhi	r4,1040
 410134c:	d1600a04 	addi	r5,gp,-32728
 4101350:	2105f004 	addi	r4,r4,6080
 4101354:	41014981 	jmpi	4101498 <alt_dev_llist_insert>

04101358 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 4101358:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 410135c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 4101360:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 4101364:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 4101368:	2980072e 	bgeu	r5,r6,4101388 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 410136c:	38c00037 	ldwio	r3,0(r7)
 4101370:	18ffffec 	andhi	r3,r3,65535
 4101374:	183ffc26 	beq	r3,zero,4101368 <__ram_exceptions_end+0xfc0f1214>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 4101378:	28c00007 	ldb	r3,0(r5)
 410137c:	20c00035 	stwio	r3,0(r4)
 4101380:	29400044 	addi	r5,r5,1
 4101384:	003ff806 	br	4101368 <__ram_exceptions_end+0xfc0f1214>

  return count;
}
 4101388:	f800283a 	ret

0410138c <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 410138c:	defffe04 	addi	sp,sp,-8
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 4101390:	d1600a04 	addi	r5,gp,-32728
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 4101394:	dc000015 	stw	r16,0(sp)
 4101398:	dfc00115 	stw	ra,4(sp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 410139c:	41015040 	call	4101504 <alt_find_dev>
 41013a0:	1021883a 	mov	r16,r2

  if (NULL == dev)
 41013a4:	1000071e 	bne	r2,zero,41013c4 <altera_avalon_mutex_open+0x38>
 41013a8:	d0a00c17 	ldw	r2,-32720(gp)
 41013ac:	10000226 	beq	r2,zero,41013b8 <altera_avalon_mutex_open+0x2c>
 41013b0:	103ee83a 	callr	r2
 41013b4:	00000106 	br	41013bc <altera_avalon_mutex_open+0x30>
 41013b8:	d0a05a04 	addi	r2,gp,-32408
  {
    ALT_ERRNO = ENODEV;
 41013bc:	00c004c4 	movi	r3,19
 41013c0:	10c00015 	stw	r3,0(r2)
  }

  return dev;
}
 41013c4:	8005883a 	mov	r2,r16
 41013c8:	dfc00117 	ldw	ra,4(sp)
 41013cc:	dc000017 	ldw	r16,0(sp)
 41013d0:	dec00204 	addi	sp,sp,8
 41013d4:	f800283a 	ret

041013d8 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 41013d8:	f800283a 	ret

041013dc <altera_avalon_mutex_lock>:
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  alt_u32 id, data, check;
  int ret_code = -1;

  NIOS2_READ_CPUID(id);
 41013dc:	0005317a 	rdctl	r2,cpuid

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 41013e0:	1004943a 	slli	r2,r2,16

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 41013e4:	20c00317 	ldw	r3,12(r4)
  int ret_code = -1;

  NIOS2_READ_CPUID(id);

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 41013e8:	1144b03a 	or	r2,r2,r5

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 41013ec:	18800035 	stwio	r2,0(r3)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 41013f0:	20c00317 	ldw	r3,12(r4)
 41013f4:	18c00037 	ldwio	r3,0(r3)

  if ( check == data)
 41013f8:	10fff81e 	bne	r2,r3,41013dc <__ram_exceptions_end+0xfc0f1288>
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
}
 41013fc:	f800283a 	ret

04101400 <altera_avalon_mutex_trylock>:
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  alt_u32 id, data, check;
  int ret_code = -1;

  NIOS2_READ_CPUID(id);
 4101400:	0005317a 	rdctl	r2,cpuid

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 4101404:	1004943a 	slli	r2,r2,16
 4101408:	114ab03a 	or	r5,r2,r5

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 410140c:	20800317 	ldw	r2,12(r4)
 4101410:	11400035 	stwio	r5,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 4101414:	20800317 	ldw	r2,12(r4)
 4101418:	10800037 	ldwio	r2,0(r2)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 410141c:	1144c03a 	cmpne	r2,r2,r5
}
 4101420:	0085c83a 	sub	r2,zero,r2
 4101424:	f800283a 	ret

04101428 <altera_avalon_mutex_unlock>:
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 4101428:	0005317a 	rdctl	r2,cpuid

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 410142c:	20c00317 	ldw	r3,12(r4)
 4101430:	01400044 	movi	r5,1
 4101434:	19400135 	stwio	r5,4(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 4101438:	1004943a 	slli	r2,r2,16
 410143c:	20c00317 	ldw	r3,12(r4)
 4101440:	18800035 	stwio	r2,0(r3)
 4101444:	f800283a 	ret

04101448 <altera_avalon_mutex_is_mine>:
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  alt_u32 id, data, owner, value;
  int ret_code = 0;

  NIOS2_READ_CPUID(id);
 4101448:	000b317a 	rdctl	r5,cpuid

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 410144c:	20800317 	ldw	r2,12(r4)
 4101450:	10800037 	ldwio	r2,0(r2)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 4101454:	1006d43a 	srli	r3,r2,16
 4101458:	28c0031e 	bne	r5,r3,4101468 <altera_avalon_mutex_is_mine+0x20>
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 410145c:	10bfffcc 	andi	r2,r2,65535
 4101460:	1004c03a 	cmpne	r2,r2,zero
 4101464:	f800283a 	ret
 4101468:	0005883a 	mov	r2,zero
      ret_code = 1;
    }
  }

  return ret_code;
}
 410146c:	f800283a 	ret

04101470 <altera_avalon_mutex_first_lock>:
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
  alt_u32 data;
  int ret_code = 0;

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 4101470:	20800317 	ldw	r2,12(r4)
 4101474:	10800137 	ldwio	r2,4(r2)
  {
    ret_code = 1;
  }

  return ret_code;
}
 4101478:	1080004c 	andi	r2,r2,1
 410147c:	f800283a 	ret

04101480 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4101480:	0005883a 	mov	r2,zero
 4101484:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4101488:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 410148c:	10800804 	addi	r2,r2,32
 4101490:	10fffd1e 	bne	r2,r3,4101488 <__ram_exceptions_end+0xfc0f1334>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4101494:	f800283a 	ret

04101498 <alt_dev_llist_insert>:
 4101498:	20000226 	beq	r4,zero,41014a4 <alt_dev_llist_insert+0xc>
 410149c:	20800217 	ldw	r2,8(r4)
 41014a0:	1000101e 	bne	r2,zero,41014e4 <alt_dev_llist_insert+0x4c>
 41014a4:	d0a00c17 	ldw	r2,-32720(gp)
 41014a8:	10000926 	beq	r2,zero,41014d0 <alt_dev_llist_insert+0x38>
 41014ac:	deffff04 	addi	sp,sp,-4
 41014b0:	dfc00015 	stw	ra,0(sp)
 41014b4:	103ee83a 	callr	r2
 41014b8:	00c00584 	movi	r3,22
 41014bc:	10c00015 	stw	r3,0(r2)
 41014c0:	00bffa84 	movi	r2,-22
 41014c4:	dfc00017 	ldw	ra,0(sp)
 41014c8:	dec00104 	addi	sp,sp,4
 41014cc:	f800283a 	ret
 41014d0:	d0a05a04 	addi	r2,gp,-32408
 41014d4:	00c00584 	movi	r3,22
 41014d8:	10c00015 	stw	r3,0(r2)
 41014dc:	00bffa84 	movi	r2,-22
 41014e0:	f800283a 	ret
 41014e4:	28800017 	ldw	r2,0(r5)
 41014e8:	21400115 	stw	r5,4(r4)
 41014ec:	20800015 	stw	r2,0(r4)
 41014f0:	28800017 	ldw	r2,0(r5)
 41014f4:	11000115 	stw	r4,4(r2)
 41014f8:	29000015 	stw	r4,0(r5)
 41014fc:	0005883a 	mov	r2,zero
 4101500:	f800283a 	ret

04101504 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4101504:	defffb04 	addi	sp,sp,-20
 4101508:	dcc00315 	stw	r19,12(sp)
 410150c:	dc800215 	stw	r18,8(sp)
 4101510:	dc400115 	stw	r17,4(sp)
 4101514:	dc000015 	stw	r16,0(sp)
 4101518:	dfc00415 	stw	ra,16(sp)
 410151c:	2027883a 	mov	r19,r4
 4101520:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
 4101524:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
 4101528:	41009a00 	call	41009a0 <strlen>
 410152c:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4101530:	84400726 	beq	r16,r17,4101550 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4101534:	81000217 	ldw	r4,8(r16)
 4101538:	900d883a 	mov	r6,r18
 410153c:	980b883a 	mov	r5,r19
 4101540:	41015c40 	call	41015c4 <memcmp>
 4101544:	10000426 	beq	r2,zero,4101558 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
 4101548:	84000017 	ldw	r16,0(r16)
 410154c:	003ff806 	br	4101530 <__ram_exceptions_end+0xfc0f13dc>
  }
  
  /* No match found */
  
  return NULL;
 4101550:	0005883a 	mov	r2,zero
 4101554:	00000106 	br	410155c <alt_find_dev+0x58>
 4101558:	8005883a 	mov	r2,r16
}
 410155c:	dfc00417 	ldw	ra,16(sp)
 4101560:	dcc00317 	ldw	r19,12(sp)
 4101564:	dc800217 	ldw	r18,8(sp)
 4101568:	dc400117 	ldw	r17,4(sp)
 410156c:	dc000017 	ldw	r16,0(sp)
 4101570:	dec00504 	addi	sp,sp,20
 4101574:	f800283a 	ret

04101578 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4101578:	01440004 	movi	r5,4096
 410157c:	0009883a 	mov	r4,zero
 4101580:	410158c1 	jmpi	410158c <alt_icache_flush>

04101584 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 4101584:	000170fa 	wrctl	ienable,zero
 4101588:	f800283a 	ret

0410158c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
 410158c:	00840004 	movi	r2,4096
 4101590:	1140012e 	bgeu	r2,r5,4101598 <alt_icache_flush+0xc>
 4101594:	100b883a 	mov	r5,r2
 4101598:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 410159c:	2005883a 	mov	r2,r4
 41015a0:	1140032e 	bgeu	r2,r5,41015b0 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 41015a4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 41015a8:	10800804 	addi	r2,r2,32
 41015ac:	003ffc06 	br	41015a0 <__ram_exceptions_end+0xfc0f144c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 41015b0:	210007cc 	andi	r4,r4,31
 41015b4:	20000126 	beq	r4,zero,41015bc <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 41015b8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 41015bc:	0000203a 	flushp
 41015c0:	f800283a 	ret

041015c4 <memcmp>:
 41015c4:	218d883a 	add	r6,r4,r6
 41015c8:	21800826 	beq	r4,r6,41015ec <memcmp+0x28>
 41015cc:	20800003 	ldbu	r2,0(r4)
 41015d0:	28c00003 	ldbu	r3,0(r5)
 41015d4:	10c00226 	beq	r2,r3,41015e0 <memcmp+0x1c>
 41015d8:	10c5c83a 	sub	r2,r2,r3
 41015dc:	f800283a 	ret
 41015e0:	21000044 	addi	r4,r4,1
 41015e4:	29400044 	addi	r5,r5,1
 41015e8:	003ff706 	br	41015c8 <__ram_exceptions_end+0xfc0f1474>
 41015ec:	0005883a 	mov	r2,zero
 41015f0:	f800283a 	ret
